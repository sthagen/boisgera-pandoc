{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview \u00b6 This project brings Pandoc 's data model for markdown documents to Python: $ echo \"Hello world!\" | python -m pandoc read Pandoc(Meta({}), [Para([Str('Hello'), Space(), Str('world!')])]) It can be used to analyze, create and transform documents, in Python : >>> import pandoc >>> text = \"Hello world!\" >>> doc = pandoc . read ( text ) >>> doc Pandoc(Meta({}), [Para([Str('Hello'), Space(), Str('world!')])]) >>> paragraph = doc [ 1 ][ 0 ] >>> paragraph Para([Str('Hello'), Space(), Str('world!')]) >>> from pandoc.types import Str >>> paragraph [ 0 ][ 2 ] = Str ( 'Python!' ) >>> text = pandoc . write ( doc ) >>> print ( text ) # doctest: +NORMALIZE_WHITESPACE Hello Python! Pandoc is the general markup converter (and Haskell library) written by John MacFarlane . Warning This documentation is dedicated to the latest version of the project available on github . It is automatically tested with Python 3.10 against pandoc 2.19.2, the latest release of pandoc at the moment I am writing this.","title":"Overview"},{"location":"#overview","text":"This project brings Pandoc 's data model for markdown documents to Python: $ echo \"Hello world!\" | python -m pandoc read Pandoc(Meta({}), [Para([Str('Hello'), Space(), Str('world!')])]) It can be used to analyze, create and transform documents, in Python : >>> import pandoc >>> text = \"Hello world!\" >>> doc = pandoc . read ( text ) >>> doc Pandoc(Meta({}), [Para([Str('Hello'), Space(), Str('world!')])]) >>> paragraph = doc [ 1 ][ 0 ] >>> paragraph Para([Str('Hello'), Space(), Str('world!')]) >>> from pandoc.types import Str >>> paragraph [ 0 ][ 2 ] = Str ( 'Python!' ) >>> text = pandoc . write ( doc ) >>> print ( text ) # doctest: +NORMALIZE_WHITESPACE Hello Python! Pandoc is the general markup converter (and Haskell library) written by John MacFarlane . Warning This documentation is dedicated to the latest version of the project available on github . It is automatically tested with Python 3.10 against pandoc 2.19.2, the latest release of pandoc at the moment I am writing this.","title":"Overview"},{"location":"api/","text":"API Reference \u00b6 import pandoc from pandoc.types import * pandoc \u00b6 read(source=None, file=None, format=None, options=None) Read a source document. The source document must be specified by either source or file . Implicitly, the document format is inferred from the filename extension when possible 1 , otherwise the markdown format is assumed by default; the input format can also be specified explicitly. Extra options can be passed to the pandoc command-line tool. Arguments source : the document content, as a string or as utf-8 encoded bytes. file : the document, provided as a file or filename. format : the document format (such as \"markdown\" , \"odt\" , \"docx\" , \"html\" , etc.) Refer to Pandoc's README for the list of supported input formats. options : additional pandoc options (a list of strings). Refer to Pandoc's user guide for a complete list of options. Returns doc : the document, as a Pandoc object. Usage Read documents from strings: >>> markdown = \"Hello world!\" >>> pandoc . read ( markdown ) Pandoc(Meta({}), [Para([Str('Hello'), Space(), Str('world!')])]) >>> html = \"<p>Hello world!</p>\" >>> pandoc . read ( html , format = \"html\" ) Pandoc(Meta({}), [Para([Str('Hello'), Space(), Str('world!')])]) Read documents from files: >>> filename = \"doc.html\" >>> with open ( filename , \"w\" , encoding = \"utf-8\" ) as file : ... _ = file . write ( html ) >>> pandoc . read ( file = filename ) # html format inferred from filename Pandoc(Meta({}), [Para([Str('Hello'), Space(), Str('world!')])]) >>> file = open ( filename , encoding = \"utf-8\" ) >>> pandoc . read ( file = file , format = \"html\" ) # but here it must be explicit Pandoc(Meta({}), [Para([Str('Hello'), Space(), Str('world!')])]) Use extra pandoc options: >>> pandoc . read ( markdown , options = [ \"-M\" , \"id=hello\" ]) # add metadata Pandoc(Meta({'id': MetaString('hello')}), [Para([Str('Hello'), Space(), Str('world!')])]) write(doc, file=None, format=None, options=None) Write a pandoc document (or document fragment) to a file and return its contents. Inline document fragments are automatically wrapped into a Plain blocks; block document fragments are automatically wrapped into a Pandoc element with no metadata. Implicitly, the document format is inferred from the filename extension when possible 1 , otherwise the markdown format is assumed by default; the output format can also be specified explicitly. Extra options can be passed to the pandoc command-line tool. Arguments doc : a Pandoc object or a document fragment ( Inline , [Inline] , MetaInlines , Block , [Block] or MetaBlocks ). file : a file, filename or None . format : the document format (such as \"markdown\" , \"odt\" , \"docx\" , \"html\" , etc.) Refer to Pandoc's README for the list of supported output formats. options : additional pandoc options (a list of strings). Refer to Pandoc's user guide for a complete list of options. Returns output : the output document, as a string or as a byte sequence. Bytes are only used for binary output formats (doc, ppt, etc.). Usage Write documents to markdown strings: >>> doc = pandoc . read ( \"Hello world!\" ) >>> doc Pandoc(Meta({}), [Para([Str('Hello'), Space(), Str('world!')])]) >>> print ( pandoc . write ( doc )) # doctest: +NORMALIZE_WHITESPACE Hello world! Write document fragments to markdown strings: >>> md = lambda elt : print ( pandoc . write ( elt )) >>> md ( Str ( \"Hello!\" )) # doctest: +NORMALIZE_WHITESPACE Hello! >>> md ([ Str ( 'Hello' ), Space (), Str ( 'world!' )]) # doctest: +NORMALIZE_WHITESPACE Hello world! >>> md ( Para ([ Str ( 'Hello' ), Space (), Str ( 'world!' )])) # doctest: +NORMALIZE_WHITESPACE Hello world! >>> md ([ # doctest: +NORMALIZE_WHITESPACE ... Para ([ Str ( 'Hello' ), Space (), Str ( 'world!' )]), ... Para ([ Str ( 'Hello' ), Space (), Str ( 'world!' )]) ... ]) Hello world! <BLANKLINE> Hello world! >>> md ( MetaInlines ([ Str ( 'Hello' ), Space (), Str ( 'world!' )])) # doctest: +NORMALIZE_WHITESPACE Hello world! >>> md ( MetaBlocks ([ # doctest: +NORMALIZE_WHITESPACE ... Para ([ Str ( 'Hello' ), Space (), Str ( 'world!' )]), ... Para ([ Str ( 'Hello' ), Space (), Str ( 'world!' )]) ... ])) Hello world! <BLANKLINE> Hello world! Use alternate (text or binary) output formats: >>> output = pandoc . write ( doc , format = \"html\" ) # html output >>> type ( output ) <class 'str'> >>> print ( output ) <p>Hello world!</p> <BLANKLINE> >>> output = pandoc . write ( doc , format = \"odt\" ) >>> type ( output ) <class 'bytes'> >>> output # doctest: +ELLIPSIS b'PK...' Write documents to files: >>> _ = pandoc . write ( doc , file = \"doc.md\" ) >>> open ( \"doc.md\" , encoding = \"utf-8\" ) . read () 'Hello world!\\n' >>> _ = pandoc . write ( doc , file = \"doc.html\" ) >>> open ( \"doc.html\" , encoding = \"utf-8\" ) . read () '<p>Hello world!</p>\\n' >>> _ = pandoc . write ( doc , file = \"doc.pdf\" ) >>> open ( \"doc.pdf\" , \"rb\" ) . read () # doctest: +ELLIPSIS b'%PDF...' Use extra pandoc options: >>> output = pandoc . write ( ... doc , ... format = \"html\" , ... options = [ \"--standalone\" , \"-V\" , \"lang=en\" ] ... ) >>> print ( output ) # doctest: +ELLIPSIS, +NORMALIZE_WHITESPACE <!DOCTYPE html> <html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en\" xml:lang=\"en\"> ... <body> <p>Hello world!</p> </body> </html> iter(elt, path=False) Iterate on document elements in document order. Arguments elt : a pandoc item (or more generally any Python object), path : a boolean; defaults to False . Returns iterator : a depth-first tree iterator. elt_path (when path==True ): a list of (elt, index) pairs. Usage This iterator may be used as a general-purpose tree iterator >>> tree = [ 1 , [ 2 , [ 3 ]]] >>> for elt in pandoc . iter ( tree ): ... print ( elt ) [1, [2, [3]]] 1 [2, [3]] 2 [3] 3 Non-iterable objects yield themselves: >>> root = 1 >>> for elt in pandoc . iter ( root ): ... print ( elt ) 1 But it is really meant to be used with pandoc objects: >>> doc = Pandoc ( Meta ({}), [ Para ([ Str ( 'Hello' ), Space (), Str ( 'world!' )])]) >>> for elt in pandoc . iter ( doc ): ... print ( elt ) Pandoc(Meta({}), [Para([Str('Hello'), Space(), Str('world!')])]) Meta({}) {} [Para([Str('Hello'), Space(), Str('world!')])] Para([Str('Hello'), Space(), Str('world!')]) [Str('Hello'), Space(), Str('world!')] Str('Hello') Hello Space() Str('world!') world! Two gotchas: characters in strings are not iterated (strings are considered \"atomic\") >>> root = \"Hello world!\" >>> for elt in pandoc . iter ( root ): ... print ( elt ) Hello world! and dicts yield their key-value pairs (and not only their keys): >>> root = { \"a\" : 1 , \"b\" : 2 } >>> for elt in pandoc . iter ( root ): ... print ( elt ) {'a': 1, 'b': 2} ('a', 1) a 1 ('b', 2) b 2 Use path=True when you need to locate the element in the document. You can get the element parent and index within this parent as path[-1] , the grand-parent and the index of the parent within the grand-parent as path[-2] , etc. up to the document root. >>> doc = Pandoc ( Meta ({}), [ Para ([ Str ( 'Hello' ), Space (), Str ( 'world!' )])]) >>> world = Str ( \"world!\" ) >>> for elt , path in pandoc . iter ( doc , path = True ): # find the path to Str(\"world!\") ... if elt == world : ... break >>> for elt , index in path : ... print ( f \"At index { index } in { elt } :\" ) ... else : ... print ( world ) At index 1 in Pandoc(Meta({}), [Para([Str('Hello'), Space(), Str('world!')])]): At index 0 in [Para([Str('Hello'), Space(), Str('world!')])]: At index 0 in Para([Str('Hello'), Space(), Str('world!')]): At index 2 in [Str('Hello'), Space(), Str('world!')]: Str('world!') See also Refer to the Tree iteration section . configure(auto=False, path=None, version=None, pandoc_types_version=None, read=False, reset=False) Arguments auto : a boolean; defaults to False ; set to True to infer the configuration from the pandoc in your path. path : the path to the pandoc executable, such as \"/usr/bin/pandoc\" . version : the pandoc command-line tool version, such as \"2.14.2\" . pandoc_types_version : the pandoc-types version, such as \"1.22.1\" . read : a boolean; defaults to False . Return the configuration dictionary. reset : a boolean; defaults to False . Delete the current configuration. Returns configuration (if read==True ): the configuration dictionary, with entries \"auto\" , \"path\" , \"version\" and \" pandoc_types_version \". Usage The configuration step is triggered when you import pandoc.types or call pandoc.read or pandoc.write and will automatically infer the configuration from the pandoc executable found in the path (or fails). >>> config = pandoc . configure ( read = True ) >>> config # doctest: +ELLIPSIS, +NORMALIZE_WHITESPACE {'auto': True, 'path': ..., 'version': '2.19.2', 'pandoc_types_version': '1.22.2.1'} To avoid this, call pandoc.configure(...) yourself beforehand. Alternatively, select manually your pandoc executable afterwards: >>> pandoc . configure ( reset = True ) >>> pandoc . configure ( read = True ) is None True >>> config [ \"auto\" ] = False >>> pandoc . configure ( ** config ) >>> pandoc . configure ( read = True ) # doctest: +ELLIPSIS, +NORMALIZE_WHITESPACE {'auto': False, 'path': ..., 'version': '2.19.2', 'pandoc_types_version': '1.22.2.1'} See also Refer to the Configuration section . pandoc.types \u00b6 AlignCenter Concrete data type Signature AlignCenter() AlignDefault Concrete data type Signature AlignDefault() AlignLeft Concrete data type Signature AlignLeft() AlignRight Concrete data type Signature AlignRight() Alignment Abstract data type Signature Alignment = AlignLeft() | AlignRight() | AlignCenter() | AlignDefault() See also AlignCenter , AlignDefault , AlignLeft , AlignRight . Attr Typedef Signature Attr = (Text, [Text], [(Text, Text)]) See also Text . AuthorInText Concrete data type Signature AuthorInText() Block Abstract data type Signature Block = Plain([Inline]) | Para([Inline]) | LineBlock([[Inline]]) | CodeBlock(Attr, Text) | RawBlock(Format, Text) | BlockQuote([Block]) | OrderedList(ListAttributes, [[Block]]) | BulletList([[Block]]) | DefinitionList([([Inline], [[Block]])]) | Header(Int, Attr, [Inline]) | HorizontalRule() | Table(Attr, Caption, [ColSpec], TableHead, [TableBody], TableFoot) | Div(Attr, [Block]) | Null() See also Attr , BlockQuote , BulletList , Caption , CodeBlock , ColSpec , DefinitionList , Div , Format , Header , HorizontalRule , Inline , Int , LineBlock , ListAttributes , Null , OrderedList , Para , Plain , RawBlock , Table , TableBody , TableFoot , TableHead , Text . BlockQuote Concrete data type Signature BlockQuote([Block]) See also Block . Bool Primitive type Signature bool BulletList Concrete data type Signature BulletList([[Block]]) See also Block . Caption Concrete data type Signature Caption(ShortCaption or None, [Block]) See also Block , ShortCaption . Cell Concrete data type Signature Cell(Attr, Alignment, RowSpan, ColSpan, [Block]) See also Alignment , Attr , Block , ColSpan , RowSpan . Citation Concrete data type Signature Citation(Text, [Inline], [Inline], CitationMode, Int, Int) See also CitationMode , Inline , Int , Text . CitationMode Abstract data type Signature CitationMode = AuthorInText() | SuppressAuthor() | NormalCitation() See also AuthorInText , NormalCitation , SuppressAuthor . Cite Concrete data type Signature Cite([Citation], [Inline]) See also Citation , Inline . Code Concrete data type Signature Code(Attr, Text) See also Attr , Text . CodeBlock Concrete data type Signature CodeBlock(Attr, Text) See also Attr , Text . ColSpan Concrete data type Signature ColSpan(Int) See also Int . ColSpec Typedef Signature ColSpec = (Alignment, ColWidth) See also Alignment , ColWidth . ColWidth Abstract data type Signature ColWidth = ColWidth_(Double) | ColWidthDefault() See also ColWidthDefault , ColWidth_ , Double . ColWidthDefault Concrete data type Signature ColWidthDefault() ColWidth_ Concrete data type Signature ColWidth_(Double) See also Double . Decimal Concrete data type Signature Decimal() DefaultDelim Concrete data type Signature DefaultDelim() DefaultStyle Concrete data type Signature DefaultStyle() DefinitionList Concrete data type Signature DefinitionList([([Inline], [[Block]])]) See also Block , Inline . DisplayMath Concrete data type Signature DisplayMath() Div Concrete data type Signature Div(Attr, [Block]) See also Attr , Block . Double Primitive type Signature float DoubleQuote Concrete data type Signature DoubleQuote() Emph Concrete data type Signature Emph([Inline]) See also Inline . Example Concrete data type Signature Example() Format Concrete data type Signature Format(Text) See also Text . Header Concrete data type Signature Header(Int, Attr, [Inline]) See also Attr , Inline , Int . HorizontalRule Concrete data type Signature HorizontalRule() Image Concrete data type Signature Image(Attr, [Inline], Target) See also Attr , Inline , Target . Inline Abstract data type Signature Inline = Str(Text) | Emph([Inline]) | Underline([Inline]) | Strong([Inline]) | Strikeout([Inline]) | Superscript([Inline]) | Subscript([Inline]) | SmallCaps([Inline]) | Quoted(QuoteType, [Inline]) | Cite([Citation], [Inline]) | Code(Attr, Text) | Space() | SoftBreak() | LineBreak() | Math(MathType, Text) | RawInline(Format, Text) | Link(Attr, [Inline], Target) | Image(Attr, [Inline], Target) | Note([Block]) | Span(Attr, [Inline]) See also Attr , Block , Citation , Cite , Code , Emph , Format , Image , LineBreak , Link , Math , MathType , Note , QuoteType , Quoted , RawInline , SmallCaps , SoftBreak , Space , Span , Str , Strikeout , Strong , Subscript , Superscript , Target , Text , Underline . InlineMath Concrete data type Signature InlineMath() Int Primitive type Signature int LineBlock Concrete data type Signature LineBlock([[Inline]]) See also Inline . LineBreak Concrete data type Signature LineBreak() Link Concrete data type Signature Link(Attr, [Inline], Target) See also Attr , Inline , Target . ListAttributes Typedef Signature ListAttributes = (Int, ListNumberStyle, ListNumberDelim) See also Int , ListNumberDelim , ListNumberStyle . ListNumberDelim Abstract data type Signature ListNumberDelim = DefaultDelim() | Period() | OneParen() | TwoParens() See also DefaultDelim , OneParen , Period , TwoParens . ListNumberStyle Abstract data type Signature ListNumberStyle = DefaultStyle() | Example() | Decimal() | LowerRoman() | UpperRoman() | LowerAlpha() | UpperAlpha() See also Decimal , DefaultStyle , Example , LowerAlpha , LowerRoman , UpperAlpha , UpperRoman . LowerAlpha Concrete data type Signature LowerAlpha() LowerRoman Concrete data type Signature LowerRoman() Math Concrete data type Signature Math(MathType, Text) See also MathType , Text . MathType Abstract data type Signature MathType = DisplayMath() | InlineMath() See also DisplayMath , InlineMath . Meta Concrete data type Signature Meta({Text: MetaValue}) See also MetaValue , Text . MetaBlocks Concrete data type Signature MetaBlocks([Block]) See also Block . MetaBool Concrete data type Signature MetaBool(Bool) See also Bool . MetaInlines Concrete data type Signature MetaInlines([Inline]) See also Inline . MetaList Concrete data type Signature MetaList([MetaValue]) See also MetaValue . MetaMap Concrete data type Signature MetaMap({Text: MetaValue}) See also MetaValue , Text . MetaString Concrete data type Signature MetaString(Text) See also Text . MetaValue Abstract data type Signature MetaValue = MetaMap({Text: MetaValue}) | MetaList([MetaValue]) | MetaBool(Bool) | MetaString(Text) | MetaInlines([Inline]) | MetaBlocks([Block]) See also Block , Bool , Inline , MetaBlocks , MetaBool , MetaInlines , MetaList , MetaMap , MetaString , Text . NormalCitation Concrete data type Signature NormalCitation() Note Concrete data type Signature Note([Block]) See also Block . Null Concrete data type Signature Null() OneParen Concrete data type Signature OneParen() OrderedList Concrete data type Signature OrderedList(ListAttributes, [[Block]]) See also Block , ListAttributes . Pandoc Concrete data type Signature Pandoc(Meta, [Block]) See also Block , Meta . Para Concrete data type Signature Para([Inline]) See also Inline . Period Concrete data type Signature Period() Plain Concrete data type Signature Plain([Inline]) See also Inline . QuoteType Abstract data type Signature QuoteType = SingleQuote() | DoubleQuote() See also DoubleQuote , SingleQuote . Quoted Concrete data type Signature Quoted(QuoteType, [Inline]) See also Inline , QuoteType . RawBlock Concrete data type Signature RawBlock(Format, Text) See also Format , Text . RawInline Concrete data type Signature RawInline(Format, Text) See also Format , Text . Row Concrete data type Signature Row(Attr, [Cell]) See also Attr , Cell . RowHeadColumns Concrete data type Signature RowHeadColumns(Int) See also Int . RowSpan Concrete data type Signature RowSpan(Int) See also Int . ShortCaption Typedef Signature ShortCaption = [Inline] See also Inline . SingleQuote Concrete data type Signature SingleQuote() SmallCaps Concrete data type Signature SmallCaps([Inline]) See also Inline . SoftBreak Concrete data type Signature SoftBreak() Space Concrete data type Signature Space() Span Concrete data type Signature Span(Attr, [Inline]) See also Attr , Inline . Str Concrete data type Signature Str(Text) See also Text . Strikeout Concrete data type Signature Strikeout([Inline]) See also Inline . String Primitive type Signature str Strong Concrete data type Signature Strong([Inline]) See also Inline . Subscript Concrete data type Signature Subscript([Inline]) See also Inline . Superscript Concrete data type Signature Superscript([Inline]) See also Inline . SuppressAuthor Concrete data type Signature SuppressAuthor() Table Concrete data type Signature Table(Attr, Caption, [ColSpec], TableHead, [TableBody], TableFoot) See also Attr , Caption , ColSpec , TableBody , TableFoot , TableHead . TableBody Concrete data type Signature TableBody(Attr, RowHeadColumns, [Row], [Row]) See also Attr , Row , RowHeadColumns . TableFoot Concrete data type Signature TableFoot(Attr, [Row]) See also Attr , Row . TableHead Concrete data type Signature TableHead(Attr, [Row]) See also Attr , Row . Target Typedef Signature Target = (Text, Text) See also Text . Text Primitive type Signature str TwoParens Concrete data type Signature TwoParens() Underline Concrete data type Signature Underline([Inline]) See also Inline . UpperAlpha Concrete data type Signature UpperAlpha() UpperRoman Concrete data type Signature UpperRoman() refer to Pandoc's heuristics for the gory details of this inference. \u21a9 \u21a9","title":"API reference"},{"location":"api/#api-reference","text":"import pandoc from pandoc.types import *","title":"API Reference"},{"location":"api/#pandoc","text":"read(source=None, file=None, format=None, options=None) Read a source document. The source document must be specified by either source or file . Implicitly, the document format is inferred from the filename extension when possible 1 , otherwise the markdown format is assumed by default; the input format can also be specified explicitly. Extra options can be passed to the pandoc command-line tool.","title":"pandoc"},{"location":"api/#pandoctypes","text":"AlignCenter Concrete data type","title":"pandoc.types"},{"location":"changelog/","text":"Version 2.3 (11/23/2022) \u00b6 If the version of Pandoc is not supported, dont throw an error but warn, and proceed as if it was the latest supported version (with undefined results if the two document models differ). Add support for Pandoc 2.19, 2.19.1 and 2.19.2. Version 2.2 (04/20/2022) \u00b6 Add support for Pandoc 2.18.","title":"Changelog"},{"location":"changelog/#version-23-11232022","text":"If the version of Pandoc is not supported, dont throw an error but warn, and proceed as if it was the latest supported version (with undefined results if the two document models differ). Add support for Pandoc 2.19, 2.19.1 and 2.19.2.","title":"Version 2.3 (11/23/2022)"},{"location":"changelog/#version-22-04202022","text":"Add support for Pandoc 2.18.","title":"Version 2.2 (04/20/2022)"},{"location":"cli/","text":"Command-Line Interface \u00b6 The Pandoc Python library includes a command-line tool to convert pandoc documents to their python representation. It is invoked with python -m pandoc followed by the read or write subcommands. You may use it to visualize the structure of markdown snippets: simply pipe them into the read subcommand standard input: $ echo \"Hello world!\" | python -m pandoc read Pandoc ( Meta ({}) , [ Para ([ Str ( 'Hello' ) , Space () , Str ( 'world!' )])]) Alternatively, you can use markdown files as inputs: $ echo \"Hello world!\" > hello.md $ cat hello.md Hello world! $ python -m pandoc read hello.md Pandoc ( Meta ({}) , [ Para ([ Str ( 'Hello' ) , Space () , Str ( 'world!' )])]) Note that the output of python -m pandoc read is always compact: it holds on a single line. Consider the README.md file of this project for example $ URL = \"https://raw.githubusercontent.com/boisgera/pandoc/master/README.md\" $ curl $URL --output README.md $ cat README.md | head -n 10 Pandoc ( Python Library ) ================================================================================ [ ! [ build ]( https://github.com/boisgera/pandoc/actions/workflows/build.yml/badge.svg )]( https://github.com/boisgera/pandoc/actions/workflows/build.yml ) [ ! [ Downloads ]( https://pepy.tech/badge/pandoc )]( https://pepy.tech/project/pandoc ) [ ! [ Gitter chat ]( https://badges.gitter.im/boisgera/python-pandoc.svg )]( https://gitter.im/python-pandoc/community# ) *This README is about the 2 .x branch of the library ( alpha stage! ) . Only the 1 .x branch is available on PyPi at the moment.* The output of the read subcommand is a very long line: $ python -m pandoc read README.md Pandoc(Meta({}), [Header(1, ('pandoc-python-library', [], []), [Str('Pandoc'), Space(), Str('(Python'), Space(), Str('Library)')]), Para([Link(('', [], []), [Image(('', [], []), [Str('build')], ('https://github.com/boisgera/pandoc/actions/workflows/build.yml/badge.svg', ''))], ('https://github.com/boisgera/pandoc/actions/workflows/build.yml', '')), SoftBreak(), Link(('', [], []), [Image(('', [], []), [Str('Downloads')], ('https://pepy.tech/badge/pandoc', ''))], ('https://pepy.tech/project/pandoc', '')), SoftBreak(), Link(('', [], []), [Image(('', [], []), [Str('Gitter'), Space(), Str('chat')], ('https://badges.gitter.im/boisgera/python-pandoc.svg', ''))], ('https://gitter.im/python-pandoc/community#', ''))]), Para([Emph([Str('This'), Space(), Str('README'), Space(), Str('is'), Space(), Str('about'), Space(), Str('the'), Space(), Str('2.x'), Space(), Str('branch'), Space(), Str('of'), Space(), Str('the'), Space(), Str('library'), Space(), Str('(alpha'), Space(), Str('stage!).'), Space(), Str('Only'), Space(), Str('the'), Space(), Str('1.x'), Space(), Str('branch'), Space(), Str('is'), Space(), Str('available'), Space(), Str('on'), Space(), Str('PyPi'), Space(), Str('at'), Space(), Str('the'), Space(), Str('moment.')])]), Header(2, ('getting-started', [], []), [Str('Getting'), Space(), Str('started')]), Para([Str('Install'), Space(), Str('the'), Space(), Str('latest'), Space(), Str('version'), Space(), Str('with:')]), CodeBlock(('', [], []), '$ pip install --upgrade git+https://github.com/boisgera/pandoc.git'), Para([Str('The'), Space(), Link(('', [], []), [Str('Pandoc')], ('http://pandoc.org/', '')), Space(), Str('command-line'), Space(), Str('tool'), Space(), Str('is'), Space(), Str('a'), Space(), Str('also'), Space(), Str('required'), Space(), Str('dependency'), Space(), Str(';'), SoftBreak(), Str('you'), Space(), Str('may'), Space(), Str('install'), Space(), Str('it'), Space(), Str('with'), Space(), Str(':')]), CodeBlock(('', [], []), '$ conda install -c conda-forge pandoc'), Header(2, ('overview', [], []), [Str('Overview')]), Para([Str('This'), Space(), Str('project'), Space(), Str('brings'), Space(), Link(('', [], []), [Str('Pandoc')], ('http://pandoc.org/', '')), Str('\u2019s'), Space(), Str('data'), Space(), Str('model'), Space(), Str('for'), Space(), Str('markdown'), Space(), Str('documents'), Space(), Str('to'), Space(), Str('Python:')]), CodeBlock(('', [], []), '$ echo \"Hello world!\" | python -m pandoc read \\nPandoc(Meta({}), [Para([Str(\\'Hello\\'), Space(), Str(\\'world!\\')])])'), Para([Str('It'), Space(), Str('can'), Space(), Str('be'), Space(), Str('used'), Space(), Str('to'), Space(), Str('analyze,'), Space(), Str('create'), Space(), Str('and'), Space(), Str('transform'), Space(), Str('documents,'), Space(), Str('in'), Space(), Str('Python'), Space(), Str(':')]), CodeBlock(('', [], []), '>>> import pandoc\\n>>> text = \"Hello world!\"\\n>>> doc = pandoc.read(text)\\n>>> doc\\nPandoc(Meta({}), [Para([Str(\\'Hello\\'), Space(), Str(\\'world!\\')])])\\n\\n>>> paragraph = doc[1][0]\\n>>> paragraph\\nPara([Str(\\'Hello\\'), Space(), Str(\\'world!\\')])\\n>>> from pandoc.types import Str\\n>>> paragraph[0][2] = Str(\\'Python!\\')\\n>>> text = pandoc.write(doc)\\n>>> print(text)\\nHello Python!'), Para([Link(('', [], []), [Str('Pandoc')], ('http://pandoc.org/', '')), Space(), Str('is'), Space(), Str('the'), Space(), Str('general'), Space(), Str('markup'), Space(), Str('converter'), Space(), Str('(and'), Space(), Str('Haskell'), Space(), Str('library)'), Space(), Str('written'), Space(), Str('by'), Space(), Link(('', [], []), [Str('John'), Space(), Str('MacFarlane')], ('http://johnmacfarlane.net/', '')), Str('.')])]) If this is not what you want, remember that this output is valid Python code that any code formatter can handle. For example, if the black formatter is available, you can pretty-print the output with: $ python -m pandoc read README.md | black -q - Pandoc( Meta({}), [ Header( 1, (\"pandoc-python-library\", [], []), [Str(\"Pandoc\"), Space(), Str(\"(Python\"), Space(), Str(\"Library)\")], ), Para( [ Link( (\"\", [], []), [ Image( (\"\", [], []), [Str(\"build\")], ( \"https://github.com/boisgera/pandoc/actions/workflows/build.yml/badge.svg\", \"\", ), ) ], ( \"https://github.com/boisgera/pandoc/actions/workflows/build.yml\", \"\", ), ), SoftBreak(), Link( (\"\", [], []), [ Image( (\"\", [], []), [Str(\"Downloads\")], (\"https://pepy.tech/badge/pandoc\", \"\"), ) ], (\"https://pepy.tech/project/pandoc\", \"\"), ), SoftBreak(), Link( (\"\", [], []), [ Image( (\"\", [], []), [Str(\"Gitter\"), Space(), Str(\"chat\")], (\"https://badges.gitter.im/boisgera/python-pandoc.svg\", \"\"), ) ], (\"https://gitter.im/python-pandoc/community#\", \"\"), ), ] ), Para( [ Emph( [ Str(\"This\"), Space(), Str(\"README\"), Space(), Str(\"is\"), Space(), Str(\"about\"), Space(), Str(\"the\"), Space(), Str(\"2.x\"), Space(), Str(\"branch\"), Space(), Str(\"of\"), Space(), Str(\"the\"), Space(), Str(\"library\"), Space(), Str(\"(alpha\"), Space(), Str(\"stage!).\"), Space(), Str(\"Only\"), Space(), Str(\"the\"), Space(), Str(\"1.x\"), Space(), Str(\"branch\"), Space(), Str(\"is\"), Space(), Str(\"available\"), Space(), Str(\"on\"), Space(), Str(\"PyPi\"), Space(), Str(\"at\"), Space(), Str(\"the\"), Space(), Str(\"moment.\"), ] ) ] ), Header( 2, (\"getting-started\", [], []), [Str(\"Getting\"), Space(), Str(\"started\")] ), Para( [ Str(\"Install\"), Space(), Str(\"the\"), Space(), Str(\"latest\"), Space(), Str(\"version\"), Space(), Str(\"with:\"), ] ), CodeBlock( (\"\", [], []), \"$ pip install --upgrade git+https://github.com/boisgera/pandoc.git\", ), Para( [ Str(\"The\"), Space(), Link((\"\", [], []), [Str(\"Pandoc\")], (\"http://pandoc.org/\", \"\")), Space(), Str(\"command-line\"), Space(), Str(\"tool\"), Space(), Str(\"is\"), Space(), Str(\"a\"), Space(), Str(\"also\"), Space(), Str(\"required\"), Space(), Str(\"dependency\"), Space(), Str(\";\"), SoftBreak(), Str(\"you\"), Space(), Str(\"may\"), Space(), Str(\"install\"), Space(), Str(\"it\"), Space(), Str(\"with\"), Space(), Str(\":\"), ] ), CodeBlock((\"\", [], []), \"$ conda install -c conda-forge pandoc\"), Header(2, (\"overview\", [], []), [Str(\"Overview\")]), Para( [ Str(\"This\"), Space(), Str(\"project\"), Space(), Str(\"brings\"), Space(), Link((\"\", [], []), [Str(\"Pandoc\")], (\"http://pandoc.org/\", \"\")), Str(\"\u2019s\"), Space(), Str(\"data\"), Space(), Str(\"model\"), Space(), Str(\"for\"), Space(), Str(\"markdown\"), Space(), Str(\"documents\"), Space(), Str(\"to\"), Space(), Str(\"Python:\"), ] ), CodeBlock( (\"\", [], []), \"$ echo \\\"Hello world!\\\" | python -m pandoc read \\nPandoc(Meta({}), [Para([Str('Hello'), Space(), Str('world!')])])\", ), Para( [ Str(\"It\"), Space(), Str(\"can\"), Space(), Str(\"be\"), Space(), Str(\"used\"), Space(), Str(\"to\"), Space(), Str(\"analyze,\"), Space(), Str(\"create\"), Space(), Str(\"and\"), Space(), Str(\"transform\"), Space(), Str(\"documents,\"), Space(), Str(\"in\"), Space(), Str(\"Python\"), Space(), Str(\":\"), ] ), CodeBlock( (\"\", [], []), \">>> import pandoc\\n>>> text = \\\"Hello world!\\\"\\n>>> doc = pandoc.read(text)\\n>>> doc\\nPandoc(Meta({}), [Para([Str('Hello'), Space(), Str('world!')])])\\n\\n>>> paragraph = doc[1][0]\\n>>> paragraph\\nPara([Str('Hello'), Space(), Str('world!')])\\n>>> from pandoc.types import Str\\n>>> paragraph[0][2] = Str('Python!')\\n>>> text = pandoc.write(doc)\\n>>> print(text)\\nHello Python!\", ), Para( [ Link((\"\", [], []), [Str(\"Pandoc\")], (\"http://pandoc.org/\", \"\")), Space(), Str(\"is\"), Space(), Str(\"the\"), Space(), Str(\"general\"), Space(), Str(\"markup\"), Space(), Str(\"converter\"), Space(), Str(\"(and\"), Space(), Str(\"Haskell\"), Space(), Str(\"library)\"), Space(), Str(\"written\"), Space(), Str(\"by\"), Space(), Link( (\"\", [], []), [Str(\"John\"), Space(), Str(\"MacFarlane\")], (\"http://johnmacfarlane.net/\", \"\"), ), Str(\".\"), ] ), ], )","title":"Command-line interface"},{"location":"cli/#command-line-interface","text":"The Pandoc Python library includes a command-line tool to convert pandoc documents to their python representation. It is invoked with python -m pandoc followed by the read or write subcommands. You may use it to visualize the structure of markdown snippets: simply pipe them into the read subcommand standard input: $ echo \"Hello world!\" | python -m pandoc read Pandoc ( Meta ({}) , [ Para ([ Str ( 'Hello' ) , Space () , Str ( 'world!' )])]) Alternatively, you can use markdown files as inputs: $ echo \"Hello world!\" > hello.md $ cat hello.md Hello world! $ python -m pandoc read hello.md Pandoc ( Meta ({}) , [ Para ([ Str ( 'Hello' ) , Space () , Str ( 'world!' )])]) Note that the output of python -m pandoc read is always compact: it holds on a single line. Consider the README.md file of this project for example $ URL = \"https://raw.githubusercontent.com/boisgera/pandoc/master/README.md\" $ curl $URL --output README.md $ cat README.md | head -n 10 Pandoc ( Python Library ) ================================================================================ [ ! [ build ]( https://github.com/boisgera/pandoc/actions/workflows/build.yml/badge.svg )]( https://github.com/boisgera/pandoc/actions/workflows/build.yml ) [ ! [ Downloads ]( https://pepy.tech/badge/pandoc )]( https://pepy.tech/project/pandoc ) [ ! [ Gitter chat ]( https://badges.gitter.im/boisgera/python-pandoc.svg )]( https://gitter.im/python-pandoc/community# ) *This README is about the 2 .x branch of the library ( alpha stage! ) . Only the 1 .x branch is available on PyPi at the moment.* The output of the read subcommand is a very long line: $ python -m pandoc read README.md Pandoc(Meta({}), [Header(1, ('pandoc-python-library', [], []), [Str('Pandoc'), Space(), Str('(Python'), Space(), Str('Library)')]), Para([Link(('', [], []), [Image(('', [], []), [Str('build')], ('https://github.com/boisgera/pandoc/actions/workflows/build.yml/badge.svg', ''))], ('https://github.com/boisgera/pandoc/actions/workflows/build.yml', '')), SoftBreak(), Link(('', [], []), [Image(('', [], []), [Str('Downloads')], ('https://pepy.tech/badge/pandoc', ''))], ('https://pepy.tech/project/pandoc', '')), SoftBreak(), Link(('', [], []), [Image(('', [], []), [Str('Gitter'), Space(), Str('chat')], ('https://badges.gitter.im/boisgera/python-pandoc.svg', ''))], ('https://gitter.im/python-pandoc/community#', ''))]), Para([Emph([Str('This'), Space(), Str('README'), Space(), Str('is'), Space(), Str('about'), Space(), Str('the'), Space(), Str('2.x'), Space(), Str('branch'), Space(), Str('of'), Space(), Str('the'), Space(), Str('library'), Space(), Str('(alpha'), Space(), Str('stage!).'), Space(), Str('Only'), Space(), Str('the'), Space(), Str('1.x'), Space(), Str('branch'), Space(), Str('is'), Space(), Str('available'), Space(), Str('on'), Space(), Str('PyPi'), Space(), Str('at'), Space(), Str('the'), Space(), Str('moment.')])]), Header(2, ('getting-started', [], []), [Str('Getting'), Space(), Str('started')]), Para([Str('Install'), Space(), Str('the'), Space(), Str('latest'), Space(), Str('version'), Space(), Str('with:')]), CodeBlock(('', [], []), '$ pip install --upgrade git+https://github.com/boisgera/pandoc.git'), Para([Str('The'), Space(), Link(('', [], []), [Str('Pandoc')], ('http://pandoc.org/', '')), Space(), Str('command-line'), Space(), Str('tool'), Space(), Str('is'), Space(), Str('a'), Space(), Str('also'), Space(), Str('required'), Space(), Str('dependency'), Space(), Str(';'), SoftBreak(), Str('you'), Space(), Str('may'), Space(), Str('install'), Space(), Str('it'), Space(), Str('with'), Space(), Str(':')]), CodeBlock(('', [], []), '$ conda install -c conda-forge pandoc'), Header(2, ('overview', [], []), [Str('Overview')]), Para([Str('This'), Space(), Str('project'), Space(), Str('brings'), Space(), Link(('', [], []), [Str('Pandoc')], ('http://pandoc.org/', '')), Str('\u2019s'), Space(), Str('data'), Space(), Str('model'), Space(), Str('for'), Space(), Str('markdown'), Space(), Str('documents'), Space(), Str('to'), Space(), Str('Python:')]), CodeBlock(('', [], []), '$ echo \"Hello world!\" | python -m pandoc read \\nPandoc(Meta({}), [Para([Str(\\'Hello\\'), Space(), Str(\\'world!\\')])])'), Para([Str('It'), Space(), Str('can'), Space(), Str('be'), Space(), Str('used'), Space(), Str('to'), Space(), Str('analyze,'), Space(), Str('create'), Space(), Str('and'), Space(), Str('transform'), Space(), Str('documents,'), Space(), Str('in'), Space(), Str('Python'), Space(), Str(':')]), CodeBlock(('', [], []), '>>> import pandoc\\n>>> text = \"Hello world!\"\\n>>> doc = pandoc.read(text)\\n>>> doc\\nPandoc(Meta({}), [Para([Str(\\'Hello\\'), Space(), Str(\\'world!\\')])])\\n\\n>>> paragraph = doc[1][0]\\n>>> paragraph\\nPara([Str(\\'Hello\\'), Space(), Str(\\'world!\\')])\\n>>> from pandoc.types import Str\\n>>> paragraph[0][2] = Str(\\'Python!\\')\\n>>> text = pandoc.write(doc)\\n>>> print(text)\\nHello Python!'), Para([Link(('', [], []), [Str('Pandoc')], ('http://pandoc.org/', '')), Space(), Str('is'), Space(), Str('the'), Space(), Str('general'), Space(), Str('markup'), Space(), Str('converter'), Space(), Str('(and'), Space(), Str('Haskell'), Space(), Str('library)'), Space(), Str('written'), Space(), Str('by'), Space(), Link(('', [], []), [Str('John'), Space(), Str('MacFarlane')], ('http://johnmacfarlane.net/', '')), Str('.')])]) If this is not what you want, remember that this output is valid Python code that any code formatter can handle. For example, if the black formatter is available, you can pretty-print the output with: $ python -m pandoc read README.md | black -q - Pandoc( Meta({}), [ Header( 1, (\"pandoc-python-library\", [], []), [Str(\"Pandoc\"), Space(), Str(\"(Python\"), Space(), Str(\"Library)\")], ), Para( [ Link( (\"\", [], []), [ Image( (\"\", [], []), [Str(\"build\")], ( \"https://github.com/boisgera/pandoc/actions/workflows/build.yml/badge.svg\", \"\", ), ) ], ( \"https://github.com/boisgera/pandoc/actions/workflows/build.yml\", \"\", ), ), SoftBreak(), Link( (\"\", [], []), [ Image( (\"\", [], []), [Str(\"Downloads\")], (\"https://pepy.tech/badge/pandoc\", \"\"), ) ], (\"https://pepy.tech/project/pandoc\", \"\"), ), SoftBreak(), Link( (\"\", [], []), [ Image( (\"\", [], []), [Str(\"Gitter\"), Space(), Str(\"chat\")], (\"https://badges.gitter.im/boisgera/python-pandoc.svg\", \"\"), ) ], (\"https://gitter.im/python-pandoc/community#\", \"\"), ), ] ), Para( [ Emph( [ Str(\"This\"), Space(), Str(\"README\"), Space(), Str(\"is\"), Space(), Str(\"about\"), Space(), Str(\"the\"), Space(), Str(\"2.x\"), Space(), Str(\"branch\"), Space(), Str(\"of\"), Space(), Str(\"the\"), Space(), Str(\"library\"), Space(), Str(\"(alpha\"), Space(), Str(\"stage!).\"), Space(), Str(\"Only\"), Space(), Str(\"the\"), Space(), Str(\"1.x\"), Space(), Str(\"branch\"), Space(), Str(\"is\"), Space(), Str(\"available\"), Space(), Str(\"on\"), Space(), Str(\"PyPi\"), Space(), Str(\"at\"), Space(), Str(\"the\"), Space(), Str(\"moment.\"), ] ) ] ), Header( 2, (\"getting-started\", [], []), [Str(\"Getting\"), Space(), Str(\"started\")] ), Para( [ Str(\"Install\"), Space(), Str(\"the\"), Space(), Str(\"latest\"), Space(), Str(\"version\"), Space(), Str(\"with:\"), ] ), CodeBlock( (\"\", [], []), \"$ pip install --upgrade git+https://github.com/boisgera/pandoc.git\", ), Para( [ Str(\"The\"), Space(), Link((\"\", [], []), [Str(\"Pandoc\")], (\"http://pandoc.org/\", \"\")), Space(), Str(\"command-line\"), Space(), Str(\"tool\"), Space(), Str(\"is\"), Space(), Str(\"a\"), Space(), Str(\"also\"), Space(), Str(\"required\"), Space(), Str(\"dependency\"), Space(), Str(\";\"), SoftBreak(), Str(\"you\"), Space(), Str(\"may\"), Space(), Str(\"install\"), Space(), Str(\"it\"), Space(), Str(\"with\"), Space(), Str(\":\"), ] ), CodeBlock((\"\", [], []), \"$ conda install -c conda-forge pandoc\"), Header(2, (\"overview\", [], []), [Str(\"Overview\")]), Para( [ Str(\"This\"), Space(), Str(\"project\"), Space(), Str(\"brings\"), Space(), Link((\"\", [], []), [Str(\"Pandoc\")], (\"http://pandoc.org/\", \"\")), Str(\"\u2019s\"), Space(), Str(\"data\"), Space(), Str(\"model\"), Space(), Str(\"for\"), Space(), Str(\"markdown\"), Space(), Str(\"documents\"), Space(), Str(\"to\"), Space(), Str(\"Python:\"), ] ), CodeBlock( (\"\", [], []), \"$ echo \\\"Hello world!\\\" | python -m pandoc read \\nPandoc(Meta({}), [Para([Str('Hello'), Space(), Str('world!')])])\", ), Para( [ Str(\"It\"), Space(), Str(\"can\"), Space(), Str(\"be\"), Space(), Str(\"used\"), Space(), Str(\"to\"), Space(), Str(\"analyze,\"), Space(), Str(\"create\"), Space(), Str(\"and\"), Space(), Str(\"transform\"), Space(), Str(\"documents,\"), Space(), Str(\"in\"), Space(), Str(\"Python\"), Space(), Str(\":\"), ] ), CodeBlock( (\"\", [], []), \">>> import pandoc\\n>>> text = \\\"Hello world!\\\"\\n>>> doc = pandoc.read(text)\\n>>> doc\\nPandoc(Meta({}), [Para([Str('Hello'), Space(), Str('world!')])])\\n\\n>>> paragraph = doc[1][0]\\n>>> paragraph\\nPara([Str('Hello'), Space(), Str('world!')])\\n>>> from pandoc.types import Str\\n>>> paragraph[0][2] = Str('Python!')\\n>>> text = pandoc.write(doc)\\n>>> print(text)\\nHello Python!\", ), Para( [ Link((\"\", [], []), [Str(\"Pandoc\")], (\"http://pandoc.org/\", \"\")), Space(), Str(\"is\"), Space(), Str(\"the\"), Space(), Str(\"general\"), Space(), Str(\"markup\"), Space(), Str(\"converter\"), Space(), Str(\"(and\"), Space(), Str(\"Haskell\"), Space(), Str(\"library)\"), Space(), Str(\"written\"), Space(), Str(\"by\"), Space(), Link( (\"\", [], []), [Str(\"John\"), Space(), Str(\"MacFarlane\")], (\"http://johnmacfarlane.net/\", \"\"), ), Str(\".\"), ] ), ], )","title":"Command-Line Interface"},{"location":"configuration/","text":"Configuration \u00b6 import pandoc Introduction \u00b6 The good news are that you generally don't need to configure anything: when you use the pandoc Python library, it does inspect your system to find the available pandoc command-line tool and configures itself accordingly. Most of the time, this is what you want. However, if you need more control on this configuration step, you can import pandoc and call configure before you do anything else with the library: import pandoc pandoc.configure(...) If you do this, the implicit configuration does not take place; it is triggered only when no configuration is specified when you import pandoc.types or you call pandoc.read or pandoc.write . Options \u00b6 To have the library find a pandoc executable in your path, and configure itself accordingly, enable the auto option pandoc.configure(auto=True) This is the method used by the implicit configuration. If instead you want to specify manually the pandoc executable, use the path argument, for example: pandoc.configure(path='/usr/bin/pandoc') Some features 1 of the Python pandoc library do not require the pandoc executable, but in this case we still need to know what version of pandoc you target, so specify for example: pandoc.configure(version=' 2.18') Actually, the exact version of pandoc is not even required. Instead what matters is the version of the document model that you intend to use, or equivalently, the version of the pandoc-types Haskell package used by the pandoc executable. Accordingly, you may configure pandoc with the pandoc_types_version argument: pandoc.configure(pandoc_types_version='1.22.2') Extra Arguments \u00b6 To get a copy of the configuration (or None if the library is not configured yet), enable the read option. The call pandoc.configure(read=True) does not change the current configuration but returns a dictionary whose keys are auto , path , version and pandoc_types_version , such as >>> pandoc . configure ( read = True ) # doctest: +ELLIPSIS, +NORMALIZE_WHITESPACE {'auto': True, 'path': ..., 'version': '2.19.2', 'pandoc_types_version': '1.22.2.1'} The read option may be combined with other arguments, for example config = pandoc.configure(auto=True, read=True) This is actually a good way to know where the pandoc executable has been found, what is its version and the corresponding version of pandoc-types . When it is needed, it is also possible to restore the unconfigured state: pandoc.configure(reset=True) typically conversion between json and Python object representations of documents and analysis or transformations of documents as Python objects. As soon as you use convert to or from any other format, markdown for example, you need a pandoc executable. \u21a9","title":"Configuration"},{"location":"configuration/#configuration","text":"import pandoc","title":"Configuration"},{"location":"configuration/#introduction","text":"The good news are that you generally don't need to configure anything: when you use the pandoc Python library, it does inspect your system to find the available pandoc command-line tool and configures itself accordingly. Most of the time, this is what you want. However, if you need more control on this configuration step, you can import pandoc and call configure before you do anything else with the library: import pandoc pandoc.configure(...) If you do this, the implicit configuration does not take place; it is triggered only when no configuration is specified when you import pandoc.types or you call pandoc.read or pandoc.write .","title":"Introduction"},{"location":"configuration/#options","text":"To have the library find a pandoc executable in your path, and configure itself accordingly, enable the auto option pandoc.configure(auto=True) This is the method used by the implicit configuration. If instead you want to specify manually the pandoc executable, use the path argument, for example: pandoc.configure(path='/usr/bin/pandoc') Some features 1 of the Python pandoc library do not require the pandoc executable, but in this case we still need to know what version of pandoc you target, so specify for example: pandoc.configure(version=' 2.18') Actually, the exact version of pandoc is not even required. Instead what matters is the version of the document model that you intend to use, or equivalently, the version of the pandoc-types Haskell package used by the pandoc executable. Accordingly, you may configure pandoc with the pandoc_types_version argument: pandoc.configure(pandoc_types_version='1.22.2')","title":"Options"},{"location":"configuration/#extra-arguments","text":"To get a copy of the configuration (or None if the library is not configured yet), enable the read option. The call pandoc.configure(read=True) does not change the current configuration but returns a dictionary whose keys are auto , path , version and pandoc_types_version , such as >>> pandoc . configure ( read = True ) # doctest: +ELLIPSIS, +NORMALIZE_WHITESPACE {'auto': True, 'path': ..., 'version': '2.19.2', 'pandoc_types_version': '1.22.2.1'} The read option may be combined with other arguments, for example config = pandoc.configure(auto=True, read=True) This is actually a good way to know where the pandoc executable has been found, what is its version and the corresponding version of pandoc-types . When it is needed, it is also possible to restore the unconfigured state: pandoc.configure(reset=True) typically conversion between json and Python object representations of documents and analysis or transformations of documents as Python objects. As soon as you use convert to or from any other format, markdown for example, you need a pandoc executable. \u21a9","title":"Extra Arguments"},{"location":"cookbook/","text":"Cookbook \u00b6 # Python Standard Library import builtins import copy # Pandoc import pandoc from pandoc.types import * In this cookbook, we will use as reference the very simple \"Hello world!\" document HELLOWORLD_DOC = pandoc . read ( \"Hello world!\" ) and the longer and more complex commonmark spec: from urllib.request import urlopen PATH = \"raw.githubusercontent.com/commonmark/commonmark-spec\" HASH = \"499ebbad90163881f51498c4c620652d0c66fb2e\" # pinned version URL = f \"https:// { PATH } / { HASH } /spec.txt\" COMMONMARK_SPEC = urlopen ( URL ) . read () . decode ( \"utf-8\" ) >>> print ( COMMONMARK_SPEC [: 583 ]) # excerpt --- title: CommonMark Spec author: John MacFarlane version: '0.30' date: '2021-06-19' license: '[CC-BY-SA 4.0](http://creativecommons.org/licenses/by-sa/4.0/)' ... <BLANKLINE> # Introduction <BLANKLINE> ## What is Markdown? <BLANKLINE> Markdown is a plain text format for writing structured documents, based on conventions for indicating formatting in email and usenet posts. It was developed by John Gruber (with help from Aaron Swartz) and released in 2004 in the form of a [syntax description](http://daringfireball.net/projects/markdown/syntax) and a Perl script (`Markdown.pl`) for converting Markdown to HTML. COMMONMARK_DOC = pandoc . read ( COMMONMARK_SPEC ) Access \u00b6 When we know the location and type of some information in a document, we can use either random access or pattern matching to retrieve it. Random access \u00b6 A date is often included as inline text into a document's metadata; in this case, we can access it and return it as a markdown string: def get_date ( doc ): meta = doc [ 0 ] # doc: Pandoc(Meta, [Block]) meta_dict = meta [ 0 ] # meta: Meta({Text: MetaValue}) date = meta_dict [ \"date\" ] date_inlines = date [ 0 ] # date: MetaInlines([Inline]) return pandoc . write ( date_inlines ) . strip () The commonmark specification includes such a date: >>> print ( COMMONMARK_SPEC ) # doctest: +ELLIPSIS --- title: CommonMark Spec author: John MacFarlane version: '0.30' date: '2021-06-19' license: '[CC-BY-SA 4.0](http://creativecommons.org/licenses/by-sa/4.0/)' ... and therefore >>> get_date ( COMMONMARK_DOC ) '2021-06-19' After the metadata, the document starts with a header. To get its title, we can use def get_first_header_title ( doc ): blocks = doc [ 1 ] # doc: Pandoc(Meta, [Block]) header = blocks [ 0 ] title_inlines = header [ 2 ] # header: Header(Int, Attr, [Inline]) return pandoc . write ( title_inlines ) . strip () >>> get_first_header_title ( COMMONMARK_DOC ) 'Introduction' Structural checks \u00b6 The functions get_date and get_first_header_title may fail if they are use on a document which doesn't have the expected structure. For example, for the \"Hello world!\" document >>> HELLOWORLD_DOC Pandoc(Meta({}), [Para([Str('Hello'), Space(), Str('world!')])]) which has no date metadata field, and doesn't start with a header, we end up with >>> get_date ( HELLOWORLD_DOC ) Traceback (most recent call last): ... KeyError : 'date' >>> get_first_header_title ( HELLOWORLD_DOC ) Traceback (most recent call last): ... IndexError : list index out of range A more robust version of these functions may return None when the document does not have the expected structure: def get_date ( doc ): meta = doc [ 0 ] # doc: Pandoc(Meta, [Block]) meta_dict = meta [ 0 ] # meta: Meta({Text: MetaValue}) date = meta_dict . get ( \"date\" ) if isinstance ( date , MetaInlines ): date_inlines = date [ 0 ] # date: MetaInlines([Inline]) return pandoc . write ( date_inlines ) . strip () >>> get_date ( COMMONMARK_DOC ) '2021-06-19' >>> get_date ( HELLOWORLD_DOC ) def get_first_header_title ( doc ): blocks = doc [ 1 ] # doc: Pandoc(Meta, [Block]) if blocks and isinstance ( blocks [ 0 ], Header ): header = blocks [ 0 ] title_inlines = header [ 2 ] # header: Header(Int, Attr, [Inline]) return pandoc . write ( title_inlines ) . strip () >>> get_first_header_title ( COMMONMARK_DOC ) 'Introduction' >>> get_first_header_title ( HELLOWORLD_DOC ) Pattern matching \u00b6 With Python 3.10 or later, pattern matching can be used to combine random access and structural checks. The following implementation of get_date def get_date ( doc ): match doc : case Pandoc ( Meta ({ \"date\" : MetaInlines ( date_inlines )}), _ ): return pandoc . write ( date_inlines ) . strip () and the previous one have identical behaviors: >>> get_date ( COMMONMARK_DOC ) '2021-06-19' >>> get_date ( HELLOWORLD_DOC ) The behavior of the following get_first_header_title function def get_first_header_title ( doc ): match doc : case Pandoc ( _ , [ Header ( _ , _ , header_inlines ), * _ ]): return pandoc . write ( header_inlines ) . strip () is also unchanged: >>> get_first_header_title ( COMMONMARK_DOC ) 'Introduction' >>> get_first_header_title ( HELLOWORLD_DOC ) Find \u00b6 When the items we are searching for are not in a known place in the document, we may use the tree iterator provided by pandoc.iter and a variety of filtering methods to fetch them. Here we focus on comprehensions first and then introduce a higher-level helper. Filter \u00b6 The pattern to use is [elt for elt in pandoc.iter(root) if condition_is_met(elt)] . With it, we can build a simple table of contents of the document: def table_of_contents ( doc ): headers = [ elt for elt in pandoc . iter ( doc ) if isinstance ( elt , Header )] toc_lines = [] for header in headers : level , _ , inlines = header [:] # header: Header(Int, Attr, [Inline]) header_title = pandoc . write ( inlines ) . strip () indent = ( level - 1 ) * 4 * \" \" toc_lines . append ( f \" { indent } - { header_title } \" ) return \" \\n \" . join ( toc_lines ) >>> print ( table_of_contents ( COMMONMARK_DOC )) # doctest: +ELLIPSIS - Introduction - What is Markdown? - Why is a spec needed? - About this document - Preliminaries - Characters and lines - Tabs - Insecure characters - Backslash escapes - Entity and numeric character references ... - Appendix: A parsing strategy - Overview - Phase 1: block structure - Phase 2: inline structure - An algorithm for parsing nested emphasis and links - *look for link or image* - *process emphasis* We can display all external link URLs used in the commonmark specification: def display_external_links ( doc ): links = [ elt for elt in pandoc . iter ( doc ) if isinstance ( elt , Link )] for link in links : target = link [ 2 ] # link: Link(Attr, [Inline], Target) url = target [ 0 ] # target: (Text, Text) if url . startswith ( \"http:\" ) or url . startswith ( \"https:\" ): print ( url ) >>> display_external_links ( COMMONMARK_DOC ) http://creativecommons.org/licenses/by-sa/4.0/ http://daringfireball.net/projects/markdown/syntax http://daringfireball.net/projects/markdown/ http://www.methods.co.nz/asciidoc/ http://daringfireball.net/projects/markdown/syntax http://article.gmane.org/gmane.text.markdown.general/1997 http://article.gmane.org/gmane.text.markdown.general/2146 http://article.gmane.org/gmane.text.markdown.general/2554 https://html.spec.whatwg.org/entities.json http://www.aaronsw.com/2002/atx/atx.py http://docutils.sourceforge.net/rst.html http://daringfireball.net/projects/markdown/syntax#em http://www.vfmd.org/vfmd-spec/specification/#procedure-for-identifying-emphasis-tags https://html.spec.whatwg.org/multipage/forms.html#e-mail-state-(type=email) http://www.w3.org/TR/html5/syntax.html#comments We can get the list of all code blocks and collect their types (registered as code block classes): def fetch_code_types ( doc ): code_blocks = [ elt for elt in pandoc . iter ( doc ) if isinstance ( elt , CodeBlock )] types = set () for code_block in code_blocks : attr = code_block [ 0 ] # CodeBlock(Attr, Text) _ , classes , _ = attr # Attr = (Text, [Text], [(Text, Text)]) types . update ( classes ) return sorted ( list ( types )) >>> code_types = fetch_code_types ( COMMONMARK_DOC ) >>> code_types ['example', 'html', 'markdown', 'tree'] Exclude \u00b6 Some search patterns require to exclude some elements when one of their ancestors meets some condition. For example, you may want to count the number of words in your document (loosely defined as the number of Str instances) excluding those inside a div tagged as notes 1 . Let's use the following example document: words_doc = pandoc . read ( \"\"\" The words in this paragraph should be counted. ::: notes :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: But these words should be excluded. :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: \"\"\" ) Counting all words is easy >>> len ([ item for item in pandoc . iter ( words_doc ) if isinstance ( item , Str )]) 14 But to exclude all words with a notes div, we need to detect when the iteration enters and exits such an element. The easiest way to do this is to record the depth of the div when we enter it. As long as we iterate on items at a greater depth, we're still in the div scope ; when this depth becomes equal or smaller than this recorded depth, we're out of it. Thus, we can implement this pattern with: def is_notes ( elt ): if isinstance ( elt , Div ): attr = elt [ 0 ] # elt: Div(Attr, [Block]) classes = attr [ 1 ] # attr :(Text, [Text], [(Text, Text)]) return \"notes\" in classes else : return False def count_words ( doc ): in_notes , depth = False , None count = 0 for elt , path in pandoc . iter ( doc , path = True ): if in_notes and len ( path ) > depth : pass elif is_notes ( elt ): in_notes , depth = True , len ( path ) else : in_notes , depth = False , None if isinstance ( elt , Str ) and not in_notes : count += 1 return count It provides the expected result: >>> count_words ( words_doc ) 8 Finder \u00b6 If your code ends up being hard to read, it's not hard to wrap the more common search patterns into a find helper function, for example: def is_type_or_types ( item ): return isinstance ( item , type ) or ( isinstance ( item , tuple ) and all ( isinstance ( x , type ) for x in item ) ) def to_function ( condition ): if is_type_or_types ( condition ): return lambda elt : isinstance ( elt , condition ) elif callable ( condition ): return condition else : error = \"condition should be a type, tuple of types or function\" error += f \", not { condition } \" raise TypeError ( error ) def find ( root , condition , all = False ): condition = to_function ( condition ) elts = ( elt for elt in pandoc . iter ( root ) if condition ( elt )) if all : return list ( elts ) else : try : return next ( elts ) except StopIteration : return None This find helper returns the first elt that matches the specified condition, or returns None if the condition was never met: >>> find ( HELLOWORLD_DOC , Meta ) Meta({}) >>> find ( HELLOWORLD_DOC , Para ) Para([Str('Hello'), Space(), Str('world!')]) >>> find ( HELLOWORLD_DOC , Str ) Str('Hello') >>> find ( HELLOWORLD_DOC , LineBreak ) With all=True , the list of all matching elements are returned instead: >>> find ( HELLOWORLD_DOC , Meta , all = True ) [Meta({})] >>> find ( HELLOWORLD_DOC , Para , all = True ) [Para([Str('Hello'), Space(), Str('world!')])] >>> find ( HELLOWORLD_DOC , Str , all = True ) [Str('Hello'), Str('world!')] >>> find ( HELLOWORLD_DOC , LineBreak , all = True ) [] Types or multiple types can be specified (this is similar to what isinstance does): >>> find ( HELLOWORLD_DOC , ( Str , Space )) Str('Hello') >>> find ( HELLOWORLD_DOC , ( Str , Space ), all = True ) [Str('Hello'), Space(), Str('world!')] Complex conditions based on types and values can be factored out in a predicate function, such as is_http_or_https_link : def get_url ( link ): target = link [ 2 ] # link: Link(Attr, [Inline], Target) url = target [ 0 ] # target: (Text, Text) return url def is_http_or_https_link ( elt ): if isinstance ( elt , Link ): url = get_url ( link = elt ) return url . startswith ( \"http:\" ) or url . startswith ( \"https:\" ) else : return False >>> for link in find ( COMMONMARK_DOC , is_http_or_https_link , all = True ): ... print ( get_url ( link )) http://creativecommons.org/licenses/by-sa/4.0/ http://daringfireball.net/projects/markdown/syntax http://daringfireball.net/projects/markdown/ http://www.methods.co.nz/asciidoc/ http://daringfireball.net/projects/markdown/syntax http://article.gmane.org/gmane.text.markdown.general/1997 http://article.gmane.org/gmane.text.markdown.general/2146 http://article.gmane.org/gmane.text.markdown.general/2554 https://html.spec.whatwg.org/entities.json http://www.aaronsw.com/2002/atx/atx.py http://docutils.sourceforge.net/rst.html http://daringfireball.net/projects/markdown/syntax#em http://www.vfmd.org/vfmd-spec/specification/#procedure-for-identifying-emphasis-tags https://html.spec.whatwg.org/multipage/forms.html#e-mail-state-(type=email) http://www.w3.org/TR/html5/syntax.html#comments We can improve find to make it support the exclusion pattern: def find ( root , condition , exclude = None , all = False ): condition = to_function ( condition ) exclude = exclude or ( lambda elt : False ) def generator (): is_excluded , depth = False , None for elt , path in pandoc . iter ( root , path = True ): if is_excluded and len ( path ) > depth : pass elif exclude ( elt ): is_excluded , depth = True , len ( path ) else : is_excluded , depth = False , None if condition ( elt ): yield elt if all : return list ( generator ()) else : try : return next ( generator ()) except StopIteration : return None We can then count again the words in the words_doc document: >>> len ( find ( words_doc , Str , all = True )) 14 >>> len ( find ( words_doc , Str , exclude = is_notes , all = True )) 8 Locate \u00b6 We sometimes need to find some elements meeting some condition and to know at the same times where they are in the document hierarchy. Holder and index \u00b6 A way to locate an element elt is to provide the unique pair holder , index such that elt is holder[index] 2 . To get this information during a depth-first iteration of root , we iterate on pandoc.iter(root, path=True) : the iteration then yields elt, path and holder, index is the last item of path . For example: >>> doc = pandoc . read ( \"Hello world!\" ) >>> for elt , path in pandoc . iter ( doc , path = True ): ... if elt != doc : # when doc is the root, path == [] ... holder , index = path [ - 1 ] ... print ( f \"elt: { elt !r} \" ) ... print ( f \" -> holder: { holder } \" ) ... print ( f \" -> index: { index } \" ) elt: Meta({}) -> holder: Pandoc(Meta({}), [Para([Str('Hello'), Space(), Str('world!')])]) -> index: 0 elt: {} -> holder: Meta({}) -> index: 0 elt: [Para([Str('Hello'), Space(), Str('world!')])] -> holder: Pandoc(Meta({}), [Para([Str('Hello'), Space(), Str('world!')])]) -> index: 1 elt: Para([Str('Hello'), Space(), Str('world!')]) -> holder: [Para([Str('Hello'), Space(), Str('world!')])] -> index: 0 elt: [Str('Hello'), Space(), Str('world!')] -> holder: Para([Str('Hello'), Space(), Str('world!')]) -> index: 0 elt: Str('Hello') -> holder: [Str('Hello'), Space(), Str('world!')] -> index: 0 elt: 'Hello' -> holder: Str('Hello') -> index: 0 elt: Space() -> holder: [Str('Hello'), Space(), Str('world!')] -> index: 1 elt: Str('world!') -> holder: [Str('Hello'), Space(), Str('world!')] -> index: 2 elt: 'world!' -> holder: Str('world!') -> index: 0 The previous components of the path contain the holder and index that locate the element holder, then their holder and index, etc. up to the document root: >>> for elt , path in pandoc . iter ( doc , path = True ): ... if elt == \"world!\" : ... for holder , index in path : ... print ( f \"-> { holder } [ { index } ]\" ) -> Pandoc(Meta({}), [Para([Str('Hello'), Space(), Str('world!')])])[1] -> [Para([Str('Hello'), Space(), Str('world!')])][0] -> Para([Str('Hello'), Space(), Str('world!')])[0] -> [Str('Hello'), Space(), Str('world!')][2] -> Str('world!')[0] Transforms \u00b6 The location ( holder , index pair) of elements is a must-have for many (in-place) document transforms. We demonstrate in this section several typical use of this information on the document doc = pandoc . read ( \"\ud83c\udfe0, sweet \ud83c\udfe0.\" ) >>> doc Pandoc(Meta({}), [Para([Str('\ud83c\udfe0,'), Space(), Str('sweet'), Space(), Str('\ud83c\udfe0.')])]) Expand \u00b6 To easily locate the \ud83c\udfe0 symbol in the subsequent steps, we expand every instance of Str where it appears. First, we define the helper function split_home def split_home ( string ): text = string [ 0 ] # string: Str(text) texts = [ t for t in text . split ( \"\ud83c\udfe0\" )] parts = [] for text in texts : parts . extend ([ Str ( text ), Str ( \"\ud83c\udfe0\" )]) parts = parts [: - 1 ] # remove trailing Str(\"\ud83c\udfe0\") return [ elt for elt in parts if elt != Str ( \"\" )] >>> split_home ( Str ( \"!\ud83c\udfe0!\" )) [Str('!'), Str('\ud83c\udfe0'), Str('!')] then we use it to expand all Str inlines accordingly: matches = [ ( elt , path ) for ( elt , path ) in pandoc . iter ( doc , path = True ) if isinstance ( elt , Str ) ] for elt , path in reversed ( matches ): # reversed: subsequent matches stay valid holder , index = path [ - 1 ] holder [ index : index + 1 ] = split_home ( elt ) This operation had no apparent impact when the document is converted to markdown >>> print ( pandoc . write ( doc ) . strip ()) \ud83c\udfe0, sweet \ud83c\udfe0. but we can check that it has actually changed the document: >>> doc Pandoc(Meta({}), [Para([Str('\ud83c\udfe0'), Str(','), Space(), Str('sweet'), Space(), Str('\ud83c\udfe0'), Str('.')])]) Replace \u00b6 We locate all locations of \ud83c\udfe0 in the text and wrap them into links. matches = [ ( elt , path ) for ( elt , path ) in pandoc . iter ( doc , path = True ) if elt == Str ( \"\ud83c\udfe0\" ) ] for elt , path in reversed ( matches ): holder , index = path [ - 1 ] attr = ( \"\" , [], []) target = ( \"https://github.com/boisgera/pandoc/\" , \"\" ) holder [ index ] = Link ( attr , [ elt ], target ) >>> print ( pandoc . write ( doc )) # doctest: +NORMALIZE_WHITESPACE [\ud83c\udfe0](https://github.com/boisgera/pandoc/), sweet [\ud83c\udfe0](https://github.com/boisgera/pandoc/). >>> doc Pandoc(Meta({}), [Para([Link(('', [], []), [Str('\ud83c\udfe0')], ('https://github.com/boisgera/pandoc/', '')), Str(','), Space(), Str('sweet'), Space(), Link(('', [], []), [Str('\ud83c\udfe0')], ('https://github.com/boisgera/pandoc/', '')), Str('.')])]) Insert \u00b6 We insert the text \"home\" just after the \ud83c\udfe0 symbols: matches = [ ( elt , path ) for ( elt , path ) in pandoc . iter ( doc , path = True ) if elt == Str ( \"\ud83c\udfe0\" ) ] for elt , path in reversed ( matches ): holder , index = path [ - 1 ] attr = ( \"\" , [], []) target = ( \"https://github.com/boisgera/pandoc/\" , \"\" ) holder . insert ( index + 1 , Str ( \"home\" )) >>> print ( pandoc . write ( doc )) # doctest: +NORMALIZE_WHITESPACE [\ud83c\udfe0home](https://github.com/boisgera/pandoc/), sweet [\ud83c\udfe0home](https://github.com/boisgera/pandoc/). >>> doc Pandoc(Meta({}), [Para([Link(('', [], []), [Str('\ud83c\udfe0'), Str('home')], ('https://github.com/boisgera/pandoc/', '')), Str(','), Space(), Str('sweet'), Space(), Link(('', [], []), [Str('\ud83c\udfe0'), Str('home')], ('https://github.com/boisgera/pandoc/', '')), Str('.')])]) Delete \u00b6 And finally, we get rid of the \ud83c\udfe0 symbols altogether. matches = [ ( elt , path ) for ( elt , path ) in pandoc . iter ( doc , path = True ) if elt == Str ( \"\ud83c\udfe0\" ) ] for elt , path in reversed ( matches ): holder , index = path [ - 1 ] attr = ( \"\" , [], []) target = ( \"https://github.com/boisgera/pandoc/\" , \"\" ) del holder [ index ] >>> print ( pandoc . write ( doc )) # doctest: +NORMALIZE_WHITESPACE [home](https://github.com/boisgera/pandoc/), sweet [home](https://github.com/boisgera/pandoc/). >>> doc Pandoc(Meta({}), [Para([Link(('', [], []), [Str('home')], ('https://github.com/boisgera/pandoc/', '')), Str(','), Space(), Str('sweet'), Space(), Link(('', [], []), [Str('home')], ('https://github.com/boisgera/pandoc/', '')), Str('.')])]) Immutable data \u00b6 Every non-trivial pandoc document contains some data which is immutable. To perform in-place modifications of your document, you have to deal with them specifically. And this is a good thing! Hello world! \u00b6 Consider the most basic \"Hello world!\" paragraph: >>> paragraph = Para ([ Str ( 'Hello' ), Space (), Str ( 'world!' )]) >>> string = paragraph [ 0 ][ 2 ] >>> string Str('world!') >>> text = string [ 0 ] >>> text 'world!' Here text is a Python string, which is immutable. Thus, we cannot modify it in-place: >>> text [:] = \"pandoc!\" Traceback (most recent call last): ... TypeError : 'str' object does not support item assignment Does it mean that we cannot modify any word of this sentence? Absolutely not! Because instead of modifying the Python string, we can replace it in its container instead: >>> string [ 0 ] = \"pandoc!\" >>> paragraph Para([Str('Hello'), Space(), Str('pandoc!')]) This works because the container of \"world!\" is an instance of Str , a custom Pandoc type, which is mutable. Type safety \u00b6 While the above approach may seem to be a workaround at first, it is actually a good thing , because it helps you to carefully consider the type of data that you select and transform. Python strings for example are of course in documents to describe fragments of text, but also in many other roles. Consider the HTML fragment: blocks = [ # <p>html rocks!</p> RawBlock ( Format ( \"html\" ), \"<p>\" ), Plain ([ Str ( \"html\" ), Space (), Str ( 'rocks!' )]), RawBlock ( Format ( \"html\" ), \"<p/>\" ) ] Let's say that we want to replace \"html\" with \"pandoc\" in the document text. Notice that the string \"html\" is used in the \"html rocks!\" , but also as a type field in the Format instance. If Python strings were mutable, you could carelessly try to replace all \"html\" strings in the document model regardless of their role. And you would end up with the (invalid) document fragment: invalid_blocks = [ RawBlock ( Format ( \"pandoc\" ), \"<p>\" ), Plain ([ Str ( \"pandoc\" ), Space (), Str ( 'rocks!' )]), RawBlock ( Format ( \"pandoc\" ), \"<p/>\" ) ] Fortunately this approach will fail loudly: >>> for elt in pandoc . iter ( blocks ): ... if elt == \"html\" : ... elt [:] = \"pandoc\" Traceback (most recent call last): ... TypeError : 'str' object does not support item assignment A correct, type-safe, way to proceed is instead: >>> for elt in pandoc . iter ( blocks ): ... if isinstance ( elt , Str ) and elt [ 0 ] == \"html\" : ... elt [ 0 ] = \"pandoc\" ... >>> blocks == [ ... RawBlock ( Format ( \"html\" ), \"<p>\" ), ... Plain ([ Str ( \"pandoc\" ), Space (), Str ( 'rocks!' )]), ... RawBlock ( Format ( \"html\" ), \"<p/>\" ) ... ] True Use cases \u00b6 Python strings is an example of primitive type which is immutable and thus require special handling when in-place algorithms are used. Boolean, integers and floating-point numbers are also found in document and can be handled similarly. The other immutable types that appears in documents are based on tuples. We illustrate how to deal with them on the two most common use cases: targets and attributes. Targets \u00b6 In pandoc, targets are pairs of Python strings >>> Target Target = (Text, Text) >>> Text <class 'str'> The first text represents an URL and the second a title. Targets are used in link and image elements (and only there). Say that you want to find all links in your document whose target URL is \"https://pandoc.org\" and make sure that the associated title is \"Pandoc - About pandoc\" . The relevant type signature is: >>> Link Link(Attr, [Inline], Target) You may be tempted to iterate the document to find all pairs of text, then select those whose first item is \" https://pandoc.org \" and modify them. But this approach will not work: we know by now that it is unsafe, since you may find some items which are not really targets 3 ; and additionally, you cannot modify the targets in-place since tuples are immutable. The easiest way to handle this situation is to search for links that target pandoc's web site. >>> doc = pandoc . read ( \"[Link to pandoc.org](https://pandoc.org)\" ) >>> for elt in pandoc . iter ( doc ): ... if isinstance ( elt , Link ): ... attr , inlines , target = elt [:] # elt: Link(Attr, [Inline], Target) ... if target [ 0 ] == \"https://pandoc.org\" : ... new_target = ( target [ 0 ], \"Pandoc - About pandoc\" ) ... elt [ 2 ] = new_target ... >>> print ( pandoc . write ( doc )) # doctest: +NORMALIZE_WHITESPACE [Link to pandoc.org](https://pandoc.org \"Pandoc - About pandoc\") Attributes \u00b6 The other most notable immutable type in documents is Attr : >>> Attr Attr = (Text, [Text], [(Text, Text)]) Attr is composed of an identifier, a list of classes, and a list of key-value pairs. To transform Attr content, again the easiest way to proceed is to target their holders. Say that we want to add a class tag that described the type of the pandoc element for every element which is a Attr holder. The relevant type signatures \u2013 we display all Attr holders \u2013 are: >>> Inline # doctest: +ELLIPSIS Inline = ... | Code(Attr, Text) ... | Link(Attr, [Inline], Target) | Image(Attr, [Inline], Target) ... | Span(Attr, [Inline]) and >>> Block # doctest: +ELLIPSIS Block = ... | CodeBlock(Attr, Text) ... | Header(Int, Attr, [Inline]) ... | Table(Attr, Caption, [ColSpec], TableHead, [TableBody], TableFoot) | Div(Attr, [Block]) ... So we need to target Code , Link , Image , Span , Div , CodeBlock , Header , Table and Div instances. Header is a special case here since its attributes are its second item ; for every other type, the attributes come first. The transformation can be implemented as follows: AttrHolder = ( Code , Link , Image , Span , Div , CodeBlock , Header , Table , Div ) def add_class ( doc ): for elt in pandoc . iter ( doc ): if isinstance ( elt , AttrHolder ): attr_index = 0 if not isinstance ( elt , Header ) else 1 identifier , classes , key_value_pairs = elt [ attr_index ] typename = type ( elt ) . __name__ . lower () classes . append ( typename ) The transformation works as expected: >>> markdown = \"\"\" ... # Pandoc {#pandoc} ... [Link to pandoc.org](https://pandoc.org) ... \"\"\" >>> doc = pandoc . read ( markdown ) >>> add_class ( doc ) >>> print ( pandoc . write ( doc )) # doctest: +NORMALIZE_WHITESPACE # Pandoc {#pandoc .header} [Link to pandoc.org](https://pandoc.org){.link} Note that here we can get away without changing the attribute tuple entirely because its mutability is shallow: while we cannot rebind the reference to its items, if these items are mutable they can still be changed in-place. Here precisely, classes cannot be rebound, but since it is mutable, its contents can be changed. If we want to change the element ids instead, we would need to use a new tuple. For example, to add the id anonymous to every attribute holder without identifier, we can do: def add_id ( doc ): for elt in pandoc . iter ( doc ): if isinstance ( elt , AttrHolder ): attr_index = 0 if not isinstance ( elt , Header ) else 1 identifier , classes , key_value_pairs = elt [ attr_index ] if not identifier : identifier = \"anonymous\" elt [ attr_index ] = identifier , classes , key_value_pairs and this transformation would result in: >>> add_id ( doc ) >>> print ( pandoc . write ( doc )) # doctest: +NORMALIZE_WHITESPACE # Pandoc {#pandoc .header} [Link to pandoc.org](https://pandoc.org){#anonymous .link} such divs are used to include speaker notes into reveal.js presentations. \u21a9 or elt is list(holder.items())[index] if holder is a dict. \u21a9 These items would simply happen to share the same structure. For example, this can happen with attributes: since Attr = (Text, [Text], [(Text, Text)]) , the third component of every attribute \u2013 its list of key-value pairs \u2013 will contain some pairs of Text if it's not empty. \u21a9","title":"Cookbook"},{"location":"cookbook/#cookbook","text":"# Python Standard Library import builtins import copy # Pandoc import pandoc from pandoc.types import * In this cookbook, we will use as reference the very simple \"Hello world!\" document HELLOWORLD_DOC = pandoc . read ( \"Hello world!\" ) and the longer and more complex commonmark spec: from urllib.request import urlopen PATH = \"raw.githubusercontent.com/commonmark/commonmark-spec\" HASH = \"499ebbad90163881f51498c4c620652d0c66fb2e\" # pinned version URL = f \"https:// { PATH } / { HASH } /spec.txt\" COMMONMARK_SPEC = urlopen ( URL ) . read () . decode ( \"utf-8\" ) >>> print ( COMMONMARK_SPEC [: 583 ]) # excerpt --- title: CommonMark Spec author: John MacFarlane version: '0.30' date: '2021-06-19' license: '[CC-BY-SA 4.0](http://creativecommons.org/licenses/by-sa/4.0/)' ... <BLANKLINE> # Introduction <BLANKLINE> ## What is Markdown? <BLANKLINE> Markdown is a plain text format for writing structured documents, based on conventions for indicating formatting in email and usenet posts. It was developed by John Gruber (with help from Aaron Swartz) and released in 2004 in the form of a [syntax description](http://daringfireball.net/projects/markdown/syntax) and a Perl script (`Markdown.pl`) for converting Markdown to HTML. COMMONMARK_DOC = pandoc . read ( COMMONMARK_SPEC )","title":"Cookbook"},{"location":"cookbook/#access","text":"When we know the location and type of some information in a document, we can use either random access or pattern matching to retrieve it.","title":"Access"},{"location":"cookbook/#random-access","text":"A date is often included as inline text into a document's metadata; in this case, we can access it and return it as a markdown string: def get_date ( doc ): meta = doc [ 0 ] # doc: Pandoc(Meta, [Block]) meta_dict = meta [ 0 ] # meta: Meta({Text: MetaValue}) date = meta_dict [ \"date\" ] date_inlines = date [ 0 ] # date: MetaInlines([Inline]) return pandoc . write ( date_inlines ) . strip () The commonmark specification includes such a date: >>> print ( COMMONMARK_SPEC ) # doctest: +ELLIPSIS --- title: CommonMark Spec author: John MacFarlane version: '0.30' date: '2021-06-19' license: '[CC-BY-SA 4.0](http://creativecommons.org/licenses/by-sa/4.0/)' ... and therefore >>> get_date ( COMMONMARK_DOC ) '2021-06-19' After the metadata, the document starts with a header. To get its title, we can use def get_first_header_title ( doc ): blocks = doc [ 1 ] # doc: Pandoc(Meta, [Block]) header = blocks [ 0 ] title_inlines = header [ 2 ] # header: Header(Int, Attr, [Inline]) return pandoc . write ( title_inlines ) . strip () >>> get_first_header_title ( COMMONMARK_DOC ) 'Introduction'","title":"Random access"},{"location":"cookbook/#structural-checks","text":"The functions get_date and get_first_header_title may fail if they are use on a document which doesn't have the expected structure. For example, for the \"Hello world!\" document >>> HELLOWORLD_DOC Pandoc(Meta({}), [Para([Str('Hello'), Space(), Str('world!')])]) which has no date metadata field, and doesn't start with a header, we end up with >>> get_date ( HELLOWORLD_DOC ) Traceback (most recent call last): ... KeyError : 'date' >>> get_first_header_title ( HELLOWORLD_DOC ) Traceback (most recent call last): ... IndexError : list index out of range A more robust version of these functions may return None when the document does not have the expected structure: def get_date ( doc ): meta = doc [ 0 ] # doc: Pandoc(Meta, [Block]) meta_dict = meta [ 0 ] # meta: Meta({Text: MetaValue}) date = meta_dict . get ( \"date\" ) if isinstance ( date , MetaInlines ): date_inlines = date [ 0 ] # date: MetaInlines([Inline]) return pandoc . write ( date_inlines ) . strip () >>> get_date ( COMMONMARK_DOC ) '2021-06-19' >>> get_date ( HELLOWORLD_DOC ) def get_first_header_title ( doc ): blocks = doc [ 1 ] # doc: Pandoc(Meta, [Block]) if blocks and isinstance ( blocks [ 0 ], Header ): header = blocks [ 0 ] title_inlines = header [ 2 ] # header: Header(Int, Attr, [Inline]) return pandoc . write ( title_inlines ) . strip () >>> get_first_header_title ( COMMONMARK_DOC ) 'Introduction' >>> get_first_header_title ( HELLOWORLD_DOC )","title":"Structural checks"},{"location":"cookbook/#pattern-matching","text":"With Python 3.10 or later, pattern matching can be used to combine random access and structural checks. The following implementation of get_date def get_date ( doc ): match doc : case Pandoc ( Meta ({ \"date\" : MetaInlines ( date_inlines )}), _ ): return pandoc . write ( date_inlines ) . strip () and the previous one have identical behaviors: >>> get_date ( COMMONMARK_DOC ) '2021-06-19' >>> get_date ( HELLOWORLD_DOC ) The behavior of the following get_first_header_title function def get_first_header_title ( doc ): match doc : case Pandoc ( _ , [ Header ( _ , _ , header_inlines ), * _ ]): return pandoc . write ( header_inlines ) . strip () is also unchanged: >>> get_first_header_title ( COMMONMARK_DOC ) 'Introduction' >>> get_first_header_title ( HELLOWORLD_DOC )","title":"Pattern matching"},{"location":"cookbook/#find","text":"When the items we are searching for are not in a known place in the document, we may use the tree iterator provided by pandoc.iter and a variety of filtering methods to fetch them. Here we focus on comprehensions first and then introduce a higher-level helper.","title":"Find"},{"location":"cookbook/#filter","text":"The pattern to use is [elt for elt in pandoc.iter(root) if condition_is_met(elt)] . With it, we can build a simple table of contents of the document: def table_of_contents ( doc ): headers = [ elt for elt in pandoc . iter ( doc ) if isinstance ( elt , Header )] toc_lines = [] for header in headers : level , _ , inlines = header [:] # header: Header(Int, Attr, [Inline]) header_title = pandoc . write ( inlines ) . strip () indent = ( level - 1 ) * 4 * \" \" toc_lines . append ( f \" { indent } - { header_title } \" ) return \" \\n \" . join ( toc_lines ) >>> print ( table_of_contents ( COMMONMARK_DOC )) # doctest: +ELLIPSIS - Introduction - What is Markdown? - Why is a spec needed? - About this document - Preliminaries - Characters and lines - Tabs - Insecure characters - Backslash escapes - Entity and numeric character references ... - Appendix: A parsing strategy - Overview - Phase 1: block structure - Phase 2: inline structure - An algorithm for parsing nested emphasis and links - *look for link or image* - *process emphasis* We can display all external link URLs used in the commonmark specification: def display_external_links ( doc ): links = [ elt for elt in pandoc . iter ( doc ) if isinstance ( elt , Link )] for link in links : target = link [ 2 ] # link: Link(Attr, [Inline], Target) url = target [ 0 ] # target: (Text, Text) if url . startswith ( \"http:\" ) or url . startswith ( \"https:\" ): print ( url ) >>> display_external_links ( COMMONMARK_DOC ) http://creativecommons.org/licenses/by-sa/4.0/ http://daringfireball.net/projects/markdown/syntax http://daringfireball.net/projects/markdown/ http://www.methods.co.nz/asciidoc/ http://daringfireball.net/projects/markdown/syntax http://article.gmane.org/gmane.text.markdown.general/1997 http://article.gmane.org/gmane.text.markdown.general/2146 http://article.gmane.org/gmane.text.markdown.general/2554 https://html.spec.whatwg.org/entities.json http://www.aaronsw.com/2002/atx/atx.py http://docutils.sourceforge.net/rst.html http://daringfireball.net/projects/markdown/syntax#em http://www.vfmd.org/vfmd-spec/specification/#procedure-for-identifying-emphasis-tags https://html.spec.whatwg.org/multipage/forms.html#e-mail-state-(type=email) http://www.w3.org/TR/html5/syntax.html#comments We can get the list of all code blocks and collect their types (registered as code block classes): def fetch_code_types ( doc ): code_blocks = [ elt for elt in pandoc . iter ( doc ) if isinstance ( elt , CodeBlock )] types = set () for code_block in code_blocks : attr = code_block [ 0 ] # CodeBlock(Attr, Text) _ , classes , _ = attr # Attr = (Text, [Text], [(Text, Text)]) types . update ( classes ) return sorted ( list ( types )) >>> code_types = fetch_code_types ( COMMONMARK_DOC ) >>> code_types ['example', 'html', 'markdown', 'tree']","title":"Filter"},{"location":"cookbook/#exclude","text":"Some search patterns require to exclude some elements when one of their ancestors meets some condition. For example, you may want to count the number of words in your document (loosely defined as the number of Str instances) excluding those inside a div tagged as notes 1 . Let's use the following example document: words_doc = pandoc . read ( \"\"\" The words in this paragraph should be counted. ::: notes :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: But these words should be excluded. :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: \"\"\" ) Counting all words is easy >>> len ([ item for item in pandoc . iter ( words_doc ) if isinstance ( item , Str )]) 14 But to exclude all words with a notes div, we need to detect when the iteration enters and exits such an element. The easiest way to do this is to record the depth of the div when we enter it. As long as we iterate on items at a greater depth, we're still in the div scope ; when this depth becomes equal or smaller than this recorded depth, we're out of it. Thus, we can implement this pattern with: def is_notes ( elt ): if isinstance ( elt , Div ): attr = elt [ 0 ] # elt: Div(Attr, [Block]) classes = attr [ 1 ] # attr :(Text, [Text], [(Text, Text)]) return \"notes\" in classes else : return False def count_words ( doc ): in_notes , depth = False , None count = 0 for elt , path in pandoc . iter ( doc , path = True ): if in_notes and len ( path ) > depth : pass elif is_notes ( elt ): in_notes , depth = True , len ( path ) else : in_notes , depth = False , None if isinstance ( elt , Str ) and not in_notes : count += 1 return count It provides the expected result: >>> count_words ( words_doc ) 8","title":"Exclude"},{"location":"cookbook/#finder","text":"If your code ends up being hard to read, it's not hard to wrap the more common search patterns into a find helper function, for example: def is_type_or_types ( item ): return isinstance ( item , type ) or ( isinstance ( item , tuple ) and all ( isinstance ( x , type ) for x in item ) ) def to_function ( condition ): if is_type_or_types ( condition ): return lambda elt : isinstance ( elt , condition ) elif callable ( condition ): return condition else : error = \"condition should be a type, tuple of types or function\" error += f \", not { condition } \" raise TypeError ( error ) def find ( root , condition , all = False ): condition = to_function ( condition ) elts = ( elt for elt in pandoc . iter ( root ) if condition ( elt )) if all : return list ( elts ) else : try : return next ( elts ) except StopIteration : return None This find helper returns the first elt that matches the specified condition, or returns None if the condition was never met: >>> find ( HELLOWORLD_DOC , Meta ) Meta({}) >>> find ( HELLOWORLD_DOC , Para ) Para([Str('Hello'), Space(), Str('world!')]) >>> find ( HELLOWORLD_DOC , Str ) Str('Hello') >>> find ( HELLOWORLD_DOC , LineBreak ) With all=True , the list of all matching elements are returned instead: >>> find ( HELLOWORLD_DOC , Meta , all = True ) [Meta({})] >>> find ( HELLOWORLD_DOC , Para , all = True ) [Para([Str('Hello'), Space(), Str('world!')])] >>> find ( HELLOWORLD_DOC , Str , all = True ) [Str('Hello'), Str('world!')] >>> find ( HELLOWORLD_DOC , LineBreak , all = True ) [] Types or multiple types can be specified (this is similar to what isinstance does): >>> find ( HELLOWORLD_DOC , ( Str , Space )) Str('Hello') >>> find ( HELLOWORLD_DOC , ( Str , Space ), all = True ) [Str('Hello'), Space(), Str('world!')] Complex conditions based on types and values can be factored out in a predicate function, such as is_http_or_https_link : def get_url ( link ): target = link [ 2 ] # link: Link(Attr, [Inline], Target) url = target [ 0 ] # target: (Text, Text) return url def is_http_or_https_link ( elt ): if isinstance ( elt , Link ): url = get_url ( link = elt ) return url . startswith ( \"http:\" ) or url . startswith ( \"https:\" ) else : return False >>> for link in find ( COMMONMARK_DOC , is_http_or_https_link , all = True ): ... print ( get_url ( link )) http://creativecommons.org/licenses/by-sa/4.0/ http://daringfireball.net/projects/markdown/syntax http://daringfireball.net/projects/markdown/ http://www.methods.co.nz/asciidoc/ http://daringfireball.net/projects/markdown/syntax http://article.gmane.org/gmane.text.markdown.general/1997 http://article.gmane.org/gmane.text.markdown.general/2146 http://article.gmane.org/gmane.text.markdown.general/2554 https://html.spec.whatwg.org/entities.json http://www.aaronsw.com/2002/atx/atx.py http://docutils.sourceforge.net/rst.html http://daringfireball.net/projects/markdown/syntax#em http://www.vfmd.org/vfmd-spec/specification/#procedure-for-identifying-emphasis-tags https://html.spec.whatwg.org/multipage/forms.html#e-mail-state-(type=email) http://www.w3.org/TR/html5/syntax.html#comments We can improve find to make it support the exclusion pattern: def find ( root , condition , exclude = None , all = False ): condition = to_function ( condition ) exclude = exclude or ( lambda elt : False ) def generator (): is_excluded , depth = False , None for elt , path in pandoc . iter ( root , path = True ): if is_excluded and len ( path ) > depth : pass elif exclude ( elt ): is_excluded , depth = True , len ( path ) else : is_excluded , depth = False , None if condition ( elt ): yield elt if all : return list ( generator ()) else : try : return next ( generator ()) except StopIteration : return None We can then count again the words in the words_doc document: >>> len ( find ( words_doc , Str , all = True )) 14 >>> len ( find ( words_doc , Str , exclude = is_notes , all = True )) 8","title":"Finder"},{"location":"cookbook/#locate","text":"We sometimes need to find some elements meeting some condition and to know at the same times where they are in the document hierarchy.","title":"Locate"},{"location":"cookbook/#holder-and-index","text":"A way to locate an element elt is to provide the unique pair holder , index such that elt is holder[index] 2 . To get this information during a depth-first iteration of root , we iterate on pandoc.iter(root, path=True) : the iteration then yields elt, path and holder, index is the last item of path . For example: >>> doc = pandoc . read ( \"Hello world!\" ) >>> for elt , path in pandoc . iter ( doc , path = True ): ... if elt != doc : # when doc is the root, path == [] ... holder , index = path [ - 1 ] ... print ( f \"elt: { elt !r} \" ) ... print ( f \" -> holder: { holder } \" ) ... print ( f \" -> index: { index } \" ) elt: Meta({}) -> holder: Pandoc(Meta({}), [Para([Str('Hello'), Space(), Str('world!')])]) -> index: 0 elt: {} -> holder: Meta({}) -> index: 0 elt: [Para([Str('Hello'), Space(), Str('world!')])] -> holder: Pandoc(Meta({}), [Para([Str('Hello'), Space(), Str('world!')])]) -> index: 1 elt: Para([Str('Hello'), Space(), Str('world!')]) -> holder: [Para([Str('Hello'), Space(), Str('world!')])] -> index: 0 elt: [Str('Hello'), Space(), Str('world!')] -> holder: Para([Str('Hello'), Space(), Str('world!')]) -> index: 0 elt: Str('Hello') -> holder: [Str('Hello'), Space(), Str('world!')] -> index: 0 elt: 'Hello' -> holder: Str('Hello') -> index: 0 elt: Space() -> holder: [Str('Hello'), Space(), Str('world!')] -> index: 1 elt: Str('world!') -> holder: [Str('Hello'), Space(), Str('world!')] -> index: 2 elt: 'world!' -> holder: Str('world!') -> index: 0 The previous components of the path contain the holder and index that locate the element holder, then their holder and index, etc. up to the document root: >>> for elt , path in pandoc . iter ( doc , path = True ): ... if elt == \"world!\" : ... for holder , index in path : ... print ( f \"-> { holder } [ { index } ]\" ) -> Pandoc(Meta({}), [Para([Str('Hello'), Space(), Str('world!')])])[1] -> [Para([Str('Hello'), Space(), Str('world!')])][0] -> Para([Str('Hello'), Space(), Str('world!')])[0] -> [Str('Hello'), Space(), Str('world!')][2] -> Str('world!')[0]","title":"Holder and index"},{"location":"cookbook/#transforms","text":"The location ( holder , index pair) of elements is a must-have for many (in-place) document transforms. We demonstrate in this section several typical use of this information on the document doc = pandoc . read ( \"\ud83c\udfe0, sweet \ud83c\udfe0.\" ) >>> doc Pandoc(Meta({}), [Para([Str('\ud83c\udfe0,'), Space(), Str('sweet'), Space(), Str('\ud83c\udfe0.')])])","title":"Transforms"},{"location":"cookbook/#expand","text":"To easily locate the \ud83c\udfe0 symbol in the subsequent steps, we expand every instance of Str where it appears. First, we define the helper function split_home def split_home ( string ): text = string [ 0 ] # string: Str(text) texts = [ t for t in text . split ( \"\ud83c\udfe0\" )] parts = [] for text in texts : parts . extend ([ Str ( text ), Str ( \"\ud83c\udfe0\" )]) parts = parts [: - 1 ] # remove trailing Str(\"\ud83c\udfe0\") return [ elt for elt in parts if elt != Str ( \"\" )] >>> split_home ( Str ( \"!\ud83c\udfe0!\" )) [Str('!'), Str('\ud83c\udfe0'), Str('!')] then we use it to expand all Str inlines accordingly: matches = [ ( elt , path ) for ( elt , path ) in pandoc . iter ( doc , path = True ) if isinstance ( elt , Str ) ] for elt , path in reversed ( matches ): # reversed: subsequent matches stay valid holder , index = path [ - 1 ] holder [ index : index + 1 ] = split_home ( elt ) This operation had no apparent impact when the document is converted to markdown >>> print ( pandoc . write ( doc ) . strip ()) \ud83c\udfe0, sweet \ud83c\udfe0. but we can check that it has actually changed the document: >>> doc Pandoc(Meta({}), [Para([Str('\ud83c\udfe0'), Str(','), Space(), Str('sweet'), Space(), Str('\ud83c\udfe0'), Str('.')])])","title":"Expand"},{"location":"cookbook/#replace","text":"We locate all locations of \ud83c\udfe0 in the text and wrap them into links. matches = [ ( elt , path ) for ( elt , path ) in pandoc . iter ( doc , path = True ) if elt == Str ( \"\ud83c\udfe0\" ) ] for elt , path in reversed ( matches ): holder , index = path [ - 1 ] attr = ( \"\" , [], []) target = ( \"https://github.com/boisgera/pandoc/\" , \"\" ) holder [ index ] = Link ( attr , [ elt ], target ) >>> print ( pandoc . write ( doc )) # doctest: +NORMALIZE_WHITESPACE [\ud83c\udfe0](https://github.com/boisgera/pandoc/), sweet [\ud83c\udfe0](https://github.com/boisgera/pandoc/). >>> doc Pandoc(Meta({}), [Para([Link(('', [], []), [Str('\ud83c\udfe0')], ('https://github.com/boisgera/pandoc/', '')), Str(','), Space(), Str('sweet'), Space(), Link(('', [], []), [Str('\ud83c\udfe0')], ('https://github.com/boisgera/pandoc/', '')), Str('.')])])","title":"Replace"},{"location":"cookbook/#insert","text":"We insert the text \"home\" just after the \ud83c\udfe0 symbols: matches = [ ( elt , path ) for ( elt , path ) in pandoc . iter ( doc , path = True ) if elt == Str ( \"\ud83c\udfe0\" ) ] for elt , path in reversed ( matches ): holder , index = path [ - 1 ] attr = ( \"\" , [], []) target = ( \"https://github.com/boisgera/pandoc/\" , \"\" ) holder . insert ( index + 1 , Str ( \"home\" )) >>> print ( pandoc . write ( doc )) # doctest: +NORMALIZE_WHITESPACE [\ud83c\udfe0home](https://github.com/boisgera/pandoc/), sweet [\ud83c\udfe0home](https://github.com/boisgera/pandoc/). >>> doc Pandoc(Meta({}), [Para([Link(('', [], []), [Str('\ud83c\udfe0'), Str('home')], ('https://github.com/boisgera/pandoc/', '')), Str(','), Space(), Str('sweet'), Space(), Link(('', [], []), [Str('\ud83c\udfe0'), Str('home')], ('https://github.com/boisgera/pandoc/', '')), Str('.')])])","title":"Insert"},{"location":"cookbook/#delete","text":"And finally, we get rid of the \ud83c\udfe0 symbols altogether. matches = [ ( elt , path ) for ( elt , path ) in pandoc . iter ( doc , path = True ) if elt == Str ( \"\ud83c\udfe0\" ) ] for elt , path in reversed ( matches ): holder , index = path [ - 1 ] attr = ( \"\" , [], []) target = ( \"https://github.com/boisgera/pandoc/\" , \"\" ) del holder [ index ] >>> print ( pandoc . write ( doc )) # doctest: +NORMALIZE_WHITESPACE [home](https://github.com/boisgera/pandoc/), sweet [home](https://github.com/boisgera/pandoc/). >>> doc Pandoc(Meta({}), [Para([Link(('', [], []), [Str('home')], ('https://github.com/boisgera/pandoc/', '')), Str(','), Space(), Str('sweet'), Space(), Link(('', [], []), [Str('home')], ('https://github.com/boisgera/pandoc/', '')), Str('.')])])","title":"Delete"},{"location":"cookbook/#immutable-data","text":"Every non-trivial pandoc document contains some data which is immutable. To perform in-place modifications of your document, you have to deal with them specifically. And this is a good thing!","title":"Immutable data"},{"location":"cookbook/#hello-world","text":"Consider the most basic \"Hello world!\" paragraph: >>> paragraph = Para ([ Str ( 'Hello' ), Space (), Str ( 'world!' )]) >>> string = paragraph [ 0 ][ 2 ] >>> string Str('world!') >>> text = string [ 0 ] >>> text 'world!' Here text is a Python string, which is immutable. Thus, we cannot modify it in-place: >>> text [:] = \"pandoc!\" Traceback (most recent call last): ... TypeError : 'str' object does not support item assignment Does it mean that we cannot modify any word of this sentence? Absolutely not! Because instead of modifying the Python string, we can replace it in its container instead: >>> string [ 0 ] = \"pandoc!\" >>> paragraph Para([Str('Hello'), Space(), Str('pandoc!')]) This works because the container of \"world!\" is an instance of Str , a custom Pandoc type, which is mutable.","title":"Hello world!"},{"location":"cookbook/#type-safety","text":"While the above approach may seem to be a workaround at first, it is actually a good thing , because it helps you to carefully consider the type of data that you select and transform. Python strings for example are of course in documents to describe fragments of text, but also in many other roles. Consider the HTML fragment: blocks = [ # <p>html rocks!</p> RawBlock ( Format ( \"html\" ), \"<p>\" ), Plain ([ Str ( \"html\" ), Space (), Str ( 'rocks!' )]), RawBlock ( Format ( \"html\" ), \"<p/>\" ) ] Let's say that we want to replace \"html\" with \"pandoc\" in the document text. Notice that the string \"html\" is used in the \"html rocks!\" , but also as a type field in the Format instance. If Python strings were mutable, you could carelessly try to replace all \"html\" strings in the document model regardless of their role. And you would end up with the (invalid) document fragment: invalid_blocks = [ RawBlock ( Format ( \"pandoc\" ), \"<p>\" ), Plain ([ Str ( \"pandoc\" ), Space (), Str ( 'rocks!' )]), RawBlock ( Format ( \"pandoc\" ), \"<p/>\" ) ] Fortunately this approach will fail loudly: >>> for elt in pandoc . iter ( blocks ): ... if elt == \"html\" : ... elt [:] = \"pandoc\" Traceback (most recent call last): ... TypeError : 'str' object does not support item assignment A correct, type-safe, way to proceed is instead: >>> for elt in pandoc . iter ( blocks ): ... if isinstance ( elt , Str ) and elt [ 0 ] == \"html\" : ... elt [ 0 ] = \"pandoc\" ... >>> blocks == [ ... RawBlock ( Format ( \"html\" ), \"<p>\" ), ... Plain ([ Str ( \"pandoc\" ), Space (), Str ( 'rocks!' )]), ... RawBlock ( Format ( \"html\" ), \"<p/>\" ) ... ] True","title":"Type safety"},{"location":"cookbook/#use-cases","text":"Python strings is an example of primitive type which is immutable and thus require special handling when in-place algorithms are used. Boolean, integers and floating-point numbers are also found in document and can be handled similarly. The other immutable types that appears in documents are based on tuples. We illustrate how to deal with them on the two most common use cases: targets and attributes.","title":"Use cases"},{"location":"cookbook/#targets","text":"In pandoc, targets are pairs of Python strings >>> Target Target = (Text, Text) >>> Text <class 'str'> The first text represents an URL and the second a title. Targets are used in link and image elements (and only there). Say that you want to find all links in your document whose target URL is \"https://pandoc.org\" and make sure that the associated title is \"Pandoc - About pandoc\" . The relevant type signature is: >>> Link Link(Attr, [Inline], Target) You may be tempted to iterate the document to find all pairs of text, then select those whose first item is \" https://pandoc.org \" and modify them. But this approach will not work: we know by now that it is unsafe, since you may find some items which are not really targets 3 ; and additionally, you cannot modify the targets in-place since tuples are immutable. The easiest way to handle this situation is to search for links that target pandoc's web site. >>> doc = pandoc . read ( \"[Link to pandoc.org](https://pandoc.org)\" ) >>> for elt in pandoc . iter ( doc ): ... if isinstance ( elt , Link ): ... attr , inlines , target = elt [:] # elt: Link(Attr, [Inline], Target) ... if target [ 0 ] == \"https://pandoc.org\" : ... new_target = ( target [ 0 ], \"Pandoc - About pandoc\" ) ... elt [ 2 ] = new_target ... >>> print ( pandoc . write ( doc )) # doctest: +NORMALIZE_WHITESPACE [Link to pandoc.org](https://pandoc.org \"Pandoc - About pandoc\")","title":"Targets"},{"location":"cookbook/#attributes","text":"The other most notable immutable type in documents is Attr : >>> Attr Attr = (Text, [Text], [(Text, Text)]) Attr is composed of an identifier, a list of classes, and a list of key-value pairs. To transform Attr content, again the easiest way to proceed is to target their holders. Say that we want to add a class tag that described the type of the pandoc element for every element which is a Attr holder. The relevant type signatures \u2013 we display all Attr holders \u2013 are: >>> Inline # doctest: +ELLIPSIS Inline = ... | Code(Attr, Text) ... | Link(Attr, [Inline], Target) | Image(Attr, [Inline], Target) ... | Span(Attr, [Inline]) and >>> Block # doctest: +ELLIPSIS Block = ... | CodeBlock(Attr, Text) ... | Header(Int, Attr, [Inline]) ... | Table(Attr, Caption, [ColSpec], TableHead, [TableBody], TableFoot) | Div(Attr, [Block]) ... So we need to target Code , Link , Image , Span , Div , CodeBlock , Header , Table and Div instances. Header is a special case here since its attributes are its second item ; for every other type, the attributes come first. The transformation can be implemented as follows: AttrHolder = ( Code , Link , Image , Span , Div , CodeBlock , Header , Table , Div ) def add_class ( doc ): for elt in pandoc . iter ( doc ): if isinstance ( elt , AttrHolder ): attr_index = 0 if not isinstance ( elt , Header ) else 1 identifier , classes , key_value_pairs = elt [ attr_index ] typename = type ( elt ) . __name__ . lower () classes . append ( typename ) The transformation works as expected: >>> markdown = \"\"\" ... # Pandoc {#pandoc} ... [Link to pandoc.org](https://pandoc.org) ... \"\"\" >>> doc = pandoc . read ( markdown ) >>> add_class ( doc ) >>> print ( pandoc . write ( doc )) # doctest: +NORMALIZE_WHITESPACE # Pandoc {#pandoc .header} [Link to pandoc.org](https://pandoc.org){.link} Note that here we can get away without changing the attribute tuple entirely because its mutability is shallow: while we cannot rebind the reference to its items, if these items are mutable they can still be changed in-place. Here precisely, classes cannot be rebound, but since it is mutable, its contents can be changed. If we want to change the element ids instead, we would need to use a new tuple. For example, to add the id anonymous to every attribute holder without identifier, we can do: def add_id ( doc ): for elt in pandoc . iter ( doc ): if isinstance ( elt , AttrHolder ): attr_index = 0 if not isinstance ( elt , Header ) else 1 identifier , classes , key_value_pairs = elt [ attr_index ] if not identifier : identifier = \"anonymous\" elt [ attr_index ] = identifier , classes , key_value_pairs and this transformation would result in: >>> add_id ( doc ) >>> print ( pandoc . write ( doc )) # doctest: +NORMALIZE_WHITESPACE # Pandoc {#pandoc .header} [Link to pandoc.org](https://pandoc.org){#anonymous .link} such divs are used to include speaker notes into reveal.js presentations. \u21a9 or elt is list(holder.items())[index] if holder is a dict. \u21a9 These items would simply happen to share the same structure. For example, this can happen with attributes: since Attr = (Text, [Text], [(Text, Text)]) , the third component of every attribute \u2013 its list of key-value pairs \u2013 will contain some pairs of Text if it's not empty. \u21a9","title":"Attributes"},{"location":"document/","text":"Document structure \u00b6 import pandoc from pandoc.types import * Meta-model \u00b6 Pandoc models every document as a tree of elements. Each element has a well-defined type such as paragraph, image, note link, etc. and of course the document type. These elements are combined using a well-defined set of rules which defines the document meta-model 1 . Pandoc can be used a converter between different document formats; this usage requires very little knowledge about the document structure. However, if one wishes to analyze, create or transform documents, some working knowledge of this meta-model becomes necessary. Haskell & Python \u00b6 The primary source of information about pandoc's meta-model is the hierarchy of types defined by the pandoc-types Haskell package. The meta-model, represented by a collection of Haskell types, is described in the documentation of the Text.Pandoc.Definition module . However, this source of information requires some understanding of the Haskell programming language. The pandoc Python library brings to Python this hierarchy of types ; it also offers an alternate and interactive way to become familiar with the meta-model. This is what we describe in the following sections. Documents \u00b6 Explore \u00b6 The basic idea here is that you can create markdown documents that feature exactly the kind of document constructs that you are interested in, and then read them as pandoc documents to see how they look like. By construction, these documents converted from markdown will be valid, i.e. consistent with the pandoc meta-model. And since you can display them, it's a great way to build some understanding on how things work. For example, the plain text \"Hello World!\" is represented in the following manner: >>> text = \"Hello, World!\" >>> doc = pandoc . read ( text ) >>> doc Pandoc(Meta({}), [Para([Str('Hello,'), Space(), Str('World!')])]) We can see that this document is an instance of the Pandoc type, which contains some (empty) metadata and whose contents are a single paragraph which contains strings and spaces. It's possible to explore interactively this document in a more precise manner: >>> doc Pandoc(Meta({}), [Para([Str('Hello,'), Space(), Str('World!')])]) >>> meta = doc [ 0 ] >>> meta Meta({}) >>> meta [ 0 ] {} >>> contents = doc [ 1 ] >>> contents [Para([Str('Hello,'), Space(), Str('World!')])] >>> paragraph = contents [ 0 ] >>> paragraph Para([Str('Hello,'), Space(), Str('World!')]) >>> paragraph [ 0 ] [Str('Hello,'), Space(), Str('World!')] >>> world = paragraph [ 0 ][ 2 ] >>> world Str('World!') I recommend that you try to reproduce the process above for small documents that feature titles, headers, emphasized text, lists, etc. to become familiar with the way that these constructs are described in pandoc documents. Create \u00b6 At this stage, even if we have not yet described formally the meta-model, we have already gathered enough knowledge to build a simple plain text document from scratch. >>> text = [ Str ( \"Python\" ), Space (), Str ( \"&\" ), Space (), Str ( \"Pandoc\" )] >>> paragraph = Para ( text ) >>> metadata = Meta ({}) >>> doc = Pandoc ( metadata , [ paragraph ]) We can check that our document is valid and describes what we are expecting by converting it to markdown and displaying the result: >>> print ( pandoc . write ( doc )) # doctest: +NORMALIZE_WHITESPACE Python & Pandoc Types \u00b6 Explore \u00b6 The insights gathered in the previous sections were a good starting point to get a feel of the possible document structure. Now, to be certain that we always deal with valid documents, we need to explore the document meta-model itself, i.e. the hierarchy of pandoc types, such as Pandoc , Meta , Para , Str , Space , etc. Luckily for us, these types are self-documented: in the Python interpreter they are represented by a type signature. This signature described how they can be constructed. For example, the top-level type Pandoc is represented as: >>> Pandoc Pandoc(Meta, [Block]) which means that a Pandoc instance is defined by an instance of Meta (the document metadata) and a list of blocks. In our exemple above, the metadata was not very interesting: Meta({}) . Still, we can make sure that this fragment is valid: the Meta type signature is >>> Meta Meta({Text: MetaValue}) which reads as: metadata instances contain a dictionary of Text keys and MetaValue values. In our example, this dictionary was empty, hence we don't need to explore the structure of Text and MetaValue any further to conclude that the fragment is valid. Now, let's explore the content of the document which is defined as a list of blocks. The Block type signature is >>> Block Block = Plain([Inline]) | Para([Inline]) | LineBlock([[Inline]]) | CodeBlock(Attr, Text) | RawBlock(Format, Text) | BlockQuote([Block]) | OrderedList(ListAttributes, [[Block]]) | BulletList([[Block]]) | DefinitionList([([Inline], [[Block]])]) | Header(Int, Attr, [Inline]) | HorizontalRule() | Table(Attr, Caption, [ColSpec], TableHead, [TableBody], TableFoot) | Div(Attr, [Block]) | Null() Each \"|\" symbol in the signature represents an alternative: blocks are either instances of Plain or Para or LineBlock , etc. In our example document, the only type of block that was used is the paragraph type Para , whose signature is: >>> Para Para([Inline]) Paragraphs contain a list of inlines. An inline is >>> Inline Inline = Str(Text) | Emph([Inline]) | Underline([Inline]) | Strong([Inline]) | Strikeout([Inline]) | Superscript([Inline]) | Subscript([Inline]) | SmallCaps([Inline]) | Quoted(QuoteType, [Inline]) | Cite([Citation], [Inline]) | Code(Attr, Text) | Space() | SoftBreak() | LineBreak() | Math(MathType, Text) | RawInline(Format, Text) | Link(Attr, [Inline], Target) | Image(Attr, [Inline], Target) | Note([Block]) | Span(Attr, [Inline]) In our plain text example, only two types of inlines where used: strings Str and white space Space . Since >>> Str Str(Text) >>> Text <class 'str'> we see that Str merely wraps an instance of Text which is simply a synonym for the Python string type. On the other hand, the white space is a type without any content: >>> Space Space() We now have successfully discovered all pandoc types used in our simple \"Hello world!\" document. Again, I recommend that you reproduce this process for all document constructs that you are interested in. Kinds of Types \u00b6 The types defined in pandoc.types are either data types, typedefs or aliases for Python built-ins. >>> from pandoc.types import * The Pandoc type is an example of data type: >>> issubclass ( Pandoc , Type ) True >>> issubclass ( Pandoc , Data ) True Data types come in two flavors: abstract or concrete. The signature of abstract data types lists the collection of concrete types they correspond to: >>> Inline # doctest: +ELLIPSIS Inline = Str(Text) | Emph([Inline]) | Underline([Inline]) | Strong([Inline]) ... >>> issubclass ( Inline , Type ) True >>> issubclass ( Inline , Data ) True The concrete types on the right-hand side of this signature are constructor (concrete) types. The abstract type itself is not a constructor ; it cannot be instantiated: >>> issubclass ( Inline , Constructor ) False >>> Inline () Traceback (most recent call last): ... TypeError : Can't instantiate abstract class Inline The constructors associated to some abstract data type are concrete: >>> issubclass ( Str , Type ) True >>> issubclass ( Str , Data ) True >>> issubclass ( Str , Constructor ) True They can be instantiated and the classic inheritance test apply: >>> string = Str ( \"Hello\" ) >>> isinstance ( string , Str ) True Constructor types inherit from the corresponding abstract data type: >>> issubclass ( Str , Inline ) True >>> isinstance ( string , Inline ) True Typedefs are also another kind of abstract type. They are merely introduced so that we can name some constructs in the type hierarchy, but no instance of such types exist in documents. For example, consider the Attr and Target types: >>> Attr Attr = (Text, [Text], [(Text, Text)]) >>> Target Target = (Text, Text) They are pandoc types which are not data types but typedefs: >>> issubclass ( Attr , Type ) True >>> issubclass ( Attr , Data ) False >>> issubclass ( Attr , TypeDef ) True >>> issubclass ( Target , Type ) True >>> issubclass ( Target , Data ) False >>> issubclass ( Target , TypeDef ) True They enable more compact and readable types signatures. For example, with typedefs, the Link signature is: >>> Link Link(Attr, [Inline], Target) instead of Link((Text, [Text], [(Text, Text)]), [Inline], (Text, Text)) without them. To mimick closely the original Haskell type hierarchy, we also define aliases for some Python primitive types. For example, the Text type used in the Str data constructor is not a custom Pandoc type: >>> Str Str(Text) >>> issubclass ( Text , Type ) False Instead, it's a mere alias for the builtin Python string: >>> Text <class 'str'> A document model represents a given document. The document meta-model represents the document model itself, i.e. the set of all valid documents. \u21a9","title":"Document structure"},{"location":"document/#document-structure","text":"import pandoc from pandoc.types import *","title":"Document structure"},{"location":"document/#meta-model","text":"Pandoc models every document as a tree of elements. Each element has a well-defined type such as paragraph, image, note link, etc. and of course the document type. These elements are combined using a well-defined set of rules which defines the document meta-model 1 . Pandoc can be used a converter between different document formats; this usage requires very little knowledge about the document structure. However, if one wishes to analyze, create or transform documents, some working knowledge of this meta-model becomes necessary.","title":"Meta-model"},{"location":"document/#haskell-python","text":"The primary source of information about pandoc's meta-model is the hierarchy of types defined by the pandoc-types Haskell package. The meta-model, represented by a collection of Haskell types, is described in the documentation of the Text.Pandoc.Definition module . However, this source of information requires some understanding of the Haskell programming language. The pandoc Python library brings to Python this hierarchy of types ; it also offers an alternate and interactive way to become familiar with the meta-model. This is what we describe in the following sections.","title":"Haskell &amp; Python"},{"location":"document/#documents","text":"","title":"Documents"},{"location":"document/#explore","text":"The basic idea here is that you can create markdown documents that feature exactly the kind of document constructs that you are interested in, and then read them as pandoc documents to see how they look like. By construction, these documents converted from markdown will be valid, i.e. consistent with the pandoc meta-model. And since you can display them, it's a great way to build some understanding on how things work. For example, the plain text \"Hello World!\" is represented in the following manner: >>> text = \"Hello, World!\" >>> doc = pandoc . read ( text ) >>> doc Pandoc(Meta({}), [Para([Str('Hello,'), Space(), Str('World!')])]) We can see that this document is an instance of the Pandoc type, which contains some (empty) metadata and whose contents are a single paragraph which contains strings and spaces. It's possible to explore interactively this document in a more precise manner: >>> doc Pandoc(Meta({}), [Para([Str('Hello,'), Space(), Str('World!')])]) >>> meta = doc [ 0 ] >>> meta Meta({}) >>> meta [ 0 ] {} >>> contents = doc [ 1 ] >>> contents [Para([Str('Hello,'), Space(), Str('World!')])] >>> paragraph = contents [ 0 ] >>> paragraph Para([Str('Hello,'), Space(), Str('World!')]) >>> paragraph [ 0 ] [Str('Hello,'), Space(), Str('World!')] >>> world = paragraph [ 0 ][ 2 ] >>> world Str('World!') I recommend that you try to reproduce the process above for small documents that feature titles, headers, emphasized text, lists, etc. to become familiar with the way that these constructs are described in pandoc documents.","title":"Explore"},{"location":"document/#create","text":"At this stage, even if we have not yet described formally the meta-model, we have already gathered enough knowledge to build a simple plain text document from scratch. >>> text = [ Str ( \"Python\" ), Space (), Str ( \"&\" ), Space (), Str ( \"Pandoc\" )] >>> paragraph = Para ( text ) >>> metadata = Meta ({}) >>> doc = Pandoc ( metadata , [ paragraph ]) We can check that our document is valid and describes what we are expecting by converting it to markdown and displaying the result: >>> print ( pandoc . write ( doc )) # doctest: +NORMALIZE_WHITESPACE Python & Pandoc","title":"Create"},{"location":"document/#types","text":"","title":"Types"},{"location":"document/#explore_1","text":"The insights gathered in the previous sections were a good starting point to get a feel of the possible document structure. Now, to be certain that we always deal with valid documents, we need to explore the document meta-model itself, i.e. the hierarchy of pandoc types, such as Pandoc , Meta , Para , Str , Space , etc. Luckily for us, these types are self-documented: in the Python interpreter they are represented by a type signature. This signature described how they can be constructed. For example, the top-level type Pandoc is represented as: >>> Pandoc Pandoc(Meta, [Block]) which means that a Pandoc instance is defined by an instance of Meta (the document metadata) and a list of blocks. In our exemple above, the metadata was not very interesting: Meta({}) . Still, we can make sure that this fragment is valid: the Meta type signature is >>> Meta Meta({Text: MetaValue}) which reads as: metadata instances contain a dictionary of Text keys and MetaValue values. In our example, this dictionary was empty, hence we don't need to explore the structure of Text and MetaValue any further to conclude that the fragment is valid. Now, let's explore the content of the document which is defined as a list of blocks. The Block type signature is >>> Block Block = Plain([Inline]) | Para([Inline]) | LineBlock([[Inline]]) | CodeBlock(Attr, Text) | RawBlock(Format, Text) | BlockQuote([Block]) | OrderedList(ListAttributes, [[Block]]) | BulletList([[Block]]) | DefinitionList([([Inline], [[Block]])]) | Header(Int, Attr, [Inline]) | HorizontalRule() | Table(Attr, Caption, [ColSpec], TableHead, [TableBody], TableFoot) | Div(Attr, [Block]) | Null() Each \"|\" symbol in the signature represents an alternative: blocks are either instances of Plain or Para or LineBlock , etc. In our example document, the only type of block that was used is the paragraph type Para , whose signature is: >>> Para Para([Inline]) Paragraphs contain a list of inlines. An inline is >>> Inline Inline = Str(Text) | Emph([Inline]) | Underline([Inline]) | Strong([Inline]) | Strikeout([Inline]) | Superscript([Inline]) | Subscript([Inline]) | SmallCaps([Inline]) | Quoted(QuoteType, [Inline]) | Cite([Citation], [Inline]) | Code(Attr, Text) | Space() | SoftBreak() | LineBreak() | Math(MathType, Text) | RawInline(Format, Text) | Link(Attr, [Inline], Target) | Image(Attr, [Inline], Target) | Note([Block]) | Span(Attr, [Inline]) In our plain text example, only two types of inlines where used: strings Str and white space Space . Since >>> Str Str(Text) >>> Text <class 'str'> we see that Str merely wraps an instance of Text which is simply a synonym for the Python string type. On the other hand, the white space is a type without any content: >>> Space Space() We now have successfully discovered all pandoc types used in our simple \"Hello world!\" document. Again, I recommend that you reproduce this process for all document constructs that you are interested in.","title":"Explore"},{"location":"document/#kinds-of-types","text":"The types defined in pandoc.types are either data types, typedefs or aliases for Python built-ins. >>> from pandoc.types import * The Pandoc type is an example of data type: >>> issubclass ( Pandoc , Type ) True >>> issubclass ( Pandoc , Data ) True Data types come in two flavors: abstract or concrete. The signature of abstract data types lists the collection of concrete types they correspond to: >>> Inline # doctest: +ELLIPSIS Inline = Str(Text) | Emph([Inline]) | Underline([Inline]) | Strong([Inline]) ... >>> issubclass ( Inline , Type ) True >>> issubclass ( Inline , Data ) True The concrete types on the right-hand side of this signature are constructor (concrete) types. The abstract type itself is not a constructor ; it cannot be instantiated: >>> issubclass ( Inline , Constructor ) False >>> Inline () Traceback (most recent call last): ... TypeError : Can't instantiate abstract class Inline The constructors associated to some abstract data type are concrete: >>> issubclass ( Str , Type ) True >>> issubclass ( Str , Data ) True >>> issubclass ( Str , Constructor ) True They can be instantiated and the classic inheritance test apply: >>> string = Str ( \"Hello\" ) >>> isinstance ( string , Str ) True Constructor types inherit from the corresponding abstract data type: >>> issubclass ( Str , Inline ) True >>> isinstance ( string , Inline ) True Typedefs are also another kind of abstract type. They are merely introduced so that we can name some constructs in the type hierarchy, but no instance of such types exist in documents. For example, consider the Attr and Target types: >>> Attr Attr = (Text, [Text], [(Text, Text)]) >>> Target Target = (Text, Text) They are pandoc types which are not data types but typedefs: >>> issubclass ( Attr , Type ) True >>> issubclass ( Attr , Data ) False >>> issubclass ( Attr , TypeDef ) True >>> issubclass ( Target , Type ) True >>> issubclass ( Target , Data ) False >>> issubclass ( Target , TypeDef ) True They enable more compact and readable types signatures. For example, with typedefs, the Link signature is: >>> Link Link(Attr, [Inline], Target) instead of Link((Text, [Text], [(Text, Text)]), [Inline], (Text, Text)) without them. To mimick closely the original Haskell type hierarchy, we also define aliases for some Python primitive types. For example, the Text type used in the Str data constructor is not a custom Pandoc type: >>> Str Str(Text) >>> issubclass ( Text , Type ) False Instead, it's a mere alias for the builtin Python string: >>> Text <class 'str'> A document model represents a given document. The document meta-model represents the document model itself, i.e. the set of all valid documents. \u21a9","title":"Kinds of Types"},{"location":"examples/","text":"Examples \u00b6 import pandoc from pandoc.types import * Uppercase \u00b6 \ud83d\ude80 Change all text to upper case. def uppercase ( doc ): for elt in pandoc . iter ( doc ): if isinstance ( elt , Str ): elt [ 0 ] = elt [ 0 ] . upper () # elt: Str(Text) >>> doc = pandoc . read ( \"Hello world!\" ) >>> uppercase ( doc ) >>> print ( pandoc . write ( doc ) . strip ()) HELLO WORLD! De-emphasize \u00b6 \ud83d\ude80 Turn emphasized text into normal text. def de_emphasize ( doc ): locations = [] for elt , path in pandoc . iter ( doc , path = True ): if isinstance ( elt , Emph ): holder , index = path [ - 1 ] locations . append (( elt , holder , index )) # Perform the change in reverse document order # not to invalidate the remaining matches. for elt , holder , index in reversed ( locations ): assert isinstance ( elt , Emph ) inlines = elt [ 0 ] # elt: Emph([Inline]) holder [ index : index + 1 ] = inlines >>> doc = pandoc . read ( \"**strong**, *emphasized*, normal\" ) >>> de_emphasize ( doc ) >>> print ( pandoc . write ( doc ) . strip ()) **strong**, emphasized, normal This implementation will remove nested layers of emphasis: >>> doc = pandoc . read ( \"0x _1x *2x*_\" ) >>> de_emphasize ( doc ) >>> print ( pandoc . write ( doc ) . strip ()) 0x 1x 2x To remove only one layer of emphasis instead (the outer layer), we can filter out all elements that are already emphasized. from math import inf def de_emphasize ( doc ): locations = [] depth = inf for elt , path in pandoc . iter ( doc , path = True ): if len ( path ) <= depth : # not emphasized depth = inf if isinstance ( elt , Emph ): holder , index = path [ - 1 ] locations . append (( elt , holder , index )) depth = len ( path ) # Perform the change in reverse document order # not to invalidate the remaining matches. for elt , holder , index in reversed ( locations ): assert isinstance ( elt , Emph ) inlines = elt [ 0 ] # elt: Emph([Inline]) holder [ index : index + 1 ] = inlines The behavior with simply emphasized items is unchanged: >>> doc = pandoc . read ( \"**strong**, *emphasized*, normal\" ) >>> de_emphasize ( doc ) >>> print ( pandoc . write ( doc ) . strip ()) **strong**, emphasized, normal but differs for multiply emphasized text: >>> doc = pandoc . read ( \"0x _1x *2x*_\" ) >>> de_emphasize ( doc ) >>> print ( pandoc . write ( doc ) . strip ()) 0x 1x *2x* LaTeX theorems \u00b6 \ud83d\ude80 Convert divs tagged as theorems into LaTeX theorems. First we need to detect this kind of divs: def is_theorem ( elt ): if isinstance ( elt , Div ): attrs = elt [ 0 ] # elt: Div(Attr, [Block]) classes = attrs [ 1 ] # attrs: (Text, [Text], [(Text, Text)]) if \"theorem\" in classes : return True return False Or equivalenty, with Python 3.10 (or newer), using pattern matching: def is_theorem ( elt ): match elt : case Div (( _ , classes , _ ), _ ) if \"theorem\" in classes : return True case _ : return False Now we can implement the transformation itself: def LaTeX ( text ): return RawBlock ( Format ( \"latex\" ), text ) def theoremize ( doc ): for elt in pandoc . iter ( doc ): if is_theorem ( elt ): attr , blocks = elt # elt: Div(Attr, [Block]) id_ = attr [ 0 ] # attrs: (Text, [Text], [(Text, Text)]) label = r \"\\label{\" + id_ + \"}\" if id_ else \"\" start_theorem = LaTeX ( r '\\begin {theorem} ' + label ) end_theorem = LaTeX ( r '\\end {theorem} ' ) blocks [:] = [ start_theorem ] + blocks + [ end_theorem ] Here are the results: markdown = r \"\"\" <div id='cauchy-formula' class='theorem'> $$f(z) = \\frac {1} {i2\\pi} \\int \\frac{f(w)}{w-z}\\, dw$$ </div> \"\"\" >>> doc = pandoc . read ( markdown ) >>> print ( pandoc . write ( doc , format = \"latex\" )) # doctest: +NORMALIZE_WHITESPACE \\leavevmode\\vadjust pre{\\hypertarget{cauchy-formula}{}}% \\[f(z) = \\frac{1}{i2\\pi} \\int \\frac{f(w)}{w-z}\\, dw\\] >>> theoremize ( doc ) >>> print ( pandoc . write ( doc , format = \"latex\" )) # doctest: +NORMALIZE_WHITESPACE \\hypertarget{cauchy-formula}{} \\begin{theorem}\\label{cauchy-formula} \\[f(z) = \\frac{1}{i2\\pi} \\int \\frac{f(w)}{w-z}\\, dw\\] \\end{theorem} Jupyter Notebooks \u00b6 \ud83d\ude80 Transform a markdown document into a Jupyter notebook. \ud83d\udcd6 Reference: the notebook file format Jupyter notebook helpers (building blocks): import copy import uuid def Notebook (): return { \"nbformat\" : 4 , \"nbformat_minor\" : 5 , \"cells\" : [], \"metadata\" : {}, } def CodeCell (): return { \"cell_type\" : \"code\" , \"source\" : [], \"execution_count\" : None , \"outputs\" : [], \"id\" : uuid . uuid4 () . hex , \"metadata\" : {}, } def MarkdownCell (): return { \"cell_type\" : \"markdown\" , \"source\" : [], \"id\" : uuid . uuid4 () . hex , \"metadata\" : {}, } The core transformation code: def notebookify ( doc ): notebook = Notebook () cells = notebook [ \"cells\" ] blocks = doc [ 1 ] # doc: Pandoc(Meta, [Block]) for block in blocks : source , cell = None , None if isinstance ( block , CodeBlock ): source = block [ 1 ] # block: CodeBlock(Attr, Text) cell = CodeCell () else : source = pandoc . write ( block ) . strip () cell = MarkdownCell () cell [ \"source\" ] = source . splitlines ( keepends = True ) cells . append ( cell ) return notebook markdown = \"\"\" # Hello world! Print `Hello world!`: >>> print(\"Hello world!\") \"\"\" doc = pandoc . read ( markdown ) >>> doc Pandoc(Meta({}), [Header(1, ('hello-world', [], []), [Str('Hello'), Space(), Str('world!')]), Para([Str('Print'), Space(), Code(('', [], []), 'Hello world!'), Str(':')]), CodeBlock(('', [], []), '>>> print(\"Hello world!\")')]) >>> ipynb = notebookify ( doc ) >>> import pprint >>> pprint . pprint ( ipynb ) # doctest: +ELLIPSIS {'cells': [{'cell_type': 'markdown', 'id': ..., 'metadata': {}, 'source': ['# Hello world!']}, {'cell_type': 'markdown', 'id': ..., 'metadata': {}, 'source': ['Print `Hello world!`:']}, {'cell_type': 'code', 'execution_count': None, 'id': ..., 'metadata': {}, 'outputs': [], 'source': ['>>> print(\"Hello world!\")']}], 'metadata': {}, 'nbformat': 4, 'nbformat_minor': 5} To use notebookify from the command-line we may create a main entry point: import json from pathlib import Path import sys def main (): filename = sys . argv [ 1 ] doc = pandoc . read ( file = filename ) notebook = notebookify ( doc ) ipynb = Path ( filename ) . with_suffix ( \".ipynb\" ) with open ( ipynb , \"w\" , encoding = \"utf-8\" ) as output : json . dump ( notebook , output , ensure_ascii = False , indent = 2 ) If we specify on the command-line a (temporary) markdown file, main() creates the corresponding notebook: >>> import tempfile >>> with tempfile . TemporaryDirectory () as tmp_dir : # doctest: +ELLIPSIS ... md_path = Path ( tmp_dir ) . joinpath ( \"doc.md\" ) ... with open ( md_path , \"w\" , encoding = \"utf-8\" ) as md_file : ... _ = md_file . write ( markdown ) ... sys . argv [:] = [ \"notebookify\" , str ( md_path )] ... main () ... with open ( md_path . with_suffix ( \".ipynb\" ), encoding = \"utf-8\" ) as ipynb : ... pprint . pprint ( json . load ( ipynb )) {'cells': [{'cell_type': 'markdown', 'id': ..., 'metadata': {}, 'source': ['# Hello world!']}, {'cell_type': 'markdown', 'id': ..., 'metadata': {}, 'source': ['Print `Hello world!`:']}, {'cell_type': 'code', 'execution_count': None, 'id': ..., 'metadata': {}, 'outputs': [], 'source': ['>>> print(\"Hello world!\")']}], 'metadata': {}, 'nbformat': 4, 'nbformat_minor': 5}","title":"Examples"},{"location":"examples/#examples","text":"import pandoc from pandoc.types import *","title":"Examples"},{"location":"examples/#uppercase","text":"\ud83d\ude80 Change all text to upper case. def uppercase ( doc ): for elt in pandoc . iter ( doc ): if isinstance ( elt , Str ): elt [ 0 ] = elt [ 0 ] . upper () # elt: Str(Text) >>> doc = pandoc . read ( \"Hello world!\" ) >>> uppercase ( doc ) >>> print ( pandoc . write ( doc ) . strip ()) HELLO WORLD!","title":"Uppercase"},{"location":"examples/#de-emphasize","text":"\ud83d\ude80 Turn emphasized text into normal text. def de_emphasize ( doc ): locations = [] for elt , path in pandoc . iter ( doc , path = True ): if isinstance ( elt , Emph ): holder , index = path [ - 1 ] locations . append (( elt , holder , index )) # Perform the change in reverse document order # not to invalidate the remaining matches. for elt , holder , index in reversed ( locations ): assert isinstance ( elt , Emph ) inlines = elt [ 0 ] # elt: Emph([Inline]) holder [ index : index + 1 ] = inlines >>> doc = pandoc . read ( \"**strong**, *emphasized*, normal\" ) >>> de_emphasize ( doc ) >>> print ( pandoc . write ( doc ) . strip ()) **strong**, emphasized, normal This implementation will remove nested layers of emphasis: >>> doc = pandoc . read ( \"0x _1x *2x*_\" ) >>> de_emphasize ( doc ) >>> print ( pandoc . write ( doc ) . strip ()) 0x 1x 2x To remove only one layer of emphasis instead (the outer layer), we can filter out all elements that are already emphasized. from math import inf def de_emphasize ( doc ): locations = [] depth = inf for elt , path in pandoc . iter ( doc , path = True ): if len ( path ) <= depth : # not emphasized depth = inf if isinstance ( elt , Emph ): holder , index = path [ - 1 ] locations . append (( elt , holder , index )) depth = len ( path ) # Perform the change in reverse document order # not to invalidate the remaining matches. for elt , holder , index in reversed ( locations ): assert isinstance ( elt , Emph ) inlines = elt [ 0 ] # elt: Emph([Inline]) holder [ index : index + 1 ] = inlines The behavior with simply emphasized items is unchanged: >>> doc = pandoc . read ( \"**strong**, *emphasized*, normal\" ) >>> de_emphasize ( doc ) >>> print ( pandoc . write ( doc ) . strip ()) **strong**, emphasized, normal but differs for multiply emphasized text: >>> doc = pandoc . read ( \"0x _1x *2x*_\" ) >>> de_emphasize ( doc ) >>> print ( pandoc . write ( doc ) . strip ()) 0x 1x *2x*","title":"De-emphasize"},{"location":"examples/#latex-theorems","text":"\ud83d\ude80 Convert divs tagged as theorems into LaTeX theorems. First we need to detect this kind of divs: def is_theorem ( elt ): if isinstance ( elt , Div ): attrs = elt [ 0 ] # elt: Div(Attr, [Block]) classes = attrs [ 1 ] # attrs: (Text, [Text], [(Text, Text)]) if \"theorem\" in classes : return True return False Or equivalenty, with Python 3.10 (or newer), using pattern matching: def is_theorem ( elt ): match elt : case Div (( _ , classes , _ ), _ ) if \"theorem\" in classes : return True case _ : return False Now we can implement the transformation itself: def LaTeX ( text ): return RawBlock ( Format ( \"latex\" ), text ) def theoremize ( doc ): for elt in pandoc . iter ( doc ): if is_theorem ( elt ): attr , blocks = elt # elt: Div(Attr, [Block]) id_ = attr [ 0 ] # attrs: (Text, [Text], [(Text, Text)]) label = r \"\\label{\" + id_ + \"}\" if id_ else \"\" start_theorem = LaTeX ( r '\\begin {theorem} ' + label ) end_theorem = LaTeX ( r '\\end {theorem} ' ) blocks [:] = [ start_theorem ] + blocks + [ end_theorem ] Here are the results: markdown = r \"\"\" <div id='cauchy-formula' class='theorem'> $$f(z) = \\frac {1} {i2\\pi} \\int \\frac{f(w)}{w-z}\\, dw$$ </div> \"\"\" >>> doc = pandoc . read ( markdown ) >>> print ( pandoc . write ( doc , format = \"latex\" )) # doctest: +NORMALIZE_WHITESPACE \\leavevmode\\vadjust pre{\\hypertarget{cauchy-formula}{}}% \\[f(z) = \\frac{1}{i2\\pi} \\int \\frac{f(w)}{w-z}\\, dw\\] >>> theoremize ( doc ) >>> print ( pandoc . write ( doc , format = \"latex\" )) # doctest: +NORMALIZE_WHITESPACE \\hypertarget{cauchy-formula}{} \\begin{theorem}\\label{cauchy-formula} \\[f(z) = \\frac{1}{i2\\pi} \\int \\frac{f(w)}{w-z}\\, dw\\] \\end{theorem}","title":"LaTeX theorems"},{"location":"examples/#jupyter-notebooks","text":"\ud83d\ude80 Transform a markdown document into a Jupyter notebook. \ud83d\udcd6 Reference: the notebook file format Jupyter notebook helpers (building blocks): import copy import uuid def Notebook (): return { \"nbformat\" : 4 , \"nbformat_minor\" : 5 , \"cells\" : [], \"metadata\" : {}, } def CodeCell (): return { \"cell_type\" : \"code\" , \"source\" : [], \"execution_count\" : None , \"outputs\" : [], \"id\" : uuid . uuid4 () . hex , \"metadata\" : {}, } def MarkdownCell (): return { \"cell_type\" : \"markdown\" , \"source\" : [], \"id\" : uuid . uuid4 () . hex , \"metadata\" : {}, } The core transformation code: def notebookify ( doc ): notebook = Notebook () cells = notebook [ \"cells\" ] blocks = doc [ 1 ] # doc: Pandoc(Meta, [Block]) for block in blocks : source , cell = None , None if isinstance ( block , CodeBlock ): source = block [ 1 ] # block: CodeBlock(Attr, Text) cell = CodeCell () else : source = pandoc . write ( block ) . strip () cell = MarkdownCell () cell [ \"source\" ] = source . splitlines ( keepends = True ) cells . append ( cell ) return notebook markdown = \"\"\" # Hello world! Print `Hello world!`: >>> print(\"Hello world!\") \"\"\" doc = pandoc . read ( markdown ) >>> doc Pandoc(Meta({}), [Header(1, ('hello-world', [], []), [Str('Hello'), Space(), Str('world!')]), Para([Str('Print'), Space(), Code(('', [], []), 'Hello world!'), Str(':')]), CodeBlock(('', [], []), '>>> print(\"Hello world!\")')]) >>> ipynb = notebookify ( doc ) >>> import pprint >>> pprint . pprint ( ipynb ) # doctest: +ELLIPSIS {'cells': [{'cell_type': 'markdown', 'id': ..., 'metadata': {}, 'source': ['# Hello world!']}, {'cell_type': 'markdown', 'id': ..., 'metadata': {}, 'source': ['Print `Hello world!`:']}, {'cell_type': 'code', 'execution_count': None, 'id': ..., 'metadata': {}, 'outputs': [], 'source': ['>>> print(\"Hello world!\")']}], 'metadata': {}, 'nbformat': 4, 'nbformat_minor': 5} To use notebookify from the command-line we may create a main entry point: import json from pathlib import Path import sys def main (): filename = sys . argv [ 1 ] doc = pandoc . read ( file = filename ) notebook = notebookify ( doc ) ipynb = Path ( filename ) . with_suffix ( \".ipynb\" ) with open ( ipynb , \"w\" , encoding = \"utf-8\" ) as output : json . dump ( notebook , output , ensure_ascii = False , indent = 2 ) If we specify on the command-line a (temporary) markdown file, main() creates the corresponding notebook: >>> import tempfile >>> with tempfile . TemporaryDirectory () as tmp_dir : # doctest: +ELLIPSIS ... md_path = Path ( tmp_dir ) . joinpath ( \"doc.md\" ) ... with open ( md_path , \"w\" , encoding = \"utf-8\" ) as md_file : ... _ = md_file . write ( markdown ) ... sys . argv [:] = [ \"notebookify\" , str ( md_path )] ... main () ... with open ( md_path . with_suffix ( \".ipynb\" ), encoding = \"utf-8\" ) as ipynb : ... pprint . pprint ( json . load ( ipynb )) {'cells': [{'cell_type': 'markdown', 'id': ..., 'metadata': {}, 'source': ['# Hello world!']}, {'cell_type': 'markdown', 'id': ..., 'metadata': {}, 'source': ['Print `Hello world!`:']}, {'cell_type': 'code', 'execution_count': None, 'id': ..., 'metadata': {}, 'outputs': [], 'source': ['>>> print(\"Hello world!\")']}], 'metadata': {}, 'nbformat': 4, 'nbformat_minor': 5}","title":"Jupyter Notebooks"},{"location":"getting-started/","text":"Getting started \u00b6 The Pandoc command-line tool needs to be available. You may follow the official installation instructions which are OS-dependent, or if you are a conda user, do $ conda install -c conda-forge pandoc Then, install the latest stable version of the pandoc Python library with pip: $ pip install --upgrade pandoc","title":"Getting started"},{"location":"getting-started/#getting-started","text":"The Pandoc command-line tool needs to be available. You may follow the official installation instructions which are OS-dependent, or if you are a conda user, do $ conda install -c conda-forge pandoc Then, install the latest stable version of the pandoc Python library with pip: $ pip install --upgrade pandoc","title":"Getting started"},{"location":"iteration/","text":"Containers and iteration \u00b6 import pandoc from pandoc.types import * Container \u00b6 All concrete 1 Pandoc element (of type Pandoc , Para , Str , etc.) are list-like ; their items are the arguments passed to their constructor. We present here several familiar methods to access this content. We illustrate this interface with the \"Hello world!\" document: meta = Meta ({}) blocks = [ Para ([ Str ( 'Hello' ), Space (), Str ( 'world!' )])] doc = Pandoc ( meta , blocks ) Random access \u00b6 Indexing and slicing for this element work pretty much as in lists: >>> doc [ 0 ] Meta ({}) >>> doc [ 1 ] [ Para ([ Str ( 'Hello' ), Space (), Str ( 'world!' )])] >>> meta , blocks = doc [:] >>> meta Meta ({}) >>> blocks [ Para ([ Str ( 'Hello' ), Space (), Str ( 'world!' )])] The same patterns apply to change the element contents: >>> maths = [ Para ([ Math ( InlineMath (), 'a=1' )])] >>> doc [ 1 ] = maths >>> doc Pandoc(Meta({}), [Para([Math(InlineMath(), 'a=1')])]) >>> meta = Meta ({ 'title' : MetaInlines ([ Str ( 'Maths' )])}) >>> doc [:] = meta , maths >>> doc Pandoc(Meta({'title': MetaInlines([Str('Maths')])}), [Para([Math(InlineMath(), 'a=1')])]) Length \u00b6 The length of element is the number of items it contains. Here for doc , the meta and blocks arguments of its constructor: >>> len ( doc ) 2 >>> len ( doc ) == len ( doc [:]) True Equality \u00b6 Pandoc elements can be compared. The equality test checks for equality of type, then (recusively if needed) for equality of contents: >>> para = doc [ 1 ][ 0 ] >>> para == Para ([ Math ( InlineMath (), 'a=1' )]) True >>> para == Para ([ Math ( DisplayMath (), 'a=1' )]) False >>> para == Para ([ Math ( InlineMath (), 'a=2' )]) False Membership \u00b6 A membership test \u2013 that leverages the equality test \u2013 is also available: >>> Meta ({}) in doc False >>> Meta ({ 'title' : MetaInlines ([ Str ( 'Maths' )])}) in doc True Iteration \u00b6 All pandoc item can be iterated. Consider doc = pandoc . read ( \"Hello world!\" ) We have: >>> for elt in doc : ... print ( elt ) Meta({}) [Para([Str('Hello'), Space(), Str('world!')])] >>> meta , blocks = doc [:] >>> for elt in meta : ... print ( elt ) {} >>> para = blocks [ 0 ] >>> for elt in para : ... print ( elt ) [Str('Hello'), Space(), Str('world!')] >>> world = para [ 0 ][ 2 ] >>> for elt in world : ... print ( elt ) world! Pattern matching \u00b6 With Python 3.10 (or newer), pattern matching can be used for every Pandoc element: >>> doc = pandoc . read ( \"Hello world!\" ) >>> match doc : ... case Pandoc ( Meta ( meta ), [ Para ( inlines )]): ... assert meta == {} ... print ( inlines ) [Str('Hello'), Space(), Str('world!')] Tree Iteration \u00b6 Depth-first traversal \u00b6 Python's built-in iter \u2013 which is used implicitly in the for loops \u2013 yields the children of the pandoc element, that is the arguments that were given to its constructor ; it is non-recursive: the contents of these children are not explored. On the contrary, pandoc.iter iterates a pandoc item recursively, in document order. It performs a (preoder) depth-first traversal: the iteration first yields the element given as argument to pandoc.iter (the root), then its first child (if any), then the first child of this child (if any), etc. recursively, before it yields the second child of the root (if any), then the first child of this child, etc. For example, with the following document >>> doc = pandoc . read ( \"\"\" ... # Title ... Content ... \"\"\" ) >>> doc Pandoc(Meta({}), [Header(1, ('title', [], []), [Str('Title')]), Para([Str('Content')])]) we have on one hand >>> for elt in iter ( doc ): ... print ( elt ) Meta({}) [Header(1, ('title', [], []), [Str('Title')]), Para([Str('Content')])] and on the other hand >>> for elt in pandoc . iter ( doc ): ... print ( elt ) Pandoc(Meta({}), [Header(1, ('title', [], []), [Str('Title')]), Para([Str('Content')])]) Meta({}) {} [Header(1, ('title', [], []), [Str('Title')]), Para([Str('Content')])] Header(1, ('title', [], []), [Str('Title')]) 1 ('title', [], []) title [] [] [Str('Title')] Str('Title') Title Para([Str('Content')]) [Str('Content')] Str('Content') Content Python built-in types \u00b6 Numbers \u00b6 Tree iteration can be applied to Python builts-in types, including those which are not usually considered containers and thus are not iterable with the built-in iter function. The Bool , Int and Double primitive types (that is bool , int and float ) fall in this case: >>> assert isinstance ( True , Bool ) >>> iter ( True ) Traceback (most recent call last): ... TypeError : 'bool' object is not iterable >>> assert isinstance ( 1 , Int ) >>> iter ( 1 ) Traceback (most recent call last): ... TypeError : 'int' object is not iterable >>> assert isinstance ( 3.14 , Double ) >>> iter ( 3.14 ) Traceback (most recent call last): ... TypeError : 'float' object is not iterable Since these elements have no child, tree iteration will only yield the elements themselves: >>> for elt in pandoc . iter ( True ): ... print ( elt ) True >>> for elt in pandoc . iter ( 1 ): ... print ( elt ) 1 >>> for elt in pandoc . iter ( 3.14 ): ... print ( elt ) 3.14 Strings \u00b6 Python strings are iterable, but in the context of tree iteration, we consider them as atomic objects like booleans, integers and doubles. Thus pandoc.iter will not iterate on characters like the built-in iter function: >>> isinstance ( \"Hello!\" , Text ) True >>> for elt in \"Hello!\" : ... print ( elt ) H e l l o ! >>> for elt in pandoc . iter ( \"Hello!\" ): ... print ( elt ) Hello! Tuples, lists, dicts \u00b6 Tree iteration for tuples holds no surprise: >>> elts = ( 1 , ( 2 , 3 )) >>> for elt in elts : ... print ( elt ) 1 (2, 3) >>> for elt in pandoc . iter ( elts ): ... print ( elt ) (1, (2, 3)) 1 (2, 3) 2 3 List iteration is very similar: >>> elts = [ 1 , [ 2 , 3 ]] >>> for elt in elts : ... print ( elt ) 1 [2, 3] >>> for elt in pandoc . iter ( elts ): ... print ( elt ) [1, [2, 3]] 1 [2, 3] 2 3 For maps/dicts, tree iteration combine recursivity and iteration on key-value pairs, while standard iteration is flat and iterates on keys only. In other words, tree iteration adds recursivity to the dict items iterator: >>> elts = { \"a\" : True , \"b\" : [ 1 , 2 ]} >>> for elt in elts : ... print ( elt ) a b >>> for elt in elts . items (): ... print ( elt ) ('a', True) ('b', [1, 2]) >>> for elt in pandoc . iter ( elts ): ... print ( elt ) {'a': True, 'b': [1, 2]} ('a', True) a True ('b', [1, 2]) b [1, 2] 1 2 Path \u00b6 Principles \u00b6 The function pandoc.iter accepts an optional boolean argument path . When it is set to True , the iteration returns elt, path pairs. In this pair, elt is equal to what the iteration with path set to False would have yielded and path contains additional information about the location of elt in the iteration root. Path is a list of (holder, i) pairs which is not empty unless elt is root and such that: the first holder in the path is the root of the iteration, the i-th item in holder is the next holder in the path ... or elt if we are at the end of the path. Here i-th item in holder should be understood as holder[i] unless holder is a dict. In this special case, it would be its i-th key-value pair: def getitem ( elt , i ): if isinstance ( elt , dict ): elt = elt . items () return elt [ i ] In any case, the following assertion is always valid: def check ( root , elt , path ): if path == []: assert elt is root else : assert path [ 0 ][ 0 ] is root for i , ( holder , index ) in enumerate ( path ): next_elt = getitem ( holder , index ) if i < len ( path ) - 1 : assert next_elt is path [ i + 1 ][ 0 ] else : assert next_elt is elt And indeed, if we consider the following document: doc = pandoc . read ( \"\"\" # Title Content \"\"\" ) the check works at any level: >>> for elt , path in pandoc . iter ( doc , path = True ): ... check ( doc , elt , path ) Use cases \u00b6 The length of path provides the depth of elt with respect to the root: >>> for elt , path in pandoc . iter ( doc , path = True ): ... print ( f \" { len ( path ) } - { elt !r} \" ) 0 - Pandoc(Meta({}), [Header(1, ('title', [], []), [Str('Title')]), Para([Str('Content')])]) 1 - Meta({}) 2 - {} 1 - [Header(1, ('title', [], []), [Str('Title')]), Para([Str('Content')])] 2 - Header(1, ('title', [], []), [Str('Title')]) 3 - 1 3 - ('title', [], []) 4 - 'title' 4 - [] 4 - [] 3 - [Str('Title')] 4 - Str('Title') 5 - 'Title' 2 - Para([Str('Content')]) 3 - [Str('Content')] 4 - Str('Content') 5 - 'Content' The latest item of path provides the parent of the current element and its index in this parent: >>> for elt , path in pandoc . iter ( doc , path = True ): ... try : ... holder , index = path [ - 1 ] ... print ( f \" { elt !r} == { holder !r} [ { index } ]\" ) ... except IndexError : ... assert elt is doc Meta({}) == Pandoc(Meta({}), [Header(1, ('title', [], []), [Str('Title')]), Para([Str('Content')])])[0] {} == Meta({})[0] [Header(1, ('title', [], []), [Str('Title')]), Para([Str('Content')])] == Pandoc(Meta({}), [Header(1, ('title', [], []), [Str('Title')]), Para([Str('Content')])])[1] Header(1, ('title', [], []), [Str('Title')]) == [Header(1, ('title', [], []), [Str('Title')]), Para([Str('Content')])][0] 1 == Header(1, ('title', [], []), [Str('Title')])[0] ('title', [], []) == Header(1, ('title', [], []), [Str('Title')])[1] 'title' == ('title', [], [])[0] [] == ('title', [], [])[1] [] == ('title', [], [])[2] [Str('Title')] == Header(1, ('title', [], []), [Str('Title')])[2] Str('Title') == [Str('Title')][0] 'Title' == Str('Title')[0] Para([Str('Content')]) == [Header(1, ('title', [], []), [Str('Title')]), Para([Str('Content')])][1] [Str('Content')] == Para([Str('Content')])[0] Str('Content') == [Str('Content')][0] 'Content' == Str('Content')[0] Grand-parents are available in the previous path items, all the way up to the root, allowing us to locate the current element with respect to the root if needed: >>> for elt , path in pandoc . iter ( doc , path = True ): ... indices = [ i for holder , i in path ] ... z = \"\" . join ( f \"[ { i } ]\" for i in indices ) ... print ( f \"doc { z } == { elt !r} \" ) doc == Pandoc(Meta({}), [Header(1, ('title', [], []), [Str('Title')]), Para([Str('Content')])]) doc[0] == Meta({}) doc[0][0] == {} doc[1] == [Header(1, ('title', [], []), [Str('Title')]), Para([Str('Content')])] doc[1][0] == Header(1, ('title', [], []), [Str('Title')]) doc[1][0][0] == 1 doc[1][0][1] == ('title', [], []) doc[1][0][1][0] == 'title' doc[1][0][1][1] == [] doc[1][0][1][2] == [] doc[1][0][2] == [Str('Title')] doc[1][0][2][0] == Str('Title') doc[1][0][2][0][0] == 'Title' doc[1][1] == Para([Str('Content')]) doc[1][1][0] == [Str('Content')] doc[1][1][0][0] == Str('Content') doc[1][1][0][0][0] == 'Content' any custom pandoc type that can be instantiated. If needed, refer to the kind of types section of the documentation for additional explanations. \u21a9","title":"Containers and iteration"},{"location":"iteration/#containers-and-iteration","text":"import pandoc from pandoc.types import *","title":"Containers and iteration"},{"location":"iteration/#container","text":"All concrete 1 Pandoc element (of type Pandoc , Para , Str , etc.) are list-like ; their items are the arguments passed to their constructor. We present here several familiar methods to access this content. We illustrate this interface with the \"Hello world!\" document: meta = Meta ({}) blocks = [ Para ([ Str ( 'Hello' ), Space (), Str ( 'world!' )])] doc = Pandoc ( meta , blocks )","title":"Container"},{"location":"iteration/#random-access","text":"Indexing and slicing for this element work pretty much as in lists: >>> doc [ 0 ] Meta ({}) >>> doc [ 1 ] [ Para ([ Str ( 'Hello' ), Space (), Str ( 'world!' )])] >>> meta , blocks = doc [:] >>> meta Meta ({}) >>> blocks [ Para ([ Str ( 'Hello' ), Space (), Str ( 'world!' )])] The same patterns apply to change the element contents: >>> maths = [ Para ([ Math ( InlineMath (), 'a=1' )])] >>> doc [ 1 ] = maths >>> doc Pandoc(Meta({}), [Para([Math(InlineMath(), 'a=1')])]) >>> meta = Meta ({ 'title' : MetaInlines ([ Str ( 'Maths' )])}) >>> doc [:] = meta , maths >>> doc Pandoc(Meta({'title': MetaInlines([Str('Maths')])}), [Para([Math(InlineMath(), 'a=1')])])","title":"Random access"},{"location":"iteration/#length","text":"The length of element is the number of items it contains. Here for doc , the meta and blocks arguments of its constructor: >>> len ( doc ) 2 >>> len ( doc ) == len ( doc [:]) True","title":"Length"},{"location":"iteration/#equality","text":"Pandoc elements can be compared. The equality test checks for equality of type, then (recusively if needed) for equality of contents: >>> para = doc [ 1 ][ 0 ] >>> para == Para ([ Math ( InlineMath (), 'a=1' )]) True >>> para == Para ([ Math ( DisplayMath (), 'a=1' )]) False >>> para == Para ([ Math ( InlineMath (), 'a=2' )]) False","title":"Equality"},{"location":"iteration/#membership","text":"A membership test \u2013 that leverages the equality test \u2013 is also available: >>> Meta ({}) in doc False >>> Meta ({ 'title' : MetaInlines ([ Str ( 'Maths' )])}) in doc True","title":"Membership"},{"location":"iteration/#iteration","text":"All pandoc item can be iterated. Consider doc = pandoc . read ( \"Hello world!\" ) We have: >>> for elt in doc : ... print ( elt ) Meta({}) [Para([Str('Hello'), Space(), Str('world!')])] >>> meta , blocks = doc [:] >>> for elt in meta : ... print ( elt ) {} >>> para = blocks [ 0 ] >>> for elt in para : ... print ( elt ) [Str('Hello'), Space(), Str('world!')] >>> world = para [ 0 ][ 2 ] >>> for elt in world : ... print ( elt ) world!","title":"Iteration"},{"location":"iteration/#pattern-matching","text":"With Python 3.10 (or newer), pattern matching can be used for every Pandoc element: >>> doc = pandoc . read ( \"Hello world!\" ) >>> match doc : ... case Pandoc ( Meta ( meta ), [ Para ( inlines )]): ... assert meta == {} ... print ( inlines ) [Str('Hello'), Space(), Str('world!')]","title":"Pattern matching"},{"location":"iteration/#tree-iteration","text":"","title":"Tree Iteration"},{"location":"iteration/#depth-first-traversal","text":"Python's built-in iter \u2013 which is used implicitly in the for loops \u2013 yields the children of the pandoc element, that is the arguments that were given to its constructor ; it is non-recursive: the contents of these children are not explored. On the contrary, pandoc.iter iterates a pandoc item recursively, in document order. It performs a (preoder) depth-first traversal: the iteration first yields the element given as argument to pandoc.iter (the root), then its first child (if any), then the first child of this child (if any), etc. recursively, before it yields the second child of the root (if any), then the first child of this child, etc. For example, with the following document >>> doc = pandoc . read ( \"\"\" ... # Title ... Content ... \"\"\" ) >>> doc Pandoc(Meta({}), [Header(1, ('title', [], []), [Str('Title')]), Para([Str('Content')])]) we have on one hand >>> for elt in iter ( doc ): ... print ( elt ) Meta({}) [Header(1, ('title', [], []), [Str('Title')]), Para([Str('Content')])] and on the other hand >>> for elt in pandoc . iter ( doc ): ... print ( elt ) Pandoc(Meta({}), [Header(1, ('title', [], []), [Str('Title')]), Para([Str('Content')])]) Meta({}) {} [Header(1, ('title', [], []), [Str('Title')]), Para([Str('Content')])] Header(1, ('title', [], []), [Str('Title')]) 1 ('title', [], []) title [] [] [Str('Title')] Str('Title') Title Para([Str('Content')]) [Str('Content')] Str('Content') Content","title":"Depth-first traversal"},{"location":"iteration/#python-built-in-types","text":"","title":"Python built-in types"},{"location":"iteration/#numbers","text":"Tree iteration can be applied to Python builts-in types, including those which are not usually considered containers and thus are not iterable with the built-in iter function. The Bool , Int and Double primitive types (that is bool , int and float ) fall in this case: >>> assert isinstance ( True , Bool ) >>> iter ( True ) Traceback (most recent call last): ... TypeError : 'bool' object is not iterable >>> assert isinstance ( 1 , Int ) >>> iter ( 1 ) Traceback (most recent call last): ... TypeError : 'int' object is not iterable >>> assert isinstance ( 3.14 , Double ) >>> iter ( 3.14 ) Traceback (most recent call last): ... TypeError : 'float' object is not iterable Since these elements have no child, tree iteration will only yield the elements themselves: >>> for elt in pandoc . iter ( True ): ... print ( elt ) True >>> for elt in pandoc . iter ( 1 ): ... print ( elt ) 1 >>> for elt in pandoc . iter ( 3.14 ): ... print ( elt ) 3.14","title":"Numbers"},{"location":"iteration/#strings","text":"Python strings are iterable, but in the context of tree iteration, we consider them as atomic objects like booleans, integers and doubles. Thus pandoc.iter will not iterate on characters like the built-in iter function: >>> isinstance ( \"Hello!\" , Text ) True >>> for elt in \"Hello!\" : ... print ( elt ) H e l l o ! >>> for elt in pandoc . iter ( \"Hello!\" ): ... print ( elt ) Hello!","title":"Strings"},{"location":"iteration/#tuples-lists-dicts","text":"Tree iteration for tuples holds no surprise: >>> elts = ( 1 , ( 2 , 3 )) >>> for elt in elts : ... print ( elt ) 1 (2, 3) >>> for elt in pandoc . iter ( elts ): ... print ( elt ) (1, (2, 3)) 1 (2, 3) 2 3 List iteration is very similar: >>> elts = [ 1 , [ 2 , 3 ]] >>> for elt in elts : ... print ( elt ) 1 [2, 3] >>> for elt in pandoc . iter ( elts ): ... print ( elt ) [1, [2, 3]] 1 [2, 3] 2 3 For maps/dicts, tree iteration combine recursivity and iteration on key-value pairs, while standard iteration is flat and iterates on keys only. In other words, tree iteration adds recursivity to the dict items iterator: >>> elts = { \"a\" : True , \"b\" : [ 1 , 2 ]} >>> for elt in elts : ... print ( elt ) a b >>> for elt in elts . items (): ... print ( elt ) ('a', True) ('b', [1, 2]) >>> for elt in pandoc . iter ( elts ): ... print ( elt ) {'a': True, 'b': [1, 2]} ('a', True) a True ('b', [1, 2]) b [1, 2] 1 2","title":"Tuples, lists, dicts"},{"location":"iteration/#path","text":"","title":"Path"},{"location":"iteration/#principles","text":"The function pandoc.iter accepts an optional boolean argument path . When it is set to True , the iteration returns elt, path pairs. In this pair, elt is equal to what the iteration with path set to False would have yielded and path contains additional information about the location of elt in the iteration root. Path is a list of (holder, i) pairs which is not empty unless elt is root and such that: the first holder in the path is the root of the iteration, the i-th item in holder is the next holder in the path ... or elt if we are at the end of the path. Here i-th item in holder should be understood as holder[i] unless holder is a dict. In this special case, it would be its i-th key-value pair: def getitem ( elt , i ): if isinstance ( elt , dict ): elt = elt . items () return elt [ i ] In any case, the following assertion is always valid: def check ( root , elt , path ): if path == []: assert elt is root else : assert path [ 0 ][ 0 ] is root for i , ( holder , index ) in enumerate ( path ): next_elt = getitem ( holder , index ) if i < len ( path ) - 1 : assert next_elt is path [ i + 1 ][ 0 ] else : assert next_elt is elt And indeed, if we consider the following document: doc = pandoc . read ( \"\"\" # Title Content \"\"\" ) the check works at any level: >>> for elt , path in pandoc . iter ( doc , path = True ): ... check ( doc , elt , path )","title":"Principles"},{"location":"iteration/#use-cases","text":"The length of path provides the depth of elt with respect to the root: >>> for elt , path in pandoc . iter ( doc , path = True ): ... print ( f \" { len ( path ) } - { elt !r} \" ) 0 - Pandoc(Meta({}), [Header(1, ('title', [], []), [Str('Title')]), Para([Str('Content')])]) 1 - Meta({}) 2 - {} 1 - [Header(1, ('title', [], []), [Str('Title')]), Para([Str('Content')])] 2 - Header(1, ('title', [], []), [Str('Title')]) 3 - 1 3 - ('title', [], []) 4 - 'title' 4 - [] 4 - [] 3 - [Str('Title')] 4 - Str('Title') 5 - 'Title' 2 - Para([Str('Content')]) 3 - [Str('Content')] 4 - Str('Content') 5 - 'Content' The latest item of path provides the parent of the current element and its index in this parent: >>> for elt , path in pandoc . iter ( doc , path = True ): ... try : ... holder , index = path [ - 1 ] ... print ( f \" { elt !r} == { holder !r} [ { index } ]\" ) ... except IndexError : ... assert elt is doc Meta({}) == Pandoc(Meta({}), [Header(1, ('title', [], []), [Str('Title')]), Para([Str('Content')])])[0] {} == Meta({})[0] [Header(1, ('title', [], []), [Str('Title')]), Para([Str('Content')])] == Pandoc(Meta({}), [Header(1, ('title', [], []), [Str('Title')]), Para([Str('Content')])])[1] Header(1, ('title', [], []), [Str('Title')]) == [Header(1, ('title', [], []), [Str('Title')]), Para([Str('Content')])][0] 1 == Header(1, ('title', [], []), [Str('Title')])[0] ('title', [], []) == Header(1, ('title', [], []), [Str('Title')])[1] 'title' == ('title', [], [])[0] [] == ('title', [], [])[1] [] == ('title', [], [])[2] [Str('Title')] == Header(1, ('title', [], []), [Str('Title')])[2] Str('Title') == [Str('Title')][0] 'Title' == Str('Title')[0] Para([Str('Content')]) == [Header(1, ('title', [], []), [Str('Title')]), Para([Str('Content')])][1] [Str('Content')] == Para([Str('Content')])[0] Str('Content') == [Str('Content')][0] 'Content' == Str('Content')[0] Grand-parents are available in the previous path items, all the way up to the root, allowing us to locate the current element with respect to the root if needed: >>> for elt , path in pandoc . iter ( doc , path = True ): ... indices = [ i for holder , i in path ] ... z = \"\" . join ( f \"[ { i } ]\" for i in indices ) ... print ( f \"doc { z } == { elt !r} \" ) doc == Pandoc(Meta({}), [Header(1, ('title', [], []), [Str('Title')]), Para([Str('Content')])]) doc[0] == Meta({}) doc[0][0] == {} doc[1] == [Header(1, ('title', [], []), [Str('Title')]), Para([Str('Content')])] doc[1][0] == Header(1, ('title', [], []), [Str('Title')]) doc[1][0][0] == 1 doc[1][0][1] == ('title', [], []) doc[1][0][1][0] == 'title' doc[1][0][1][1] == [] doc[1][0][1][2] == [] doc[1][0][2] == [Str('Title')] doc[1][0][2][0] == Str('Title') doc[1][0][2][0][0] == 'Title' doc[1][1] == Para([Str('Content')]) doc[1][1][0] == [Str('Content')] doc[1][1][0][0] == Str('Content') doc[1][1][0][0][0] == 'Content' any custom pandoc type that can be instantiated. If needed, refer to the kind of types section of the documentation for additional explanations. \u21a9","title":"Use cases"},{"location":"labs/","text":"Labs \ud83e\uddea \u00b6 Warning The pandoc.labs module is an experiment ; its interface is highly unstable. Don't build anything serious on top of it! import pandoc from pandoc.types import * from pandoc.labs import * HELLOWORLD_DOC = pandoc . read ( \"Hello world!\" ) from urllib.request import urlopen PATH = \"raw.githubusercontent.com/commonmark/commonmark-spec\" HASH = \"499ebbad90163881f51498c4c620652d0c66fb2e\" # pinned version URL = f \"https:// { PATH } / { HASH } /spec.txt\" COMMONMARK_SPEC = urlopen ( URL ) . read () . decode ( \"utf-8\" ) COMMONMARK_DOC = pandoc . read ( COMMONMARK_SPEC ) >>> HELLOWORLD_DOC Pandoc ( Meta ({}), [ Para ([ Str ( 'Hello' ), Space (), Str ( 'world!' )])]) >>> query ( HELLOWORLD_DOC ) - Pandoc ( Meta ({}), [ Para ([ Str ( 'Hello' ), Space (), Str ( 'world!' )])]) TODO. Explain what query does: a collection which stores single or multiple document elements on which parallel operations can be applied and that \"automagically\" know their location within the root document. Also \"no-failure\" flavor (operations don't fail, they return the empty collection) >>> q = query ( HELLOWORLD_DOC ) >>> isinstance ( q , Query ) True TODO: consider a change of name for Query : Results , Match , Collection , etc? At this stage, the query only contains the document itself. >>> q - Pandoc ( Meta ({}), [ Para ([ Str ( 'Hello' ), Space (), Str ( 'world!' )])]) Search by type \u00b6 The find method allows to select items within the initial collection. To begin with, we can search items by type: >>> q . find ( Meta ) - Meta ({}) >>> q . find ( Para ) - Para ([ Str ( 'Hello' ), Space (), Str ( 'world!' )]) Abstract types can also be used: >>> q . find ( Block ) - Para ([ Str ( 'Hello' ), Space (), Str ( 'world!' )]) >>> q . find ( Inline ) - Str ( 'Hello' ) - Space () - Str ( 'world!' ) To find all pandoc elements: >>> q . find ( Type ) - Pandoc ( Meta ({}), [ Para ([ Str ( 'Hello' ), Space (), Str ( 'world!' )])]) - Meta ({}) - Para ([ Str ( 'Hello' ), Space (), Str ( 'world!' )]) - Str ( 'Hello' ) - Space () - Str ( 'world!' ) Finding python builtin types works too: >>> q . find ( dict ) - {} >>> q . find ( list ) - [ Para ([ Str ( 'Hello' ), Space (), Str ( 'world!' )])] - [ Str ( 'Hello' ), Space (), Str ( 'world!' )] >>> q . find ( str ) - 'Hello' - 'world!' To get every possible item, in document order, we can search for Python objects: >>> q . find ( object ) - Pandoc ( Meta ({}), [ Para ([ Str ( 'Hello' ), Space (), Str ( 'world!' )])]) - Meta ({}) - {} - [ Para ([ Str ( 'Hello' ), Space (), Str ( 'world!' )])] - Para ([ Str ( 'Hello' ), Space (), Str ( 'world!' )]) - [ Str ( 'Hello' ), Space (), Str ( 'world!' )] - Str ( 'Hello' ) - 'Hello' - Space () - Str ( 'world!' ) - 'world!' Selectors \u00b6 Types are not the only possible selectors. Predicates -- functions that take a pandoc element and return a boolean value -- can be used too: >>> def startswith_H ( elt ): ... return isinstance ( elt , Str ) and elt [ 0 ] . startswith ( \"H\" ) ... >>> q . find ( startswith_H ) - Str ( 'Hello' ) You can use predicate to define and select \"virtual types\" in a document. For example, def AttrHolder ( elt ): return isinstance ( elt , ( Code , Link , Image , Span , Div , CodeBlock , Header , Table )) TODO: match by attributes (id, classes, key-values); use keyword arguments in find with \"or\" semantics for lists; allow for predicates. For key values match, match for key existence, key-value pair, predicate as a whole or just for value. Combine requirements \u00b6 We can search for items that match one of several conditions: >>> q . find ( Str , Space ) - Str ( 'Hello' ) - Space () - Str ( 'world!' ) If the list of arguments is empty, there is no match: >>> q . find () < BLANKLINE > In a boolean context, a query with no results is considered False >>> bool ( q . find ()) False >>> if not q . find (): ... print ( \"no result\" ) no result To add match several conditions at once, the filter method can be used: >>> q . find ( Inline ) . filter ( Str ) - Str ( 'Hello' ) - Str ( 'world!' ) The filter method can be used implicitly: a query is callable >>> q . find ( Inline )( Str ) - Str ( 'Hello' ) - Str ( 'world!' ) We can also match the negation of a condition >>> q . find ( Inline )( not_ ( Space )) - Str ( 'Hello' ) - Str ( 'world!' ) Navigation \u00b6 TODO. Parent, children, next, previous, next_sibling, previous_sibling. >>> q - Pandoc ( Meta ({}), [ Para ([ Str ( 'Hello' ), Space (), Str ( 'world!' )])]) >>> q . next - Meta ({}) >>> q . next . next - {} >>> q . next . next . next - [ Para ([ Str ( 'Hello' ), Space (), Str ( 'world!' )])] >>> q . next . next . next . next - Para ([ Str ( 'Hello' ), Space (), Str ( 'world!' )]) >>> q . next . next . next . next . next - [ Str ( 'Hello' ), Space (), Str ( 'world!' )] >>> q . next . next . next . next . next . next - Str ( 'Hello' ) >>> q . next . next . next . next . next . next . next - 'Hello' >>> q . next . next . next . next . next . next . next . next - Space () >>> q . next . next . next . next . next . next . next . next . next - Str ( 'world!' ) >>> q . next . next . next . next . next . next . next . next . next . next - 'world!' >>> q . next . next . next . next . next . next . next . next . next . next . next < BLANKLINE > >>> q . find ( str ) - 'Hello' - 'world!' >>> q . find ( str )[ 1 ] - 'world!' >>> w = q . find ( str )[ 1 ] >>> w . previous - Str ( 'world!' ) >>> w . previous . previous - Space () >>> w . previous . previous . previous - 'Hello' >>> w . previous . previous . previous . previous - Str ( 'Hello' ) >>> w . previous . previous . previous . previous . previous - [ Str ( 'Hello' ), Space (), Str ( 'world!' )] >>> w . previous . previous . previous . previous . previous . previous - Para ([ Str ( 'Hello' ), Space (), Str ( 'world!' )]) >>> w . previous . previous . previous . previous . previous . previous . previous - [ Para ([ Str ( 'Hello' ), Space (), Str ( 'world!' )])] >>> w . previous . previous . previous . previous . previous . previous . previous . previous - {} >>> w . previous . previous . previous . previous . previous . previous . previous . previous . previous - Meta ({}) >>> w . previous . previous . previous . previous . previous . previous . previous . previous . previous . previous - Pandoc ( Meta ({}), [ Para ([ Str ( 'Hello' ), Space (), Str ( 'world!' )])]) >>> w . previous . previous . previous . previous . previous . previous . previous . previous . previous . previous . previous < BLANKLINE > Nota: finding lists of inlines is difficult; finding non-empty lists of inlines is easy, but empty lists is harder, we need to use some knowledge of the type hierarchy.","title":"Labs \ud83e\uddea"},{"location":"labs/#labs","text":"Warning The pandoc.labs module is an experiment ; its interface is highly unstable. Don't build anything serious on top of it! import pandoc from pandoc.types import * from pandoc.labs import * HELLOWORLD_DOC = pandoc . read ( \"Hello world!\" ) from urllib.request import urlopen PATH = \"raw.githubusercontent.com/commonmark/commonmark-spec\" HASH = \"499ebbad90163881f51498c4c620652d0c66fb2e\" # pinned version URL = f \"https:// { PATH } / { HASH } /spec.txt\" COMMONMARK_SPEC = urlopen ( URL ) . read () . decode ( \"utf-8\" ) COMMONMARK_DOC = pandoc . read ( COMMONMARK_SPEC ) >>> HELLOWORLD_DOC Pandoc ( Meta ({}), [ Para ([ Str ( 'Hello' ), Space (), Str ( 'world!' )])]) >>> query ( HELLOWORLD_DOC ) - Pandoc ( Meta ({}), [ Para ([ Str ( 'Hello' ), Space (), Str ( 'world!' )])]) TODO. Explain what query does: a collection which stores single or multiple document elements on which parallel operations can be applied and that \"automagically\" know their location within the root document. Also \"no-failure\" flavor (operations don't fail, they return the empty collection) >>> q = query ( HELLOWORLD_DOC ) >>> isinstance ( q , Query ) True TODO: consider a change of name for Query : Results , Match , Collection , etc? At this stage, the query only contains the document itself. >>> q - Pandoc ( Meta ({}), [ Para ([ Str ( 'Hello' ), Space (), Str ( 'world!' )])])","title":"Labs \ud83e\uddea"},{"location":"labs/#search-by-type","text":"The find method allows to select items within the initial collection. To begin with, we can search items by type: >>> q . find ( Meta ) - Meta ({}) >>> q . find ( Para ) - Para ([ Str ( 'Hello' ), Space (), Str ( 'world!' )]) Abstract types can also be used: >>> q . find ( Block ) - Para ([ Str ( 'Hello' ), Space (), Str ( 'world!' )]) >>> q . find ( Inline ) - Str ( 'Hello' ) - Space () - Str ( 'world!' ) To find all pandoc elements: >>> q . find ( Type ) - Pandoc ( Meta ({}), [ Para ([ Str ( 'Hello' ), Space (), Str ( 'world!' )])]) - Meta ({}) - Para ([ Str ( 'Hello' ), Space (), Str ( 'world!' )]) - Str ( 'Hello' ) - Space () - Str ( 'world!' ) Finding python builtin types works too: >>> q . find ( dict ) - {} >>> q . find ( list ) - [ Para ([ Str ( 'Hello' ), Space (), Str ( 'world!' )])] - [ Str ( 'Hello' ), Space (), Str ( 'world!' )] >>> q . find ( str ) - 'Hello' - 'world!' To get every possible item, in document order, we can search for Python objects: >>> q . find ( object ) - Pandoc ( Meta ({}), [ Para ([ Str ( 'Hello' ), Space (), Str ( 'world!' )])]) - Meta ({}) - {} - [ Para ([ Str ( 'Hello' ), Space (), Str ( 'world!' )])] - Para ([ Str ( 'Hello' ), Space (), Str ( 'world!' )]) - [ Str ( 'Hello' ), Space (), Str ( 'world!' )] - Str ( 'Hello' ) - 'Hello' - Space () - Str ( 'world!' ) - 'world!'","title":"Search by type"},{"location":"labs/#selectors","text":"Types are not the only possible selectors. Predicates -- functions that take a pandoc element and return a boolean value -- can be used too: >>> def startswith_H ( elt ): ... return isinstance ( elt , Str ) and elt [ 0 ] . startswith ( \"H\" ) ... >>> q . find ( startswith_H ) - Str ( 'Hello' ) You can use predicate to define and select \"virtual types\" in a document. For example, def AttrHolder ( elt ): return isinstance ( elt , ( Code , Link , Image , Span , Div , CodeBlock , Header , Table )) TODO: match by attributes (id, classes, key-values); use keyword arguments in find with \"or\" semantics for lists; allow for predicates. For key values match, match for key existence, key-value pair, predicate as a whole or just for value.","title":"Selectors"},{"location":"labs/#combine-requirements","text":"We can search for items that match one of several conditions: >>> q . find ( Str , Space ) - Str ( 'Hello' ) - Space () - Str ( 'world!' ) If the list of arguments is empty, there is no match: >>> q . find () < BLANKLINE > In a boolean context, a query with no results is considered False >>> bool ( q . find ()) False >>> if not q . find (): ... print ( \"no result\" ) no result To add match several conditions at once, the filter method can be used: >>> q . find ( Inline ) . filter ( Str ) - Str ( 'Hello' ) - Str ( 'world!' ) The filter method can be used implicitly: a query is callable >>> q . find ( Inline )( Str ) - Str ( 'Hello' ) - Str ( 'world!' ) We can also match the negation of a condition >>> q . find ( Inline )( not_ ( Space )) - Str ( 'Hello' ) - Str ( 'world!' )","title":"Combine requirements"},{"location":"labs/#navigation","text":"TODO. Parent, children, next, previous, next_sibling, previous_sibling. >>> q - Pandoc ( Meta ({}), [ Para ([ Str ( 'Hello' ), Space (), Str ( 'world!' )])]) >>> q . next - Meta ({}) >>> q . next . next - {} >>> q . next . next . next - [ Para ([ Str ( 'Hello' ), Space (), Str ( 'world!' )])] >>> q . next . next . next . next - Para ([ Str ( 'Hello' ), Space (), Str ( 'world!' )]) >>> q . next . next . next . next . next - [ Str ( 'Hello' ), Space (), Str ( 'world!' )] >>> q . next . next . next . next . next . next - Str ( 'Hello' ) >>> q . next . next . next . next . next . next . next - 'Hello' >>> q . next . next . next . next . next . next . next . next - Space () >>> q . next . next . next . next . next . next . next . next . next - Str ( 'world!' ) >>> q . next . next . next . next . next . next . next . next . next . next - 'world!' >>> q . next . next . next . next . next . next . next . next . next . next . next < BLANKLINE > >>> q . find ( str ) - 'Hello' - 'world!' >>> q . find ( str )[ 1 ] - 'world!' >>> w = q . find ( str )[ 1 ] >>> w . previous - Str ( 'world!' ) >>> w . previous . previous - Space () >>> w . previous . previous . previous - 'Hello' >>> w . previous . previous . previous . previous - Str ( 'Hello' ) >>> w . previous . previous . previous . previous . previous - [ Str ( 'Hello' ), Space (), Str ( 'world!' )] >>> w . previous . previous . previous . previous . previous . previous - Para ([ Str ( 'Hello' ), Space (), Str ( 'world!' )]) >>> w . previous . previous . previous . previous . previous . previous . previous - [ Para ([ Str ( 'Hello' ), Space (), Str ( 'world!' )])] >>> w . previous . previous . previous . previous . previous . previous . previous . previous - {} >>> w . previous . previous . previous . previous . previous . previous . previous . previous . previous - Meta ({}) >>> w . previous . previous . previous . previous . previous . previous . previous . previous . previous . previous - Pandoc ( Meta ({}), [ Para ([ Str ( 'Hello' ), Space (), Str ( 'world!' )])]) >>> w . previous . previous . previous . previous . previous . previous . previous . previous . previous . previous . previous < BLANKLINE > Nota: finding lists of inlines is difficult; finding non-empty lists of inlines is easy, but empty lists is harder, we need to use some knowledge of the type hierarchy.","title":"Navigation"},{"location":"markdown/","text":"Pandoc's Markdown \u00b6 Source: https://raw.githubusercontent.com/jgm/pandoc/2.14.2/MANUAL.txt Pandoc understands an extended and slightly revised version of John Gruber's Markdown syntax. This document explains the syntax, noting differences from standard Markdown. Except where noted, these differences can be suppressed by using the markdown_strict format instead of markdown . Extensions can be enabled or disabled to specify the behavior more granularly. They are described in the following. See also Extensions above, for extensions that work also on other formats. Philosophy \u00b6 Markdown is designed to be easy to write, and, even more importantly, easy to read: A Markdown-formatted document should be publishable as-is, as plain text, without looking like it's been marked up with tags or formatting instructions. -- John Gruber This principle has guided pandoc's decisions in finding syntax for tables, footnotes, and other extensions. There is, however, one respect in which pandoc's aims are different from the original aims of Markdown. Whereas Markdown was originally designed with HTML generation in mind, pandoc is designed for multiple output formats. Thus, while pandoc allows the embedding of raw HTML, it discourages it, and provides other, non-HTMLish ways of representing important document elements like definition lists, tables, mathematics, and footnotes. Paragraphs \u00b6 A paragraph is one or more lines of text followed by one or more blank lines. Newlines are treated as spaces, so you can reflow your paragraphs as you like. If you need a hard line break, put two or more spaces at the end of a line. Extension: escaped_line_breaks \u00b6 A backslash followed by a newline is also a hard line break. Note: in multiline and grid table cells, this is the only way to create a hard line break, since trailing spaces in the cells are ignored. Headings \u00b6 There are two kinds of headings: Setext and ATX. Setext-style headings \u00b6 A setext-style heading is a line of text \"underlined\" with a row of = signs (for a level-one heading) or - signs (for a level-two heading): Markdown Python A level-one heading =================== A level-two heading ------------------- Pandoc(Meta({}), [Header(1, ('a-level-one-heading', [], []), [Str('A'), Space(), Str('level-one'), Space(), Str('heading')]), Header(2, ('a-level-two-heading', [], []), [Str('A'), Space(), Str('level-two'), Space(), Str('heading')])]) The heading text can contain inline formatting, such as emphasis (see Inline formatting , below). ATX-style headings \u00b6 An ATX-style heading consists of one to six # signs and a line of text, optionally followed by any number of # signs. The number of # signs at the beginning of the line is the heading level: Markdown Python ## A level-two heading ### A level-three heading ### Pandoc(Meta({}), [Header(2, ('a-level-two-heading', [], []), [Str('A'), Space(), Str('level-two'), Space(), Str('heading')]), Header(3, ('a-level-three-heading', [], []), [Str('A'), Space(), Str('level-three'), Space(), Str('heading')])]) As with setext-style headings, the heading text can contain formatting: Markdown Python # A level-one heading with a [link](/url) and *emphasis* Pandoc(Meta({}), [Header(1, ('a-level-one-heading-with-a-link-and-emphasis', [], []), [Str('A'), Space(), Str('level-one'), Space(), Str('heading'), Space(), Str('with'), Space(), Str('a'), Space(), Link(('', [], []), [Str('link')], ('/url', '')), Space(), Str('and'), Space(), Emph([Str('emphasis')])])]) Extension: blank_before_header \u00b6 Standard Markdown syntax does not require a blank line before a heading. Pandoc does require this (except, of course, at the beginning of the document). The reason for the requirement is that it is all too easy for a # to end up at the beginning of a line by accident (perhaps through line wrapping). Consider, for example: Markdown Python I like several of their flavors of ice cream: #22, for example, and #5. Pandoc(Meta({}), [Para([Str('I'), Space(), Str('like'), Space(), Str('several'), Space(), Str('of'), Space(), Str('their'), Space(), Str('flavors'), Space(), Str('of'), Space(), Str('ice'), Space(), Str('cream:'), SoftBreak(), Str('#22,'), Space(), Str('for'), Space(), Str('example,'), Space(), Str('and'), Space(), Str('#5.')])]) Extension: space_in_atx_header \u00b6 Many Markdown implementations do not require a space between the opening # s of an ATX heading and the heading text, so that #5 bolt and #hashtag count as headings. With this extension, pandoc does require the space. Heading identifiers \u00b6 See also the auto_identifiers extension above. Extension: header_attributes \u00b6 Headings can be assigned attributes using this syntax at the end of the line containing the heading text: {#identifier .class .class key=value key=value} Thus, for example, the following headings will all be assigned the identifier foo : Markdown Python # My heading {#foo} ## My heading ## {#foo} My other heading {#foo} --------------- Pandoc(Meta({}), [Header(1, ('foo', [], []), [Str('My'), Space(), Str('heading')]), Header(2, ('foo', [], []), [Str('My'), Space(), Str('heading')]), Header(2, ('foo', [], []), [Str('My'), Space(), Str('other'), Space(), Str('heading')])]) (This syntax is compatible with PHP Markdown Extra .) Note that although this syntax allows assignment of classes and key/value attributes, writers generally don't use all of this information. Identifiers, classes, and key/value attributes are used in HTML and HTML-based formats such as EPUB and slidy. Identifiers are used for labels and link anchors in the LaTeX, ConTeXt, Textile, Jira markup, and AsciiDoc writers. Headings with the class unnumbered will not be numbered, even if --number-sections is specified. A single hyphen ( - ) in an attribute context is equivalent to .unnumbered , and preferable in non-English documents. So, Markdown Python # My heading {-} Pandoc(Meta({}), [Header(1, ('my-heading', ['unnumbered'], []), [Str('My'), Space(), Str('heading')])]) is just the same as Markdown Python # My heading {.unnumbered} Pandoc(Meta({}), [Header(1, ('my-heading', ['unnumbered'], []), [Str('My'), Space(), Str('heading')])]) If the unlisted class is present in addition to unnumbered , the heading will not be included in a table of contents. (Currently this feature is only implemented for certain formats: those based on LaTeX and HTML, PowerPoint, and RTF.) Extension: implicit_header_references \u00b6 Pandoc behaves as if reference links have been defined for each heading. So, to link to a heading Markdown Python # Heading identifiers in HTML Pandoc(Meta({}), [Header(1, ('heading-identifiers-in-html', [], []), [Str('Heading'), Space(), Str('identifiers'), Space(), Str('in'), Space(), Str('HTML')])]) you can simply write Markdown Python # Heading identifiers in HTML [Heading identifiers in HTML] Pandoc(Meta({}), [Header(1, ('heading-identifiers-in-html', [], []), [Str('Heading'), Space(), Str('identifiers'), Space(), Str('in'), Space(), Str('HTML')]), Para([Link(('', [], []), [Str('Heading'), Space(), Str('identifiers'), Space(), Str('in'), Space(), Str('HTML')], ('#heading-identifiers-in-html', ''))])]) or Markdown Python # Heading identifiers in HTML [Heading identifiers in HTML][] Pandoc(Meta({}), [Header(1, ('heading-identifiers-in-html', [], []), [Str('Heading'), Space(), Str('identifiers'), Space(), Str('in'), Space(), Str('HTML')]), Para([Link(('', [], []), [Str('Heading'), Space(), Str('identifiers'), Space(), Str('in'), Space(), Str('HTML')], ('#heading-identifiers-in-html', ''))])]) or Markdown Python # Heading identifiers in HTML [the section on heading identifiers][heading identifiers in HTML] Pandoc(Meta({}), [Header(1, ('heading-identifiers-in-html', [], []), [Str('Heading'), Space(), Str('identifiers'), Space(), Str('in'), Space(), Str('HTML')]), Para([Link(('', [], []), [Str('the'), Space(), Str('section'), Space(), Str('on'), Space(), Str('heading'), Space(), Str('identifiers')], ('#heading-identifiers-in-html', ''))])]) instead of giving the identifier explicitly: Markdown Python [Heading identifiers in HTML](#heading-identifiers-in-html) Pandoc(Meta({}), [Para([Link(('', [], []), [Str('Heading'), Space(), Str('identifiers'), Space(), Str('in'), Space(), Str('HTML')], ('#heading-identifiers-in-html', ''))])]) If there are multiple headings with identical text, the corresponding reference will link to the first one only, and you will need to use explicit links to link to the others, as described above. Like regular reference links, these references are case-insensitive. Explicit link reference definitions always take priority over implicit heading references. So, in the following example, the link will point to bar , not to #foo : Markdown Python # Foo [foo]: bar See [foo] Pandoc(Meta({}), [Header(1, ('foo', [], []), [Str('Foo')]), Para([Str('See'), Space(), Link(('', [], []), [Str('foo')], ('bar', ''))])]) Block quotations \u00b6 Markdown uses email conventions for quoting blocks of text. A block quotation is one or more paragraphs or other block elements (such as lists or headings), with each line preceded by a > character and an optional space. (The > need not start at the left margin, but it should not be indented more than three spaces.) Markdown Python > This is a block quote. This > paragraph has two lines. > > 1. This is a list inside a block quote. > 2. Second item. Pandoc(Meta({}), [BlockQuote([Para([Str('This'), Space(), Str('is'), Space(), Str('a'), Space(), Str('block'), Space(), Str('quote.'), Space(), Str('This'), SoftBreak(), Str('paragraph'), Space(), Str('has'), Space(), Str('two'), Space(), Str('lines.')]), OrderedList((1, Decimal(), Period()), [[Plain([Str('This'), Space(), Str('is'), Space(), Str('a'), Space(), Str('list'), Space(), Str('inside'), Space(), Str('a'), Space(), Str('block'), Space(), Str('quote.')])], [Plain([Str('Second'), Space(), Str('item.')])]])])]) A \"lazy\" form, which requires the > character only on the first line of each block, is also allowed: Markdown Python > This is a block quote. This paragraph has two lines. > 1. This is a list inside a block quote. 2. Second item. Pandoc(Meta({}), [BlockQuote([Para([Str('This'), Space(), Str('is'), Space(), Str('a'), Space(), Str('block'), Space(), Str('quote.'), Space(), Str('This'), SoftBreak(), Str('paragraph'), Space(), Str('has'), Space(), Str('two'), Space(), Str('lines.')])]), BlockQuote([OrderedList((1, Decimal(), Period()), [[Plain([Str('This'), Space(), Str('is'), Space(), Str('a'), Space(), Str('list'), Space(), Str('inside'), Space(), Str('a'), Space(), Str('block'), Space(), Str('quote.')])], [Plain([Str('Second'), Space(), Str('item.')])]])])]) Among the block elements that can be contained in a block quote are other block quotes. That is, block quotes can be nested: Markdown Python > This is a block quote. > > > A block quote within a block quote. Pandoc(Meta({}), [BlockQuote([Para([Str('This'), Space(), Str('is'), Space(), Str('a'), Space(), Str('block'), Space(), Str('quote.')]), BlockQuote([Para([Str('A'), Space(), Str('block'), Space(), Str('quote'), Space(), Str('within'), Space(), Str('a'), Space(), Str('block'), Space(), Str('quote.')])])])]) If the > character is followed by an optional space, that space will be considered part of the block quote marker and not part of the indentation of the contents. Thus, to put an indented code block in a block quote, you need five spaces after the > : Markdown Python > code Pandoc(Meta({}), [BlockQuote([CodeBlock(('', [], []), 'code')])]) Extension: blank_before_blockquote \u00b6 Standard Markdown syntax does not require a blank line before a block quote. Pandoc does require this (except, of course, at the beginning of the document). The reason for the requirement is that it is all too easy for a > to end up at the beginning of a line by accident (perhaps through line wrapping). So, unless the markdown_strict format is used, the following does not produce a nested block quote in pandoc: Markdown Python > This is a block quote. >> Nested. Pandoc(Meta({}), [BlockQuote([Para([Str('This'), Space(), Str('is'), Space(), Str('a'), Space(), Str('block'), Space(), Str('quote.'), SoftBreak(), Str('>'), Space(), Str('Nested.')])])]) Verbatim (code) blocks \u00b6 Indented code blocks \u00b6 A block of text indented four spaces (or one tab) is treated as verbatim text: that is, special characters do not trigger special formatting, and all spaces and line breaks are preserved. For example, Markdown Python if (a > 3) { moveShip(5 * gravity, DOWN); } Pandoc(Meta({}), [CodeBlock(('', [], []), 'if (a > 3) {\\n moveShip(5 * gravity, DOWN);\\n}')]) The initial (four space or one tab) indentation is not considered part of the verbatim text, and is removed in the output. Note: blank lines in the verbatim text need not begin with four spaces. Fenced code blocks \u00b6 Extension: fenced_code_blocks \u00b6 In addition to standard indented code blocks, pandoc supports fenced code blocks. These begin with a row of three or more tildes ( ~ ) and end with a row of tildes that must be at least as long as the starting row. Everything between these lines is treated as code. No indentation is necessary: Markdown Python ~~~~~~~ if (a > 3) { moveShip(5 * gravity, DOWN); } ~~~~~~~ Pandoc(Meta({}), [CodeBlock(('', [], []), 'if (a > 3) {\\n moveShip(5 * gravity, DOWN);\\n}')]) Like regular code blocks, fenced code blocks must be separated from surrounding text by blank lines. If the code itself contains a row of tildes or backticks, just use a longer row of tildes or backticks at the start and end: Markdown Python ~~~~~~~~~~~~~~~~ ~~~~~~~~~~ code including tildes ~~~~~~~~~~ ~~~~~~~~~~~~~~~~ Pandoc(Meta({}), [CodeBlock(('', [], []), '~~~~~~~~~~\\ncode including tildes\\n~~~~~~~~~~')]) Extension: backtick_code_blocks \u00b6 Same as fenced_code_blocks , but uses backticks ( ` ) instead of tildes ( ~ ). Extension: fenced_code_attributes \u00b6 Optionally, you may attach attributes to fenced or backtick code block using this syntax: Markdown Python ~~~~ {#mycode .haskell .numberLines startFrom=\"100\"} qsort [] = [] qsort (x:xs) = qsort (filter (< x) xs) ++ [x] ++ qsort (filter (>= x) xs) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pandoc(Meta({}), [CodeBlock(('mycode', ['haskell', 'numberLines'], [('startFrom', '100')]), 'qsort [] = []\\nqsort (x:xs) = qsort (filter (< x) xs) ++ [x] ++\\n qsort (filter (>= x) xs)')]) Here mycode is an identifier, haskell and numberLines are classes, and startFrom is an attribute with value 100 . Some output formats can use this information to do syntax highlighting. Currently, the only output formats that uses this information are HTML, LaTeX, Docx, Ms, and PowerPoint. If highlighting is supported for your output format and language, then the code block above will appear highlighted, with numbered lines. (To see which languages are supported, type pandoc --list-highlight-languages .) Otherwise, the code block above will appear as follows: <pre id=\"mycode\" class=\"haskell numberLines\" startFrom=\"100\"> <code> ... </code> </pre> The numberLines (or number-lines ) class will cause the lines of the code block to be numbered, starting with 1 or the value of the startFrom attribute. The lineAnchors (or line-anchors ) class will cause the lines to be clickable anchors in HTML output. A shortcut form can also be used for specifying the language of the code block: Markdown Python ```haskell qsort [] = [] ``` Pandoc(Meta({}), [CodeBlock(('', ['haskell'], []), 'qsort [] = []')]) This is equivalent to: Markdown Python ``` {.haskell} qsort [] = [] ``` Pandoc(Meta({}), [CodeBlock(('', ['haskell'], []), 'qsort [] = []')]) If the fenced_code_attributes extension is disabled, but input contains class attribute(s) for the code block, the first class attribute will be printed after the opening fence as a bare word. To prevent all highlighting, use the --no-highlight flag. To set the highlighting style, use --highlight-style . For more information on highlighting, see Syntax highlighting , below. Line blocks \u00b6 Extension: line_blocks \u00b6 A line block is a sequence of lines beginning with a vertical bar ( | ) followed by a space. The division into lines will be preserved in the output, as will any leading spaces; otherwise, the lines will be formatted as Markdown. This is useful for verse and addresses: Markdown Python | The limerick packs laughs anatomical | In space that is quite economical. | But the good ones I've seen | So seldom are clean | And the clean ones so seldom are comical | 200 Main St. | Berkeley, CA 94718 Pandoc(Meta({}), [LineBlock([[Str('The'), Space(), Str('limerick'), Space(), Str('packs'), Space(), Str('laughs'), Space(), Str('anatomical')], [Str('In'), Space(), Str('space'), Space(), Str('that'), Space(), Str('is'), Space(), Str('quite'), Space(), Str('economical.')], [Str('\\xa0\\xa0\\xa0But'), Space(), Str('the'), Space(), Str('good'), Space(), Str('ones'), Space(), Str('I\u2019ve'), Space(), Str('seen')], [Str('\\xa0\\xa0\\xa0So'), Space(), Str('seldom'), Space(), Str('are'), Space(), Str('clean')], [Str('And'), Space(), Str('the'), Space(), Str('clean'), Space(), Str('ones'), Space(), Str('so'), Space(), Str('seldom'), Space(), Str('are'), Space(), Str('comical')]]), LineBlock([[Str('200'), Space(), Str('Main'), Space(), Str('St.')], [Str('Berkeley,'), Space(), Str('CA'), Space(), Str('94718')]])]) The lines can be hard-wrapped if needed, but the continuation line must begin with a space. Markdown Python | The Right Honorable Most Venerable and Righteous Samuel L. Constable, Jr. | 200 Main St. | Berkeley, CA 94718 Pandoc(Meta({}), [LineBlock([[Str('The'), Space(), Str('Right'), Space(), Str('Honorable'), Space(), Str('Most'), Space(), Str('Venerable'), Space(), Str('and'), Space(), Str('Righteous'), Space(), Str('Samuel'), Space(), Str('L.'), Space(), Str('Constable,'), Space(), Str('Jr.')], [Str('200'), Space(), Str('Main'), Space(), Str('St.')], [Str('Berkeley,'), Space(), Str('CA'), Space(), Str('94718')]])]) Inline formatting (such as emphasis) is allowed in the content, but not block-level formatting (such as block quotes or lists). This syntax is borrowed from reStructuredText . Lists \u00b6 Bullet lists \u00b6 A bullet list is a list of bulleted list items. A bulleted list item begins with a bullet ( * , + , or - ). Here is a simple example: Markdown Python * one * two * three Pandoc(Meta({}), [BulletList([[Plain([Str('one')])], [Plain([Str('two')])], [Plain([Str('three')])]])]) This will produce a \"compact\" list. If you want a \"loose\" list, in which each item is formatted as a paragraph, put spaces between the items: Markdown Python * one * two * three Pandoc(Meta({}), [BulletList([[Para([Str('one')])], [Para([Str('two')])], [Para([Str('three')])]])]) The bullets need not be flush with the left margin; they may be indented one, two, or three spaces. The bullet must be followed by whitespace. List items look best if subsequent lines are flush with the first line (after the bullet): Markdown Python * here is my first list item. * and my second. Pandoc(Meta({}), [BulletList([[Plain([Str('here'), Space(), Str('is'), Space(), Str('my'), Space(), Str('first'), SoftBreak(), Str('list'), Space(), Str('item.')])], [Plain([Str('and'), Space(), Str('my'), Space(), Str('second.')])]])]) But Markdown also allows a \"lazy\" format: Markdown Python * here is my first list item. * and my second. Pandoc(Meta({}), [BulletList([[Plain([Str('here'), Space(), Str('is'), Space(), Str('my'), Space(), Str('first'), SoftBreak(), Str('list'), Space(), Str('item.')])], [Plain([Str('and'), Space(), Str('my'), Space(), Str('second.')])]])]) Block content in list items \u00b6 A list item may contain multiple paragraphs and other block-level content. However, subsequent paragraphs must be preceded by a blank line and indented to line up with the first non-space content after the list marker. Markdown Python * First paragraph. Continued. * Second paragraph. With a code block, which must be indented eight spaces: { code } Pandoc(Meta({}), [BulletList([[Para([Str('First'), Space(), Str('paragraph.')]), Para([Str('Continued.')])], [Para([Str('Second'), Space(), Str('paragraph.'), Space(), Str('With'), Space(), Str('a'), Space(), Str('code'), Space(), Str('block,'), Space(), Str('which'), Space(), Str('must'), Space(), Str('be'), Space(), Str('indented'), SoftBreak(), Str('eight'), Space(), Str('spaces:')]), CodeBlock(('', [], []), '{ code }')]])]) Exception: if the list marker is followed by an indented code block, which must begin 5 spaces after the list marker, then subsequent paragraphs must begin two columns after the last character of the list marker: Markdown Python * code continuation paragraph Pandoc(Meta({}), [BulletList([[CodeBlock(('', [], []), 'code'), Plain([Str('continuation'), Space(), Str('paragraph')])]])]) List items may include other lists. In this case the preceding blank line is optional. The nested list must be indented to line up with the first non-space character after the list marker of the containing list item. Markdown Python * fruits + apples - macintosh - red delicious + pears + peaches * vegetables + broccoli + chard Pandoc(Meta({}), [BulletList([[Plain([Str('fruits')]), BulletList([[Plain([Str('apples')]), BulletList([[Plain([Str('macintosh')])], [Plain([Str('red'), Space(), Str('delicious')])]])], [Plain([Str('pears')])], [Plain([Str('peaches')])]])], [Plain([Str('vegetables')]), BulletList([[Plain([Str('broccoli')])], [Plain([Str('chard')])]])]])]) As noted above, Markdown allows you to write list items \"lazily,\" instead of indenting continuation lines. However, if there are multiple paragraphs or other blocks in a list item, the first line of each must be indented. Markdown Python + A lazy, lazy, list item. + Another one; this looks bad but is legal. Second paragraph of second list item. Pandoc(Meta({}), [BulletList([[Para([Str('A'), Space(), Str('lazy,'), Space(), Str('lazy,'), Space(), Str('list'), SoftBreak(), Str('item.')])], [Para([Str('Another'), Space(), Str('one;'), Space(), Str('this'), Space(), Str('looks'), SoftBreak(), Str('bad'), Space(), Str('but'), Space(), Str('is'), Space(), Str('legal.')]), Para([Str('Second'), Space(), Str('paragraph'), Space(), Str('of'), Space(), Str('second'), SoftBreak(), Str('list'), Space(), Str('item.')])]])]) Ordered lists \u00b6 Ordered lists work just like bulleted lists, except that the items begin with enumerators rather than bullets. In standard Markdown, enumerators are decimal numbers followed by a period and a space. The numbers themselves are ignored, so there is no difference between this list: Markdown Python 1. one 2. two 3. three Pandoc(Meta({}), [OrderedList((1, Decimal(), Period()), [[Plain([Str('one')])], [Plain([Str('two')])], [Plain([Str('three')])]])]) and this one: Markdown Python 5. one 7. two 1. three Pandoc(Meta({}), [OrderedList((5, Decimal(), Period()), [[Plain([Str('one')])], [Plain([Str('two')])], [Plain([Str('three')])]])]) Extension: fancy_lists \u00b6 Unlike standard Markdown, pandoc allows ordered list items to be marked with uppercase and lowercase letters and roman numerals, in addition to Arabic numerals. List markers may be enclosed in parentheses or followed by a single right-parentheses or period. They must be separated from the text that follows by at least one space, and, if the list marker is a capital letter with a period, by at least two spaces. 1 The fancy_lists extension also allows ' # ' to be used as an ordered list marker in place of a numeral: Markdown Python #. one #. two Pandoc(Meta({}), [OrderedList((1, DefaultStyle(), DefaultDelim()), [[Plain([Str('one')])], [Plain([Str('two')])]])]) Extension: startnum \u00b6 Pandoc also pays attention to the type of list marker used, and to the starting number, and both of these are preserved where possible in the output format. Thus, the following yields a list with numbers followed by a single parenthesis, starting with 9, and a sublist with lowercase roman numerals: Markdown Python 9) Ninth 10) Tenth 11) Eleventh i. subone ii. subtwo iii. subthree Pandoc(Meta({}), [OrderedList((9, Decimal(), OneParen()), [[Plain([Str('Ninth')])], [Plain([Str('Tenth')])], [Plain([Str('Eleventh')]), OrderedList((1, LowerRoman(), Period()), [[Plain([Str('subone')])], [Plain([Str('subtwo')])], [Plain([Str('subthree')])]])]])]) Pandoc will start a new list each time a different type of list marker is used. So, the following will create three lists: Markdown Python (2) Two (5) Three 1. Four * Five Pandoc(Meta({}), [OrderedList((2, Decimal(), TwoParens()), [[Plain([Str('Two')])], [Plain([Str('Three')])]]), OrderedList((1, Decimal(), Period()), [[Plain([Str('Four')])]]), BulletList([[Plain([Str('Five')])]])]) If default list markers are desired, use #. : Markdown Python #. one #. two #. three Pandoc(Meta({}), [OrderedList((1, DefaultStyle(), DefaultDelim()), [[Plain([Str('one')])], [Plain([Str('two')])], [Plain([Str('three')])]])]) Extension: task_lists \u00b6 Pandoc supports task lists, using the syntax of GitHub-Flavored Markdown. Markdown Python - [ ] an unchecked task list item - [x] checked item Pandoc(Meta({}), [BulletList([[Plain([Str('\u2610'), Space(), Str('an'), Space(), Str('unchecked'), Space(), Str('task'), Space(), Str('list'), Space(), Str('item')])], [Plain([Str('\u2612'), Space(), Str('checked'), Space(), Str('item')])]])]) Definition lists \u00b6 Extension: definition_lists \u00b6 Pandoc supports definition lists, using the syntax of PHP Markdown Extra with some extensions. 2 Markdown Python Term 1 : Definition 1 Term 2 with *inline markup* : Definition 2 { some code, part of Definition 2 } Third paragraph of definition 2. Pandoc(Meta({}), [DefinitionList([([Str('Term'), Space(), Str('1')], [[Para([Str('Definition'), Space(), Str('1')])]]), ([Str('Term'), Space(), Str('2'), Space(), Str('with'), Space(), Emph([Str('inline'), Space(), Str('markup')])], [[Para([Str('Definition'), Space(), Str('2')]), CodeBlock(('', [], []), '{ some code, part of Definition 2 }'), Para([Str('Third'), Space(), Str('paragraph'), Space(), Str('of'), Space(), Str('definition'), Space(), Str('2.')])]])])]) Each term must fit on one line, which may optionally be followed by a blank line, and must be followed by one or more definitions. A definition begins with a colon or tilde, which may be indented one or two spaces. A term may have multiple definitions, and each definition may consist of one or more block elements (paragraph, code block, list, etc.), each indented four spaces or one tab stop. The body of the definition (including the first line, aside from the colon or tilde) should be indented four spaces. However, as with other Markdown lists, you can \"lazily\" omit indentation except at the beginning of a paragraph or other block element: Markdown Python Term 1 : Definition with lazy continuation. Second paragraph of the definition. Pandoc(Meta({}), [DefinitionList([([Str('Term'), Space(), Str('1')], [[Para([Str('Definition'), SoftBreak(), Str('with'), Space(), Str('lazy'), Space(), Str('continuation.')]), Para([Str('Second'), Space(), Str('paragraph'), Space(), Str('of'), Space(), Str('the'), Space(), Str('definition.')])]])])]) If you leave space before the definition (as in the example above), the text of the definition will be treated as a paragraph. In some output formats, this will mean greater spacing between term/definition pairs. For a more compact definition list, omit the space before the definition: Markdown Python Term 1 ~ Definition 1 Term 2 ~ Definition 2a ~ Definition 2b Pandoc(Meta({}), [DefinitionList([([Str('Term'), Space(), Str('1')], [[Plain([Str('Definition'), Space(), Str('1')])]]), ([Str('Term'), Space(), Str('2')], [[Plain([Str('Definition'), Space(), Str('2a')])], [Plain([Str('Definition'), Space(), Str('2b')])]])])]) Note that space between items in a definition list is required. (A variant that loosens this requirement, but disallows \"lazy\" hard wrapping, can be activated with compact_definition_lists : see Non-default extensions , below.) Numbered example lists \u00b6 Extension: example_lists \u00b6 The special list marker @ can be used for sequentially numbered examples. The first list item with a @ marker will be numbered '1', the next '2', and so on, throughout the document. The numbered examples need not occur in a single list; each new list using @ will take up where the last stopped. So, for example: Markdown Python (@) My first example will be numbered (1). (@) My second example will be numbered (2). Explanation of examples. (@) My third example will be numbered (3). Pandoc(Meta({}), [OrderedList((1, Example(), TwoParens()), [[Plain([Str('My'), Space(), Str('first'), Space(), Str('example'), Space(), Str('will'), Space(), Str('be'), Space(), Str('numbered'), Space(), Str('(1).')])], [Plain([Str('My'), Space(), Str('second'), Space(), Str('example'), Space(), Str('will'), Space(), Str('be'), Space(), Str('numbered'), Space(), Str('(2).')])]]), Para([Str('Explanation'), Space(), Str('of'), Space(), Str('examples.')]), OrderedList((3, Example(), TwoParens()), [[Plain([Str('My'), Space(), Str('third'), Space(), Str('example'), Space(), Str('will'), Space(), Str('be'), Space(), Str('numbered'), Space(), Str('(3).')])]])]) Numbered examples can be labeled and referred to elsewhere in the document: Markdown Python (@good) This is a good example. As (@good) illustrates, ... Pandoc(Meta({}), [OrderedList((1, Example(), TwoParens()), [[Plain([Str('This'), Space(), Str('is'), Space(), Str('a'), Space(), Str('good'), Space(), Str('example.')])]]), Para([Str('As'), Space(), Str('(1)'), Space(), Str('illustrates,'), Space(), Str('\u2026')])]) The label can be any string of alphanumeric characters, underscores, or hyphens. Note: continuation paragraphs in example lists must always be indented four spaces, regardless of the length of the list marker. That is, example lists always behave as if the four_space_rule extension is set. This is because example labels tend to be long, and indenting content to the first non-space character after the label would be awkward. Ending a list \u00b6 What if you want to put an indented code block after a list? Markdown Python - item one - item two { my code block } Pandoc(Meta({}), [BulletList([[Para([Str('item'), Space(), Str('one')])], [Para([Str('item'), Space(), Str('two')]), Para([Str('{'), Space(), Str('my'), Space(), Str('code'), Space(), Str('block'), Space(), Str('}')])]])]) Trouble! Here pandoc (like other Markdown implementations) will treat { my code block } as the second paragraph of item two, and not as a code block. To \"cut off\" the list after item two, you can insert some non-indented content, like an HTML comment, which won't produce visible output in any format: Markdown Python - item one - item two <!-- end of list --> { my code block } Pandoc(Meta({}), [BulletList([[Plain([Str('item'), Space(), Str('one')])], [Plain([Str('item'), Space(), Str('two')])]]), RawBlock(Format('html'), '<!-- end of list -->'), CodeBlock(('', [], []), '{ my code block }')]) You can use the same trick if you want two consecutive lists instead of one big list: Markdown Python 1. one 2. two 3. three <!-- --> 1. uno 2. dos 3. tres Pandoc(Meta({}), [OrderedList((1, Decimal(), Period()), [[Plain([Str('one')])], [Plain([Str('two')])], [Plain([Str('three')])]]), RawBlock(Format('html'), '<!-- -->'), OrderedList((1, Decimal(), Period()), [[Plain([Str('uno')])], [Plain([Str('dos')])], [Plain([Str('tres')])]])]) Horizontal rules \u00b6 A line containing a row of three or more * , - , or _ characters (optionally separated by spaces) produces a horizontal rule: Markdown Python * * * * --------------- Pandoc(Meta({}), [HorizontalRule(), HorizontalRule()]) Tables \u00b6 Four kinds of tables may be used. The first three kinds presuppose the use of a fixed-width font, such as Courier. The fourth kind can be used with proportionally spaced fonts, as it does not require lining up columns. Extension: table_captions \u00b6 A caption may optionally be provided with all 4 kinds of tables (as illustrated in the examples below). A caption is a paragraph beginning with the string Table: (or just : ), which will be stripped off. It may appear either before or after the table. Extension: simple_tables \u00b6 Simple tables look like this: Markdown Python Right Left Center Default ------- ------ ---------- ------- 12 12 12 12 123 123 123 123 1 1 1 1 Table: Demonstration of simple table syntax. Pandoc(Meta({}), [Table(('', [], []), Caption(None, [Plain([Str('Demonstration'), Space(), Str('of'), Space(), Str('simple'), Space(), Str('table'), Space(), Str('syntax.')])]), [(AlignRight(), ColWidthDefault()), (AlignLeft(), ColWidthDefault()), (AlignCenter(), ColWidthDefault()), (AlignDefault(), ColWidthDefault())], TableHead(('', [], []), [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Right')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Left')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Center')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Default')])])])]), [TableBody(('', [], []), RowHeadColumns(0), [], [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('12')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('12')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('12')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('12')])])]), Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('123')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('123')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('123')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('123')])])]), Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('1')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('1')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('1')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('1')])])])])], TableFoot(('', [], []), []))]) The header and table rows must each fit on one line. Column alignments are determined by the position of the header text relative to the dashed line below it: 3 If the dashed line is flush with the header text on the right side but extends beyond it on the left, the column is right-aligned. If the dashed line is flush with the header text on the left side but extends beyond it on the right, the column is left-aligned. If the dashed line extends beyond the header text on both sides, the column is centered. If the dashed line is flush with the header text on both sides, the default alignment is used (in most cases, this will be left). The table must end with a blank line, or a line of dashes followed by a blank line. The column header row may be omitted, provided a dashed line is used to end the table. For example: Markdown Python ------- ------ ---------- ------- 12 12 12 12 123 123 123 123 1 1 1 1 ------- ------ ---------- ------- Pandoc(Meta({}), [Table(('', [], []), Caption(None, []), [(AlignRight(), ColWidthDefault()), (AlignLeft(), ColWidthDefault()), (AlignCenter(), ColWidthDefault()), (AlignRight(), ColWidthDefault())], TableHead(('', [], []), []), [TableBody(('', [], []), RowHeadColumns(0), [], [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('12')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('12')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('12')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('12')])])]), Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('123')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('123')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('123')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('123')])])]), Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('1')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('1')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('1')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('1')])])])])], TableFoot(('', [], []), []))]) When the header row is omitted, column alignments are determined on the basis of the first line of the table body. So, in the tables above, the columns would be right, left, center, and right aligned, respectively. Extension: multiline_tables \u00b6 Multiline tables allow header and table rows to span multiple lines of text (but cells that span multiple columns or rows of the table are not supported). Here is an example: Markdown Python ------------------------------------------------------------- Centered Default Right Left Header Aligned Aligned Aligned ----------- ------- --------------- ------------------------- First row 12.0 Example of a row that spans multiple lines. Second row 5.0 Here's another one. Note the blank line between rows. ------------------------------------------------------------- Table: Here's the caption. It, too, may span multiple lines. Pandoc(Meta({}), [Table(('', [], []), Caption(None, [Plain([Str('Here\u2019s'), Space(), Str('the'), Space(), Str('caption.'), Space(), Str('It,'), Space(), Str('too,'), Space(), Str('may'), Space(), Str('span'), SoftBreak(), Str('multiple'), Space(), Str('lines.')])]), [(AlignCenter(), ColWidth_(0.16666666666666666)), (AlignDefault(), ColWidth_(0.1111111111111111)), (AlignRight(), ColWidth_(0.2222222222222222)), (AlignLeft(), ColWidth_(0.3611111111111111))], TableHead(('', [], []), [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Centered'), SoftBreak(), Str('Header')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Default'), SoftBreak(), Str('Aligned')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Right'), SoftBreak(), Str('Aligned')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Left'), SoftBreak(), Str('Aligned')])])])]), [TableBody(('', [], []), RowHeadColumns(0), [], [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('First')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('row')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('12.0')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Example'), Space(), Str('of'), Space(), Str('a'), Space(), Str('row'), Space(), Str('that'), SoftBreak(), Str('spans'), Space(), Str('multiple'), Space(), Str('lines.')])])]), Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Second')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('row')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('5.0')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Here\u2019s'), Space(), Str('another'), Space(), Str('one.'), Space(), Str('Note'), SoftBreak(), Str('the'), Space(), Str('blank'), Space(), Str('line'), Space(), Str('between'), SoftBreak(), Str('rows.')])])])])], TableFoot(('', [], []), []))]) These work like simple tables, but with the following differences: They must begin with a row of dashes, before the header text (unless the header row is omitted). They must end with a row of dashes, then a blank line. The rows must be separated by blank lines. In multiline tables, the table parser pays attention to the widths of the columns, and the writers try to reproduce these relative widths in the output. So, if you find that one of the columns is too narrow in the output, try widening it in the Markdown source. The header may be omitted in multiline tables as well as simple tables: Markdown Python ----------- ------- --------------- ------------------------- First row 12.0 Example of a row that spans multiple lines. Second row 5.0 Here's another one. Note the blank line between rows. ----------- ------- --------------- ------------------------- : Here's a multiline table without a header. Pandoc(Meta({}), [Table(('', [], []), Caption(None, [Plain([Str('Here\u2019s'), Space(), Str('a'), Space(), Str('multiline'), Space(), Str('table'), Space(), Str('without'), Space(), Str('a'), Space(), Str('header.')])]), [(AlignCenter(), ColWidth_(0.16666666666666666)), (AlignLeft(), ColWidth_(0.1111111111111111)), (AlignRight(), ColWidth_(0.2222222222222222)), (AlignLeft(), ColWidth_(0.3611111111111111))], TableHead(('', [], []), []), [TableBody(('', [], []), RowHeadColumns(0), [], [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('First')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('row')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('12.0')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Example'), Space(), Str('of'), Space(), Str('a'), Space(), Str('row'), Space(), Str('that'), SoftBreak(), Str('spans'), Space(), Str('multiple'), Space(), Str('lines.')])])]), Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Second')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('row')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('5.0')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Here\u2019s'), Space(), Str('another'), Space(), Str('one.'), Space(), Str('Note'), SoftBreak(), Str('the'), Space(), Str('blank'), Space(), Str('line'), Space(), Str('between'), SoftBreak(), Str('rows.')])])])])], TableFoot(('', [], []), []))]) It is possible for a multiline table to have just one row, but the row should be followed by a blank line (and then the row of dashes that ends the table), or the table may be interpreted as a simple table. Extension: grid_tables \u00b6 Grid tables look like this: Markdown Python : Sample grid table. +---------------+---------------+--------------------+ | Fruit | Price | Advantages | +===============+===============+====================+ | Bananas | $1.34 | - built-in wrapper | | | | - bright color | +---------------+---------------+--------------------+ | Oranges | $2.10 | - cures scurvy | | | | - tasty | +---------------+---------------+--------------------+ Pandoc(Meta({}), [Table(('', [], []), Caption(None, [Plain([Str('Sample'), Space(), Str('grid'), Space(), Str('table.')])]), [(AlignDefault(), ColWidth_(0.2222222222222222)), (AlignDefault(), ColWidth_(0.2222222222222222)), (AlignDefault(), ColWidth_(0.2916666666666667))], TableHead(('', [], []), [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Fruit')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Price')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Advantages')])])])]), [TableBody(('', [], []), RowHeadColumns(0), [], [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Bananas')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('$1.34')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [BulletList([[Plain([Str('built-in'), Space(), Str('wrapper')])], [Plain([Str('bright'), Space(), Str('color')])]])])]), Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Oranges')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('$2.10')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [BulletList([[Plain([Str('cures'), Space(), Str('scurvy')])], [Plain([Str('tasty')])]])])])])], TableFoot(('', [], []), []))]) The row of = s separates the header from the table body, and can be omitted for a headerless table. The cells of grid tables may contain arbitrary block elements (multiple paragraphs, code blocks, lists, etc.). Cells that span multiple columns or rows are not supported. Grid tables can be created easily using Emacs' table-mode ( M-x table-insert ). Alignments can be specified as with pipe tables, by putting colons at the boundaries of the separator line after the header: Markdown Python +---------------+---------------+--------------------+ | Right | Left | Centered | +==============:+:==============+:==================:+ | Bananas | $1.34 | built-in wrapper | +---------------+---------------+--------------------+ Pandoc(Meta({}), [Table(('', [], []), Caption(None, []), [(AlignRight(), ColWidth_(0.2222222222222222)), (AlignLeft(), ColWidth_(0.2222222222222222)), (AlignCenter(), ColWidth_(0.2916666666666667))], TableHead(('', [], []), [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Right')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Left')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Centered')])])])]), [TableBody(('', [], []), RowHeadColumns(0), [], [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Bananas')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('$1.34')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('built-in'), Space(), Str('wrapper')])])])])], TableFoot(('', [], []), []))]) For headerless tables, the colons go on the top line instead: Markdown Python +--------------:+:--------------+:------------------:+ | Right | Left | Centered | +---------------+---------------+--------------------+ Pandoc(Meta({}), [Table(('', [], []), Caption(None, []), [(AlignRight(), ColWidth_(0.2222222222222222)), (AlignLeft(), ColWidth_(0.2222222222222222)), (AlignCenter(), ColWidth_(0.2916666666666667))], TableHead(('', [], []), []), [TableBody(('', [], []), RowHeadColumns(0), [], [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Right')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Left')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Centered')])])])])], TableFoot(('', [], []), []))]) Grid Table Limitations \u00b6 Pandoc does not support grid tables with row spans or column spans. This means that neither variable numbers of columns across rows nor variable numbers of rows across columns are supported by Pandoc. All grid tables must have the same number of columns in each row, and the same number of rows in each column. For example, the Docutils sample grid tables will not render as expected with Pandoc. Extension: pipe_tables \u00b6 Pipe tables look like this: Markdown Python | Right | Left | Default | Center | |------:|:-----|---------|:------:| | 12 | 12 | 12 | 12 | | 123 | 123 | 123 | 123 | | 1 | 1 | 1 | 1 | : Demonstration of pipe table syntax. Pandoc(Meta({}), [Table(('', [], []), Caption(None, [Plain([Str('Demonstration'), Space(), Str('of'), Space(), Str('pipe'), Space(), Str('table'), Space(), Str('syntax.')])]), [(AlignRight(), ColWidthDefault()), (AlignLeft(), ColWidthDefault()), (AlignDefault(), ColWidthDefault()), (AlignCenter(), ColWidthDefault())], TableHead(('', [], []), [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Right')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Left')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Default')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Center')])])])]), [TableBody(('', [], []), RowHeadColumns(0), [], [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('12')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('12')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('12')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('12')])])]), Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('123')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('123')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('123')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('123')])])]), Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('1')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('1')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('1')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('1')])])])])], TableFoot(('', [], []), []))]) The syntax is identical to PHP Markdown Extra tables . The beginning and ending pipe characters are optional, but pipes are required between all columns. The colons indicate column alignment as shown. The header cannot be omitted. To simulate a headerless table, include a header with blank cells. Since the pipes indicate column boundaries, columns need not be vertically aligned, as they are in the above example. So, this is a perfectly legal (though ugly) pipe table: Markdown Python fruit| price -----|-----: apple|2.05 pear|1.37 orange|3.09 Pandoc(Meta({}), [Table(('', [], []), Caption(None, []), [(AlignDefault(), ColWidthDefault()), (AlignRight(), ColWidthDefault())], TableHead(('', [], []), [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('fruit')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('price')])])])]), [TableBody(('', [], []), RowHeadColumns(0), [], [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('apple')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('2.05')])])]), Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('pear')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('1.37')])])]), Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('orange')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('3.09')])])])])], TableFoot(('', [], []), []))]) The cells of pipe tables cannot contain block elements like paragraphs and lists, and cannot span multiple lines. If a pipe table contains a row whose Markdown content is wider than the column width (see --columns ), then the table will take up the full text width and the cell contents will wrap, with the relative cell widths determined by the number of dashes in the line separating the table header from the table body. (For example ---|- would make the first column 3/4 and the second column 1/4 of the full text width.) On the other hand, if no lines are wider than column width, then cell contents will not be wrapped, and the cells will be sized to their contents. Note: pandoc also recognizes pipe tables of the following form, as can be produced by Emacs' orgtbl-mode: Markdown Python | One | Two | |-----+-------| | my | table | | is | nice | Pandoc(Meta({}), [Table(('', [], []), Caption(None, []), [(AlignDefault(), ColWidthDefault()), (AlignDefault(), ColWidthDefault())], TableHead(('', [], []), [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('One')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Two')])])])]), [TableBody(('', [], []), RowHeadColumns(0), [], [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('my')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('table')])])]), Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('is')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('nice')])])])])], TableFoot(('', [], []), []))]) The difference is that + is used instead of | . Other orgtbl features are not supported. In particular, to get non-default column alignment, you'll need to add colons as above. Metadata blocks \u00b6 Extension: pandoc_title_block \u00b6 If the file begins with a title block Markdown Python % title % author(s) (separated by semicolons) % date Pandoc(Meta({'author': MetaList([MetaInlines([Str('author(s)'), Space(), Str('(separated'), Space(), Str('by'), Space(), Str('semicolons)')])]), 'date': MetaInlines([Str('date')]), 'title': MetaInlines([Str('title')])}), []) it will be parsed as bibliographic information, not regular text. (It will be used, for example, in the title of standalone LaTeX or HTML output.) The block may contain just a title, a title and an author, or all three elements. If you want to include an author but no title, or a title and a date but no author, you need a blank line: Markdown Python % % Author Pandoc(Meta({'author': MetaList([MetaInlines([Str('Author')])])}), []) Markdown Python % My title % % June 15, 2006 Pandoc(Meta({'author': MetaList([MetaInlines([])]), 'date': MetaInlines([Str('June'), Space(), Str('15,'), Space(), Str('2006')]), 'title': MetaInlines([Str('My'), Space(), Str('title')])}), []) The title may occupy multiple lines, but continuation lines must begin with leading space, thus: Markdown Python % My title on multiple lines Pandoc(Meta({'title': MetaInlines([Str('My'), Space(), Str('title'), SoftBreak(), Str('on'), Space(), Str('multiple'), Space(), Str('lines')])}), []) If a document has multiple authors, the authors may be put on separate lines with leading space, or separated by semicolons, or both. So, all of the following are equivalent: Markdown Python % % Author One Author Two Pandoc(Meta({'author': MetaList([MetaInlines([Str('Author'), Space(), Str('One')]), MetaInlines([Str('Author'), Space(), Str('Two')])])}), []) Markdown Python % % Author One; Author Two Pandoc(Meta({'author': MetaList([MetaInlines([Str('Author'), Space(), Str('One')]), MetaInlines([Str('Author'), Space(), Str('Two')])])}), []) Markdown Python % % Author One; Author Two Pandoc(Meta({'author': MetaList([MetaInlines([Str('Author'), Space(), Str('One')]), MetaInlines([Str('Author'), Space(), Str('Two')])])}), []) The date must fit on one line. All three metadata fields may contain standard inline formatting (italics, links, footnotes, etc.). Title blocks will always be parsed, but they will affect the output only when the --standalone ( -s ) option is chosen. In HTML output, titles will appear twice: once in the document head -- this is the title that will appear at the top of the window in a browser -- and once at the beginning of the document body. The title in the document head can have an optional prefix attached ( --title-prefix or -T option). The title in the body appears as an H1 element with class \"title\", so it can be suppressed or reformatted with CSS. If a title prefix is specified with -T and no title block appears in the document, the title prefix will be used by itself as the HTML title. The man page writer extracts a title, man page section number, and other header and footer information from the title line. The title is assumed to be the first word on the title line, which may optionally end with a (single-digit) section number in parentheses. (There should be no space between the title and the parentheses.) Anything after this is assumed to be additional footer and header text. A single pipe character ( | ) should be used to separate the footer text from the header text. Thus, Markdown Python % PANDOC(1) Pandoc(Meta({'title': MetaInlines([Str('PANDOC(1)')])}), []) will yield a man page with the title PANDOC and section 1. Markdown Python % PANDOC(1) Pandoc User Manuals Pandoc(Meta({'title': MetaInlines([Str('PANDOC(1)'), Space(), Str('Pandoc'), Space(), Str('User'), Space(), Str('Manuals')])}), []) will also have \"Pandoc User Manuals\" in the footer. Markdown Python % PANDOC(1) Pandoc User Manuals | Version 4.0 Pandoc(Meta({'title': MetaInlines([Str('PANDOC(1)'), Space(), Str('Pandoc'), Space(), Str('User'), Space(), Str('Manuals'), Space(), Str('|'), Space(), Str('Version'), Space(), Str('4.0')])}), []) will also have \"Version 4.0\" in the header. Extension: yaml_metadata_block \u00b6 A YAML metadata block is a valid YAML object, delimited by a line of three hyphens ( --- ) at the top and a line of three hyphens ( --- ) or three dots ( ... ) at the bottom. A YAML metadata block may occur anywhere in the document, but if it is not at the beginning, it must be preceded by a blank line. (Note that, because of the way pandoc concatenates input files when several are provided, you may also keep the metadata in a separate YAML file and pass it to pandoc as an argument, along with your Markdown files: pandoc chap1.md chap2.md chap3.md metadata.yaml -s -o book.html Just be sure that the YAML file begins with --- and ends with --- or ... .) Alternatively, you can use the --metadata-file option. Using that approach however, you cannot reference content (like footnotes) from the main markdown input document. Metadata will be taken from the fields of the YAML object and added to any existing document metadata. Metadata can contain lists and objects (nested arbitrarily), but all string scalars will be interpreted as Markdown. Fields with names ending in an underscore will be ignored by pandoc. (They may be given a role by external processors.) Field names must not be interpretable as YAML numbers or boolean values (so, for example, yes , True , and 15 cannot be used as field names). A document may contain multiple metadata blocks. If two metadata blocks attempt to set the same field, the value from the second block will be taken. Each metadata block is handled internally as an independent YAML document. This means, for example, that any YAML anchors defined in a block cannot be referenced in another block. When pandoc is used with -t markdown to create a Markdown document, a YAML metadata block will be produced only if the -s/--standalone option is used. All of the metadata will appear in a single block at the beginning of the document. Note that YAML escaping rules must be followed. Thus, for example, if a title contains a colon, it must be quoted, and if it contains a backslash escape, then it must be ensured that it is not treated as a YAML escape sequence . The pipe character ( | ) can be used to begin an indented block that will be interpreted literally, without need for escaping. This form is necessary when the field contains blank lines or block-level formatting: Markdown Python --- title: 'This is the title: it contains a colon' author: - Author One - Author Two keywords: [nothing, nothingness] abstract: | This is the abstract. It consists of two paragraphs. ... Pandoc(Meta({'abstract': MetaBlocks([Para([Str('This'), Space(), Str('is'), Space(), Str('the'), Space(), Str('abstract.')]), Para([Str('It'), Space(), Str('consists'), Space(), Str('of'), Space(), Str('two'), Space(), Str('paragraphs.')])]), 'author': MetaList([MetaInlines([Str('Author'), Space(), Str('One')]), MetaInlines([Str('Author'), Space(), Str('Two')])]), 'keywords': MetaList([MetaInlines([Str('nothing')]), MetaInlines([Str('nothingness')])]), 'title': MetaInlines([Str('This'), Space(), Str('is'), Space(), Str('the'), Space(), Str('title:'), Space(), Str('it'), Space(), Str('contains'), Space(), Str('a'), Space(), Str('colon')])}), []) The literal block after the | must be indented relative to the line containing the | . If it is not, the YAML will be invalid and pandoc will not interpret it as metadata. For an overview of the complex rules governing YAML, see the Wikipedia entry on YAML syntax . Template variables will be set automatically from the metadata. Thus, for example, in writing HTML, the variable abstract will be set to the HTML equivalent of the Markdown in the abstract field: <p>This is the abstract.</p> <p>It consists of two paragraphs.</p> Variables can contain arbitrary YAML structures, but the template must match this structure. The author variable in the default templates expects a simple list or string, but can be changed to support more complicated structures. The following combination, for example, would add an affiliation to the author if one is given: Markdown Python --- title: The document title author: - name: Author One affiliation: University of Somewhere - name: Author Two affiliation: University of Nowhere ... Pandoc(Meta({'author': MetaList([MetaMap({'affiliation': MetaInlines([Str('University'), Space(), Str('of'), Space(), Str('Somewhere')]), 'name': MetaInlines([Str('Author'), Space(), Str('One')])}), MetaMap({'affiliation': MetaInlines([Str('University'), Space(), Str('of'), Space(), Str('Nowhere')]), 'name': MetaInlines([Str('Author'), Space(), Str('Two')])})]), 'title': MetaInlines([Str('The'), Space(), Str('document'), Space(), Str('title')])}), []) To use the structured authors in the example above, you would need a custom template: $for(author)$ $if(author.name)$ $author.name$$if(author.affiliation)$ ($author.affiliation$)$endif$ $else$ $author$ $endif$ $endfor$ Raw content to include in the document's header may be specified using header-includes ; however, it is important to mark up this content as raw code for a particular output format, using the raw_attribute extension ), or it will be interpreted as markdown. For example: Markdown Python --- header-includes: - | ```{=latex} \\let\\oldsection\\section \\renewcommand{\\section}[1]{\\clearpage\\oldsection{#1}} ``` ... Pandoc(Meta({'header-includes': MetaList([MetaBlocks([RawBlock(Format('latex'), '\\\\let\\\\oldsection\\\\section\\n\\\\renewcommand{\\\\section}[1]{\\\\clearpage\\\\oldsection{#1}}')])])}), []) Note: the yaml_metadata_block extension works with commonmark as well as markdown (and it is enabled by default in gfm and commonmark_x ). However, in these formats the following restrictions apply: The YAML metadata block must occur at the beginning of the document (and there can be only one). If multiple files are given as arguments to pandoc, only the first can be a YAML metadata block. The leaf nodes of the YAML structure are parsed in isolation from each other and from the rest of the document. So, for example, you can't use a reference link in these contexts if the link definition is somewhere else in the document. Backslash escapes \u00b6 Extension: all_symbols_escapable \u00b6 Except inside a code block or inline code, any punctuation or space character preceded by a backslash will be treated literally, even if it would normally indicate formatting. Thus, for example, if one writes Markdown Python *\\*hello\\** Pandoc(Meta({}), [Para([Emph([Str('*hello*')])])]) one will get <em>*hello*</em> instead of <strong>hello</strong> This rule is easier to remember than standard Markdown's rule, which allows only the following characters to be backslash-escaped: \\`*_{}[]()>#+-.! (However, if the markdown_strict format is used, the standard Markdown rule will be used.) A backslash-escaped space is parsed as a nonbreaking space. In TeX output, it will appear as ~ . In HTML and XML output, it will appear as a literal unicode nonbreaking space character (note that it will thus actually look \"invisible\" in the generated HTML source; you can still use the --ascii command-line option to make it appear as an explicit entity). A backslash-escaped newline (i.e. a backslash occurring at the end of a line) is parsed as a hard line break. It will appear in TeX output as \\\\ and in HTML as <br /> . This is a nice alternative to Markdown's \"invisible\" way of indicating hard line breaks using two trailing spaces on a line. Backslash escapes do not work in verbatim contexts. Inline formatting \u00b6 Emphasis \u00b6 To emphasize some text, surround it with * s or _ , like this: Markdown Python This text is _emphasized with underscores_, and this is *emphasized with asterisks*. Pandoc(Meta({}), [Para([Str('This'), Space(), Str('text'), Space(), Str('is'), Space(), Emph([Str('emphasized'), Space(), Str('with'), Space(), Str('underscores')]), Str(','), Space(), Str('and'), Space(), Str('this'), SoftBreak(), Str('is'), Space(), Emph([Str('emphasized'), Space(), Str('with'), Space(), Str('asterisks')]), Str('.')])]) Double * or _ produces strong emphasis : Markdown Python This is **strong emphasis** and __with underscores__. Pandoc(Meta({}), [Para([Str('This'), Space(), Str('is'), Space(), Strong([Str('strong'), Space(), Str('emphasis')]), Space(), Str('and'), Space(), Strong([Str('with'), Space(), Str('underscores')]), Str('.')])]) A * or _ character surrounded by spaces, or backslash-escaped, will not trigger emphasis: Markdown Python This is * not emphasized *, and \\*neither is this\\*. Pandoc(Meta({}), [Para([Str('This'), Space(), Str('is'), Space(), Str('*'), Space(), Str('not'), Space(), Str('emphasized'), Space(), Str('*,'), Space(), Str('and'), Space(), Str('*neither'), Space(), Str('is'), Space(), Str('this*.')])]) Extension: intraword_underscores \u00b6 Because _ is sometimes used inside words and identifiers, pandoc does not interpret a _ surrounded by alphanumeric characters as an emphasis marker. If you want to emphasize just part of a word, use * : Markdown Python feas*ible*, not feas*able*. Pandoc(Meta({}), [Para([Str('feas'), Emph([Str('ible')]), Str(','), Space(), Str('not'), Space(), Str('feas'), Emph([Str('able')]), Str('.')])]) Strikeout \u00b6 Extension: strikeout \u00b6 To strikeout a section of text with a horizontal line, begin and end it with ~~ . Thus, for example, Markdown Python This ~~is deleted text.~~ Pandoc(Meta({}), [Para([Str('This'), Space(), Strikeout([Str('is'), Space(), Str('deleted'), Space(), Str('text.')])])]) Superscripts and subscripts \u00b6 Extension: superscript , subscript \u00b6 Superscripts may be written by surrounding the superscripted text by ^ characters; subscripts may be written by surrounding the subscripted text by ~ characters. Thus, for example, Markdown Python H~2~O is a liquid. 2^10^ is 1024. Pandoc(Meta({}), [Para([Str('H'), Subscript([Str('2')]), Str('O'), Space(), Str('is'), Space(), Str('a'), Space(), Str('liquid.'), Space(), Str('2'), Superscript([Str('10')]), Space(), Str('is'), Space(), Str('1024.')])]) The text between ^...^ or ~...~ may not contain spaces or newlines. If the superscripted or subscripted text contains spaces, these spaces must be escaped with backslashes. (This is to prevent accidental superscripting and subscripting through the ordinary use of ~ and ^ , and also bad interactions with footnotes.) Thus, if you want the letter P with 'a cat' in subscripts, use P~a\\ cat~ , not P~a cat~ . Verbatim \u00b6 To make a short span of text verbatim, put it inside backticks: Markdown Python What is the difference between `>>=` and `>>`? Pandoc(Meta({}), [Para([Str('What'), Space(), Str('is'), Space(), Str('the'), Space(), Str('difference'), Space(), Str('between'), Space(), Code(('', [], []), '>>='), Space(), Str('and'), Space(), Code(('', [], []), '>>'), Str('?')])]) If the verbatim text includes a backtick, use double backticks: Markdown Python Here is a literal backtick `` ` ``. Pandoc(Meta({}), [Para([Str('Here'), Space(), Str('is'), Space(), Str('a'), Space(), Str('literal'), Space(), Str('backtick'), Space(), Code(('', [], []), '`'), Str('.')])]) (The spaces after the opening backticks and before the closing backticks will be ignored.) The general rule is that a verbatim span starts with a string of consecutive backticks (optionally followed by a space) and ends with a string of the same number of backticks (optionally preceded by a space). Note that backslash-escapes (and other Markdown constructs) do not work in verbatim contexts: Markdown Python This is a backslash followed by an asterisk: `\\*`. Pandoc(Meta({}), [Para([Str('This'), Space(), Str('is'), Space(), Str('a'), Space(), Str('backslash'), Space(), Str('followed'), Space(), Str('by'), Space(), Str('an'), Space(), Str('asterisk:'), Space(), Code(('', [], []), '\\\\*'), Str('.')])]) Extension: inline_code_attributes \u00b6 Attributes can be attached to verbatim text, just as with fenced code blocks : Markdown Python `<$>`{.haskell} Pandoc(Meta({}), [Para([Code(('', ['haskell'], []), '<$>')])]) Underline \u00b6 To underline text, use the underline class: Markdown Python [Underline]{.underline} Pandoc(Meta({}), [Para([Underline([Str('Underline')])])]) Or, without the bracketed_spans extension (but with native_spans ): Markdown Python <span class=\"underline\">Underline</span> Pandoc(Meta({}), [Para([Underline([Str('Underline')])])]) This will work in all output formats that support underline. Small caps \u00b6 To write small caps, use the smallcaps class: Markdown Python [Small caps]{.smallcaps} Pandoc(Meta({}), [Para([SmallCaps([Str('Small'), Space(), Str('caps')])])]) Or, without the bracketed_spans extension: Markdown Python <span class=\"smallcaps\">Small caps</span> Pandoc(Meta({}), [Para([SmallCaps([Str('Small'), Space(), Str('caps')])])]) For compatibility with other Markdown flavors, CSS is also supported: Markdown Python <span style=\"font-variant:small-caps;\">Small caps</span> Pandoc(Meta({}), [Para([SmallCaps([Str('Small'), Space(), Str('caps')])])]) This will work in all output formats that support small caps. Math \u00b6 Extension: tex_math_dollars \u00b6 Anything between two $ characters will be treated as TeX math. The opening $ must have a non-space character immediately to its right, while the closing $ must have a non-space character immediately to its left, and must not be followed immediately by a digit. Thus, $20,000 and $30,000 won't parse as math. If for some reason you need to enclose text in literal $ characters, backslash-escape them and they won't be treated as math delimiters. For display math, use $$ delimiters. (In this case, the delimiters may be separated from the formula by whitespace. However, there can be no blank lines betwen the opening and closing $$ delimiters.) TeX math will be printed in all output formats. How it is rendered depends on the output format: LaTeX. It will appear verbatim surrounded by \\(...\\) (for inline math) or \\[...\\] (for display math). Markdown, Emacs Org mode, ConTeXt, ZimWiki. It will appear verbatim surrounded by $...$ (for inline math) or $$...$$ (for display math). XWiki. It will appear verbatim surrounded by {{formula}}..{{/formula}} . reStructuredText. It will be rendered using an interpreted text role :math: . AsciiDoc. For AsciiDoc output format ( -t asciidoc ) it will appear verbatim surrounded by latexmath:[$...$] (for inline math) or [latexmath]++++\\[...\\]+++ (for display math). For AsciiDoctor output format ( -t asciidoctor ) the LaTex delimiters ( $..$ and \\[..\\] ) are omitted. Texinfo. It will be rendered inside a @math command. roff man, Jira markup. It will be rendered verbatim without $ 's. MediaWiki, DokuWiki. It will be rendered inside <math> tags. Textile. It will be rendered inside <span class=\"math\"> tags. RTF, OpenDocument. It will be rendered, if possible, using Unicode characters, and will otherwise appear verbatim. ODT. It will be rendered, if possible, using MathML. DocBook. If the --mathml flag is used, it will be rendered using MathML in an inlineequation or informalequation tag. Otherwise it will be rendered, if possible, using Unicode characters. Docx. It will be rendered using OMML math markup. FictionBook2. If the --webtex option is used, formulas are rendered as images using CodeCogs or other compatible web service, downloaded and embedded in the e-book. Otherwise, they will appear verbatim. HTML, Slidy, DZSlides, S5, EPUB. The way math is rendered in HTML will depend on the command-line options selected. Therefore see Math rendering in HTML above. Raw HTML \u00b6 Extension: raw_html \u00b6 Markdown allows you to insert raw HTML (or DocBook) anywhere in a document (except verbatim contexts, where < , > , and & are interpreted literally). (Technically this is not an extension, since standard Markdown allows it, but it has been made an extension so that it can be disabled if desired.) The raw HTML is passed through unchanged in HTML, S5, Slidy, Slideous, DZSlides, EPUB, Markdown, CommonMark, Emacs Org mode, and Textile output, and suppressed in other formats. For a more explicit way of including raw HTML in a Markdown document, see the raw_attribute extension . In the CommonMark format, if raw_html is enabled, superscripts, subscripts, strikeouts and small capitals will be represented as HTML. Otherwise, plain-text fallbacks will be used. Note that even if raw_html is disabled, tables will be rendered with HTML syntax if they cannot use pipe syntax. Extension: markdown_in_html_blocks \u00b6 Standard Markdown allows you to include HTML \"blocks\": blocks of HTML between balanced tags that are separated from the surrounding text with blank lines, and start and end at the left margin. Within these blocks, everything is interpreted as HTML, not Markdown; so (for example), * does not signify emphasis. Pandoc behaves this way when the markdown_strict format is used; but by default, pandoc interprets material between HTML block tags as Markdown. Thus, for example, pandoc will turn Markdown Python <table> <tr> <td>*one*</td> <td>[a link](https://google.com)</td> </tr> </table> Pandoc(Meta({}), [RawBlock(Format('html'), '<table>'), RawBlock(Format('html'), '<tr>'), RawBlock(Format('html'), '<td>'), Plain([Emph([Str('one')])]), RawBlock(Format('html'), '</td>'), RawBlock(Format('html'), '<td>'), Plain([Link(('', [], []), [Str('a'), Space(), Str('link')], ('https://google.com', ''))]), RawBlock(Format('html'), '</td>'), RawBlock(Format('html'), '</tr>'), RawBlock(Format('html'), '</table>')]) into <table> <tr> <td><em>one</em></td> <td><a href=\"https://google.com\">a link</a></td> </tr> </table> whereas Markdown.pl will preserve it as is. There is one exception to this rule: text between <script> , <style> , and <textarea> tags is not interpreted as Markdown. This departure from standard Markdown should make it easier to mix Markdown with HTML block elements. For example, one can surround a block of Markdown text with <div> tags without preventing it from being interpreted as Markdown. Extension: native_divs \u00b6 Use native pandoc Div blocks for content inside <div> tags. For the most part this should give the same output as markdown_in_html_blocks , but it makes it easier to write pandoc filters to manipulate groups of blocks. Extension: native_spans \u00b6 Use native pandoc Span blocks for content inside <span> tags. For the most part this should give the same output as raw_html , but it makes it easier to write pandoc filters to manipulate groups of inlines. Extension: raw_tex \u00b6 In addition to raw HTML, pandoc allows raw LaTeX, TeX, and ConTeXt to be included in a document. Inline TeX commands will be preserved and passed unchanged to the LaTeX and ConTeXt writers. Thus, for example, you can use LaTeX to include BibTeX citations: Markdown Python This result was proved in \\cite{jones.1967}. Pandoc(Meta({}), [Para([Str('This'), Space(), Str('result'), Space(), Str('was'), Space(), Str('proved'), Space(), Str('in'), Space(), RawInline(Format('tex'), '\\\\cite{jones.1967}'), Str('.')])]) Note that in LaTeX environments, like Markdown Python \\begin{tabular}{|l|l|}\\hline Age & Frequency \\\\ \\hline 18--25 & 15 \\\\ 26--35 & 33 \\\\ 36--45 & 22 \\\\ \\hline \\end{tabular} Pandoc(Meta({}), [RawBlock(Format('tex'), '\\\\begin{tabular}{|l|l|}\\\\hline\\nAge & Frequency \\\\\\\\ \\\\hline\\n18--25 & 15 \\\\\\\\\\n26--35 & 33 \\\\\\\\\\n36--45 & 22 \\\\\\\\ \\\\hline\\n\\\\end{tabular}')]) the material between the begin and end tags will be interpreted as raw LaTeX, not as Markdown. For a more explicit and flexible way of including raw TeX in a Markdown document, see the raw_attribute extension . Inline LaTeX is ignored in output formats other than Markdown, LaTeX, Emacs Org mode, and ConTeXt. Generic raw attribute \u00b6 Extension: raw_attribute \u00b6 Inline spans and fenced code blocks with a special kind of attribute will be parsed as raw content with the designated format. For example, the following produces a raw roff ms block: Markdown Python ```{=ms} .MYMACRO blah blah ``` Pandoc(Meta({}), [RawBlock(Format('ms'), '.MYMACRO\\nblah blah')]) And the following produces a raw html inline element: Markdown Python This is `<a>html</a>`{=html} Pandoc(Meta({}), [Para([Str('This'), Space(), Str('is'), Space(), RawInline(Format('html'), '<a>html</a>')])]) This can be useful to insert raw xml into docx documents, e.g. a pagebreak: Markdown Python ```{=openxml} <w:p> <w:r> <w:br w:type=\"page\"/> </w:r> </w:p> ``` Pandoc(Meta({}), [RawBlock(Format('openxml'), '<w:p>\\n <w:r>\\n <w:br w:type=\"page\"/>\\n </w:r>\\n</w:p>')]) The format name should match the target format name (see -t/--to , above, for a list, or use pandoc --list-output-formats ). Use openxml for docx output, opendocument for odt output, html5 for epub3 output, html4 for epub2 output, and latex , beamer , ms , or html5 for pdf output (depending on what you use for --pdf-engine ). This extension presupposes that the relevant kind of inline code or fenced code block is enabled. Thus, for example, to use a raw attribute with a backtick code block, backtick_code_blocks must be enabled. The raw attribute cannot be combined with regular attributes. LaTeX macros \u00b6 Extension: latex_macros \u00b6 When this extension is enabled, pandoc will parse LaTeX macro definitions and apply the resulting macros to all LaTeX math and raw LaTeX. So, for example, the following will work in all output formats, not just LaTeX: Markdown Python \\newcommand{\\tuple}[1]{\\langle #1 \\rangle} $\\tuple{a, b, c}$ Pandoc(Meta({}), [RawBlock(Format('tex'), '\\\\newcommand{\\\\tuple}[1]{\\\\langle #1 \\\\rangle}'), Para([Math(InlineMath(), '\\\\langle a, b, c \\\\rangle')])]) Note that LaTeX macros will not be applied if they occur inside a raw span or block marked with the raw_attribute extension . When latex_macros is disabled, the raw LaTeX and math will not have macros applied. This is usually a better approach when you are targeting LaTeX or PDF. Macro definitions in LaTeX will be passed through as raw LaTeX only if latex_macros is not enabled. Macro definitions in Markdown source (or other formats allowing raw_tex ) will be passed through regardless of whether latex_macros is enabled. Links \u00b6 Markdown allows links to be specified in several ways. Automatic links \u00b6 If you enclose a URL or email address in pointy brackets, it will become a link: Markdown Python <https://google.com> <sam@green.eggs.ham> Pandoc(Meta({}), [Para([Link(('', ['uri'], []), [Str('https://google.com')], ('https://google.com', '')), SoftBreak(), Link(('', ['email'], []), [Str('sam@green.eggs.ham')], ('mailto:sam@green.eggs.ham', ''))])]) Inline links \u00b6 An inline link consists of the link text in square brackets, followed by the URL in parentheses. (Optionally, the URL can be followed by a link title, in quotes.) Markdown Python This is an [inline link](/url), and here's [one with a title](https://fsf.org \"click here for a good time!\"). Pandoc(Meta({}), [Para([Str('This'), Space(), Str('is'), Space(), Str('an'), Space(), Link(('', [], []), [Str('inline'), Space(), Str('link')], ('/url', '')), Str(','), Space(), Str('and'), Space(), Str('here\u2019s'), Space(), Link(('', [], []), [Str('one'), Space(), Str('with'), SoftBreak(), Str('a'), Space(), Str('title')], ('https://fsf.org', 'click here for a good time!')), Str('.')])]) There can be no space between the bracketed part and the parenthesized part. The link text can contain formatting (such as emphasis), but the title cannot. Email addresses in inline links are not autodetected, so they have to be prefixed with mailto : Markdown Python [Write me!](mailto:sam@green.eggs.ham) Pandoc(Meta({}), [Para([Link(('', [], []), [Str('Write'), Space(), Str('me!')], ('mailto:sam@green.eggs.ham', ''))])]) Reference links \u00b6 An explicit reference link has two parts, the link itself and the link definition, which may occur elsewhere in the document (either before or after the link). The link consists of link text in square brackets, followed by a label in square brackets. (There cannot be space between the two unless the spaced_reference_links extension is enabled.) The link definition consists of the bracketed label, followed by a colon and a space, followed by the URL, and optionally (after a space) a link title either in quotes or in parentheses. The label must not be parseable as a citation (assuming the citations extension is enabled): citations take precedence over link labels. Here are some examples: Markdown Python [blah][my label 1], [blah][my label 2], [blah][my label 3], [blah][my label 4]. [my label 1]: /foo/bar.html \"My title, optional\" [my label 2]: /foo [my label 3]: https://fsf.org (The free software foundation) [my label 4]: /bar#special 'A title in single quotes' Pandoc(Meta({}), [Para([Link(('', [], []), [Str('blah')], ('/foo/bar.html', 'My title, optional')), Str(','), Space(), Link(('', [], []), [Str('blah')], ('/foo', '')), Str(','), Space(), Link(('', [], []), [Str('blah')], ('https://fsf.org', 'The free software foundation')), Str(','), Space(), Link(('', [], []), [Str('blah')], ('/bar#special', 'A title in single quotes')), Str('.')])]) The URL may optionally be surrounded by angle brackets: Markdown Python [blah][my label 5] [my label 5]: <http://foo.bar.baz> Pandoc(Meta({}), [Para([Link(('', [], []), [Str('blah')], ('http://foo.bar.baz', ''))])]) The title may go on the next line: Markdown Python [blah][my label 3] [my label 3]: https://fsf.org \"The free software foundation\" Pandoc(Meta({}), [Para([Link(('', [], []), [Str('blah')], ('https://fsf.org', 'The free software foundation'))])]) Note that link labels are not case sensitive. So, this will work: Markdown Python Here is [my link][FOO] [Foo]: /bar/baz Pandoc(Meta({}), [Para([Str('Here'), Space(), Str('is'), Space(), Link(('', [], []), [Str('my'), Space(), Str('link')], ('/bar/baz', ''))])]) In an implicit reference link, the second pair of brackets is empty: Markdown Python See [my website][]. [my website]: http://foo.bar.baz Pandoc(Meta({}), [Para([Str('See'), Space(), Link(('', [], []), [Str('my'), Space(), Str('website')], ('http://foo.bar.baz', '')), Str('.')])]) Note: In Markdown.pl and most other Markdown implementations, reference link definitions cannot occur in nested constructions such as list items or block quotes. Pandoc lifts this arbitrary seeming restriction. So the following is fine in pandoc, though not in most other implementations: Markdown Python > My block [quote]. > > [quote]: /foo Pandoc(Meta({}), [BlockQuote([Para([Str('My'), Space(), Str('block'), Space(), Link(('', [], []), [Str('quote')], ('/foo', '')), Str('.')])])]) Extension: shortcut_reference_links \u00b6 In a shortcut reference link, the second pair of brackets may be omitted entirely: Markdown Python See [my website]. [my website]: http://foo.bar.baz Pandoc(Meta({}), [Para([Str('See'), Space(), Link(('', [], []), [Str('my'), Space(), Str('website')], ('http://foo.bar.baz', '')), Str('.')])]) Internal links \u00b6 To link to another section of the same document, use the automatically generated identifier (see Heading identifiers ). For example: Markdown Python See the [Introduction](#introduction). Pandoc(Meta({}), [Para([Str('See'), Space(), Str('the'), Space(), Link(('', [], []), [Str('Introduction')], ('#introduction', '')), Str('.')])]) or Markdown Python See the [Introduction]. [Introduction]: #introduction Pandoc(Meta({}), [Para([Str('See'), Space(), Str('the'), Space(), Link(('', [], []), [Str('Introduction')], ('#introduction', '')), Str('.')])]) Internal links are currently supported for HTML formats (including HTML slide shows and EPUB), LaTeX, and ConTeXt. Images \u00b6 A link immediately preceded by a ! will be treated as an image. The link text will be used as the image's alt text: Markdown Python ![la lune](lalune.jpg \"Voyage to the moon\") ![movie reel] [movie reel]: movie.gif Pandoc(Meta({}), [Para([Image(('', [], []), [Str('la'), Space(), Str('lune')], ('lalune.jpg', 'fig:Voyage to the moon'))]), Para([Image(('', [], []), [Str('movie'), Space(), Str('reel')], ('movie.gif', 'fig:'))])]) Extension: implicit_figures \u00b6 An image with nonempty alt text, occurring by itself in a paragraph, will be rendered as a figure with a caption. The image's alt text will be used as the caption. Markdown Python ![This is the caption](/url/of/image.png) Pandoc(Meta({}), [Para([Image(('', [], []), [Str('This'), Space(), Str('is'), Space(), Str('the'), Space(), Str('caption')], ('/url/of/image.png', 'fig:'))])]) How this is rendered depends on the output format. Some output formats (e.g. RTF) do not yet support figures. In those formats, you'll just get an image in a paragraph by itself, with no caption. If you just want a regular inline image, just make sure it is not the only thing in the paragraph. One way to do this is to insert a nonbreaking space after the image: Markdown Python ![This image won't be a figure](/url/of/image.png)\\ Pandoc(Meta({}), [Para([Image(('', [], []), [Str('This'), Space(), Str('image'), Space(), Str('won\u2019t'), Space(), Str('be'), Space(), Str('a'), Space(), Str('figure')], ('/url/of/image.png', '')), LineBreak()])]) Note that in reveal.js slide shows, an image in a paragraph by itself that has the stretch class will fill the screen, and the caption and figure tags will be omitted. Extension: link_attributes \u00b6 Attributes can be set on links and images: Markdown Python An inline ![image](foo.jpg){#id .class width=30 height=20px} and a reference ![image][ref] with attributes. [ref]: foo.jpg \"optional title\" {#id .class key=val key2=\"val 2\"} Pandoc(Meta({}), [Para([Str('An'), Space(), Str('inline'), Space(), Image(('id', ['class'], [('width', '30'), ('height', '20px')]), [Str('image')], ('foo.jpg', '')), SoftBreak(), Str('and'), Space(), Str('a'), Space(), Str('reference'), Space(), Image(('id', ['class'], [('key', 'val'), ('key2', 'val 2')]), [Str('image')], ('foo.jpg', 'optional title')), Space(), Str('with'), Space(), Str('attributes.')])]) (This syntax is compatible with PHP Markdown Extra when only #id and .class are used.) For HTML and EPUB, all known HTML5 attributes except width and height (but including srcset and sizes ) are passed through as is. Unknown attributes are passed through as custom attributes, with data- prepended. The other writers ignore attributes that are not specifically supported by their output format. The width and height attributes on images are treated specially. When used without a unit, the unit is assumed to be pixels. However, any of the following unit identifiers can be used: px , cm , mm , in , inch and % . There must not be any spaces between the number and the unit. For example: Markdown Python ![](file.jpg){ width=50% } Pandoc(Meta({}), [Para([Image(('', [], [('width', '50%')]), [], ('file.jpg', ''))])]) Dimensions may be converted to a form that is compatible with the output format (for example, dimensions given in pixels will be converted to inches when converting HTML to LaTeX). Conversion between pixels and physical measurements is affected by the --dpi option (by default, 96 dpi is assumed, unless the image itself contains dpi information). The % unit is generally relative to some available space. For example the above example will render to the following. HTML: <img href=\"file.jpg\" style=\"width: 50%;\" /> LaTeX: \\includegraphics[width=0.5\\textwidth,height=\\textheight]{file.jpg} (If you're using a custom template, you need to configure graphicx as in the default template.) ConTeXt: \\externalfigure[file.jpg][width=0.5\\textwidth] Some output formats have a notion of a class ( ConTeXt ) or a unique identifier (LaTeX \\caption ), or both (HTML). When no width or height attributes are specified, the fallback is to look at the image resolution and the dpi metadata embedded in the image file. Divs and Spans \u00b6 Using the native_divs and native_spans extensions (see above ), HTML syntax can be used as part of markdown to create native Div and Span elements in the pandoc AST (as opposed to raw HTML). However, there is also nicer syntax available: Extension: fenced_divs \u00b6 Allow special fenced syntax for native Div blocks. A Div starts with a fence containing at least three consecutive colons plus some attributes. The attributes may optionally be followed by another string of consecutive colons. The attribute syntax is exactly as in fenced code blocks (see Extension: fenced_code_attributes ). As with fenced code blocks, one can use either attributes in curly braces or a single unbraced word, which will be treated as a class name. The Div ends with another line containing a string of at least three consecutive colons. The fenced Div should be separated by blank lines from preceding and following blocks. Example: Markdown Python ::::: {#special .sidebar} Here is a paragraph. And another. ::::: Pandoc(Meta({}), [Div(('special', ['sidebar'], []), [Para([Str('Here'), Space(), Str('is'), Space(), Str('a'), Space(), Str('paragraph.')]), Para([Str('And'), Space(), Str('another.')])])]) Fenced divs can be nested. Opening fences are distinguished because they must have attributes: Markdown Python ::: Warning :::::: This is a warning. ::: Danger This is a warning within a warning. ::: :::::::::::::::::: Pandoc(Meta({}), [Div(('', ['Warning'], []), [Para([Str('This'), Space(), Str('is'), Space(), Str('a'), Space(), Str('warning.')]), Div(('', ['Danger'], []), [Para([Str('This'), Space(), Str('is'), Space(), Str('a'), Space(), Str('warning'), Space(), Str('within'), Space(), Str('a'), Space(), Str('warning.')])])])]) Fences without attributes are always closing fences. Unlike with fenced code blocks, the number of colons in the closing fence need not match the number in the opening fence. However, it can be helpful for visual clarity to use fences of different lengths to distinguish nested divs from their parents. Extension: bracketed_spans \u00b6 A bracketed sequence of inlines, as one would use to begin a link, will be treated as a Span with attributes if it is followed immediately by attributes: Markdown Python [This is *some text*]{.class key=\"val\"} Pandoc(Meta({}), [Para([Span(('', ['class'], [('key', 'val')]), [Str('This'), Space(), Str('is'), Space(), Emph([Str('some'), Space(), Str('text')])])])]) Footnotes \u00b6 Extension: footnotes \u00b6 Pandoc's Markdown allows footnotes, using the following syntax: Markdown Python Here is a footnote reference,[^1] and another.[^longnote] [^1]: Here is the footnote. [^longnote]: Here's one with multiple blocks. Subsequent paragraphs are indented to show that they belong to the previous footnote. { some.code } The whole paragraph can be indented, or just the first line. In this way, multi-paragraph footnotes work like multi-paragraph list items. This paragraph won't be part of the note, because it isn't indented. Pandoc(Meta({}), [Para([Str('Here'), Space(), Str('is'), Space(), Str('a'), Space(), Str('footnote'), Space(), Str('reference,'), Note([Para([Str('Here'), Space(), Str('is'), Space(), Str('the'), Space(), Str('footnote.')])]), Space(), Str('and'), Space(), Str('another.'), Note([Para([Str('Here\u2019s'), Space(), Str('one'), Space(), Str('with'), Space(), Str('multiple'), Space(), Str('blocks.')]), Para([Str('Subsequent'), Space(), Str('paragraphs'), Space(), Str('are'), Space(), Str('indented'), Space(), Str('to'), Space(), Str('show'), Space(), Str('that'), Space(), Str('they'), SoftBreak(), Str('belong'), Space(), Str('to'), Space(), Str('the'), Space(), Str('previous'), Space(), Str('footnote.')]), CodeBlock(('', [], []), '{ some.code }'), Para([Str('The'), Space(), Str('whole'), Space(), Str('paragraph'), Space(), Str('can'), Space(), Str('be'), Space(), Str('indented,'), Space(), Str('or'), Space(), Str('just'), Space(), Str('the'), Space(), Str('first'), SoftBreak(), Str('line.'), Space(), Str('In'), Space(), Str('this'), Space(), Str('way,'), Space(), Str('multi-paragraph'), Space(), Str('footnotes'), Space(), Str('work'), Space(), Str('like'), SoftBreak(), Str('multi-paragraph'), Space(), Str('list'), Space(), Str('items.')])])]), Para([Str('This'), Space(), Str('paragraph'), Space(), Str('won\u2019t'), Space(), Str('be'), Space(), Str('part'), Space(), Str('of'), Space(), Str('the'), Space(), Str('note,'), Space(), Str('because'), Space(), Str('it'), SoftBreak(), Str('isn\u2019t'), Space(), Str('indented.')])]) The identifiers in footnote references may not contain spaces, tabs, or newlines. These identifiers are used only to correlate the footnote reference with the note itself; in the output, footnotes will be numbered sequentially. The footnotes themselves need not be placed at the end of the document. They may appear anywhere except inside other block elements (lists, block quotes, tables, etc.). Each footnote should be separated from surrounding content (including other footnotes) by blank lines. Extension: inline_notes \u00b6 Inline footnotes are also allowed (though, unlike regular notes, they cannot contain multiple paragraphs). The syntax is as follows: Markdown Python Here is an inline note.^[Inlines notes are easier to write, since you don't have to pick an identifier and move down to type the note.] Pandoc(Meta({}), [Para([Str('Here'), Space(), Str('is'), Space(), Str('an'), Space(), Str('inline'), Space(), Str('note.'), Note([Para([Str('Inlines'), Space(), Str('notes'), Space(), Str('are'), Space(), Str('easier'), Space(), Str('to'), Space(), Str('write,'), Space(), Str('since'), SoftBreak(), Str('you'), Space(), Str('don\u2019t'), Space(), Str('have'), Space(), Str('to'), Space(), Str('pick'), Space(), Str('an'), Space(), Str('identifier'), Space(), Str('and'), Space(), Str('move'), Space(), Str('down'), Space(), Str('to'), Space(), Str('type'), Space(), Str('the'), SoftBreak(), Str('note.')])])])]) Inline and regular footnotes may be mixed freely. Citation syntax \u00b6 Extension: citations \u00b6 To cite a bibliographic item with an identifier foo, use the syntax @foo . Normal citations should be included in square brackets, with semicolons separating distinct items: Markdown Python Blah blah [@doe99; @smith2000; @smith2004]. Pandoc(Meta({}), [Para([Str('Blah'), Space(), Str('blah'), Space(), Cite([Citation('doe99', [], [], NormalCitation(), 1, 0), Citation('smith2000', [], [], NormalCitation(), 1, 0), Citation('smith2004', [], [], NormalCitation(), 1, 0)], [Str('[@doe99;'), Space(), Str('@smith2000;'), Space(), Str('@smith2004]')]), Str('.')])]) How this is rendered depends on the citation style. In an author-date style, it might render as Markdown Python Blah blah (Doe 1999, Smith 2000, 2004). Pandoc(Meta({}), [Para([Str('Blah'), Space(), Str('blah'), Space(), Str('(Doe'), Space(), Str('1999,'), Space(), Str('Smith'), Space(), Str('2000,'), Space(), Str('2004).')])]) In a footnote style, it might render as Markdown Python Blah blah.[^1] [^1]: John Doe, \"Frogs,\" *Journal of Amphibians* 44 (1999); Susan Smith, \"Flies,\" *Journal of Insects* (2000); Susan Smith, \"Bees,\" *Journal of Insects* (2004). Pandoc(Meta({}), [Para([Str('Blah'), Space(), Str('blah.'), Note([Para([Str('John'), Space(), Str('Doe,'), Space(), Quoted(DoubleQuote(), [Str('Frogs,')]), Space(), Emph([Str('Journal'), Space(), Str('of'), Space(), Str('Amphibians')]), Space(), Str('44'), Space(), Str('(1999);'), SoftBreak(), Str('Susan'), Space(), Str('Smith,'), Space(), Quoted(DoubleQuote(), [Str('Flies,')]), Space(), Emph([Str('Journal'), Space(), Str('of'), Space(), Str('Insects')]), Space(), Str('(2000);'), SoftBreak(), Str('Susan'), Space(), Str('Smith,'), Space(), Quoted(DoubleQuote(), [Str('Bees,')]), Space(), Emph([Str('Journal'), Space(), Str('of'), Space(), Str('Insects')]), Space(), Str('(2004).')])])])]) See the CSL user documentation for more information about CSL styles and how they affect rendering. Unless a citation key start with a letter, digit, or _ , and contains only alphanumerics and single internal punctuation characters ( :.#$%&-+?<>~/ ), it must be surrounded by curly braces, which are not considered part of the key. In @Foo_bar.baz. , the key is Foo_bar.baz because the final period is not internal punctuation, so it is not included in the key. In @{Foo_bar.baz.} , the key is Foo_bar.baz. , including the final period. In @Foo_bar--baz , the key is Foo_bar because the repeated internal punctuation characters terminate the key. The curly braces are recommended if you use URLs as keys: [@{https://example.com/bib?name=foobar&date=2000}, p. 33] . Citation items may optionally include a prefix, a locator, and a suffix. In Markdown Python Blah blah [see @doe99, pp. 33-35 and *passim*; @smith04, chap. 1]. Pandoc(Meta({}), [Para([Str('Blah'), Space(), Str('blah'), Space(), Cite([Citation('doe99', [Str('see')], [Str(','), Space(), Str('pp.\\xa033-35'), Space(), Str('and'), Space(), Emph([Str('passim')])], NormalCitation(), 1, 0), Citation('smith04', [], [Str(','), Space(), Str('chap.\\xa01')], NormalCitation(), 1, 0)], [Str('[see'), Space(), Str('@doe99,'), Space(), Str('pp.'), Space(), Str('33-35'), Space(), Str('and'), Space(), Str('*passim*;'), Space(), Str('@smith04,'), Space(), Str('chap.'), Space(), Str('1]')]), Str('.')])]) The first item ( doe99 ) has prefix see , locator pp. 33-35 , and suffix and *passim* . The second item ( smith04 ) has locator chap. 1 and no prefix or suffix. Pandoc uses some heuristics to separate the locator from the rest of the subject. It is sensitive to the locator terms defined in the CSL locale files . Either abbreviated or unabbreviated forms are accepted. In the en-US locale, locator terms can be written in either singular or plural forms, as book , bk. / bks. ; chapter , chap. / chaps. ; column , col. / cols. ; figure , fig. / figs. ; folio , fol. / fols. ; number , no. / nos. ; line , l. / ll. ; note , n. / nn. ; opus , op. / opp. ; page , p. / pp. ; paragraph , para. / paras. ; part , pt. / pts. ; section , sec. / secs. ; sub verbo , s.v. / s.vv. ; verse , v. / vv. ; volume , vol. / vols. ; \u00b6 / \u00b6\u00b6 ; \u00a7 / \u00a7\u00a7 . If no locator term is used, \"page\" is assumed. In complex cases, you can force something to be treated as a locator by enclosing it in curly braces or prevent parsing the suffix as locator by prepending curly braces: Markdown Python [@smith{ii, A, D-Z}, with a suffix] [@smith, {pp. iv, vi-xi, (xv)-(xvii)} with suffix here] [@smith{}, 99 years later] Pandoc(Meta({}), [Para([Cite([Citation('smith', [], [Str('{ii,'), Space(), Str('A,'), Space(), Str('D-Z},'), Space(), Str('with'), Space(), Str('a'), Space(), Str('suffix')], NormalCitation(), 1, 0)], [Str('[@smith{ii,'), Space(), Str('A,'), Space(), Str('D-Z},'), Space(), Str('with'), Space(), Str('a'), Space(), Str('suffix]')]), SoftBreak(), Cite([Citation('smith', [], [Str(','), Space(), Str('{pp.\\xa0iv,'), Space(), Str('vi-xi,'), Space(), Str('(xv)-(xvii)}'), Space(), Str('with'), Space(), Str('suffix'), Space(), Str('here')], NormalCitation(), 2, 0)], [Str('[@smith,'), Space(), Str('{pp.'), Space(), Str('iv,'), Space(), Str('vi-xi,'), Space(), Str('(xv)-(xvii)}'), Space(), Str('with'), Space(), Str('suffix'), Space(), Str('here]')]), SoftBreak(), Cite([Citation('smith', [], [Str('{},'), Space(), Str('99'), Space(), Str('years'), Space(), Str('later')], NormalCitation(), 3, 0)], [Str('[@smith{},'), Space(), Str('99'), Space(), Str('years'), Space(), Str('later]')])])]) A minus sign ( - ) before the @ will suppress mention of the author in the citation. This can be useful when the author is already mentioned in the text: Markdown Python Smith says blah [-@smith04]. Pandoc(Meta({}), [Para([Str('Smith'), Space(), Str('says'), Space(), Str('blah'), Space(), Cite([Citation('smith04', [], [], SuppressAuthor(), 1, 0)], [Str('[-@smith04]')]), Str('.')])]) You can also write an author-in-text citation, by omitting the square brackets: Markdown Python @smith04 says blah. @smith04 [p. 33] says blah. Pandoc(Meta({}), [Para([Cite([Citation('smith04', [], [], AuthorInText(), 1, 0)], [Str('@smith04')]), Space(), Str('says'), Space(), Str('blah.')]), Para([Cite([Citation('smith04', [], [Str('p.\\xa033')], AuthorInText(), 2, 0)], [Str('@smith04'), Space(), Str('[p.'), Space(), Str('33]')]), Space(), Str('says'), Space(), Str('blah.')])]) This will cause the author's name to be rendered, followed by the bibliographical details. Use this form when you want to make the citation the subject of a sentence. When you are using a note style, it is usually better to let citeproc create the footnotes from citations rather than writing an explicit note. If you do write an explicit note that contains a citation, note that normal citations will be put in parentheses, while author-in-text citations will not. For this reason, it is sometimes preferable to use the author-in-text style inside notes when using a note style. The point of this rule is to ensure that normal paragraphs starting with people's initials, like Markdown Python B. Russell was an English philosopher. Pandoc(Meta({}), [Para([Str('B.'), Space(), Str('Russell'), Space(), Str('was'), Space(), Str('an'), Space(), Str('English'), Space(), Str('philosopher.')])]) do not get treated as list items. This rule will not prevent Markdown Python (C) 2007 Joe Smith Pandoc(Meta({}), [OrderedList((3, UpperAlpha(), TwoParens()), [[Plain([Str('2007'), Space(), Str('Joe'), Space(), Str('Smith')])]])]) from being interpreted as a list item. In this case, a backslash escape can be used: Markdown Python (C\\) 2007 Joe Smith Pandoc(Meta({}), [Para([Str('(C)'), Space(), Str('2007'), Space(), Str('Joe'), Space(), Str('Smith')])]) \u21a9 I have been influenced by the suggestions of David Wheeler . \u21a9 This scheme is due to Michel Fortin, who proposed it on the Markdown discussion list . \u21a9","title":"Pandoc's Markdown"},{"location":"markdown/#pandocs-markdown","text":"Source: https://raw.githubusercontent.com/jgm/pandoc/2.14.2/MANUAL.txt Pandoc understands an extended and slightly revised version of John Gruber's Markdown syntax. This document explains the syntax, noting differences from standard Markdown. Except where noted, these differences can be suppressed by using the markdown_strict format instead of markdown . Extensions can be enabled or disabled to specify the behavior more granularly. They are described in the following. See also Extensions above, for extensions that work also on other formats.","title":"Pandoc's Markdown"},{"location":"markdown/#philosophy","text":"Markdown is designed to be easy to write, and, even more importantly, easy to read: A Markdown-formatted document should be publishable as-is, as plain text, without looking like it's been marked up with tags or formatting instructions. -- John Gruber This principle has guided pandoc's decisions in finding syntax for tables, footnotes, and other extensions. There is, however, one respect in which pandoc's aims are different from the original aims of Markdown. Whereas Markdown was originally designed with HTML generation in mind, pandoc is designed for multiple output formats. Thus, while pandoc allows the embedding of raw HTML, it discourages it, and provides other, non-HTMLish ways of representing important document elements like definition lists, tables, mathematics, and footnotes.","title":"Philosophy"},{"location":"markdown/#paragraphs","text":"A paragraph is one or more lines of text followed by one or more blank lines. Newlines are treated as spaces, so you can reflow your paragraphs as you like. If you need a hard line break, put two or more spaces at the end of a line.","title":"Paragraphs"},{"location":"markdown/#extension-escaped_line_breaks","text":"A backslash followed by a newline is also a hard line break. Note: in multiline and grid table cells, this is the only way to create a hard line break, since trailing spaces in the cells are ignored.","title":"Extension: escaped_line_breaks"},{"location":"markdown/#headings","text":"There are two kinds of headings: Setext and ATX.","title":"Headings"},{"location":"markdown/#setext-style-headings","text":"A setext-style heading is a line of text \"underlined\" with a row of = signs (for a level-one heading) or - signs (for a level-two heading): Markdown Python A level-one heading =================== A level-two heading ------------------- Pandoc(Meta({}), [Header(1, ('a-level-one-heading', [], []), [Str('A'), Space(), Str('level-one'), Space(), Str('heading')]), Header(2, ('a-level-two-heading', [], []), [Str('A'), Space(), Str('level-two'), Space(), Str('heading')])]) The heading text can contain inline formatting, such as emphasis (see Inline formatting , below).","title":"Setext-style headings"},{"location":"markdown/#atx-style-headings","text":"An ATX-style heading consists of one to six # signs and a line of text, optionally followed by any number of # signs. The number of # signs at the beginning of the line is the heading level: Markdown Python ## A level-two heading ### A level-three heading ### Pandoc(Meta({}), [Header(2, ('a-level-two-heading', [], []), [Str('A'), Space(), Str('level-two'), Space(), Str('heading')]), Header(3, ('a-level-three-heading', [], []), [Str('A'), Space(), Str('level-three'), Space(), Str('heading')])]) As with setext-style headings, the heading text can contain formatting: Markdown Python # A level-one heading with a [link](/url) and *emphasis* Pandoc(Meta({}), [Header(1, ('a-level-one-heading-with-a-link-and-emphasis', [], []), [Str('A'), Space(), Str('level-one'), Space(), Str('heading'), Space(), Str('with'), Space(), Str('a'), Space(), Link(('', [], []), [Str('link')], ('/url', '')), Space(), Str('and'), Space(), Emph([Str('emphasis')])])])","title":"ATX-style headings"},{"location":"markdown/#extension-blank_before_header","text":"Standard Markdown syntax does not require a blank line before a heading. Pandoc does require this (except, of course, at the beginning of the document). The reason for the requirement is that it is all too easy for a # to end up at the beginning of a line by accident (perhaps through line wrapping). Consider, for example: Markdown Python I like several of their flavors of ice cream: #22, for example, and #5. Pandoc(Meta({}), [Para([Str('I'), Space(), Str('like'), Space(), Str('several'), Space(), Str('of'), Space(), Str('their'), Space(), Str('flavors'), Space(), Str('of'), Space(), Str('ice'), Space(), Str('cream:'), SoftBreak(), Str('#22,'), Space(), Str('for'), Space(), Str('example,'), Space(), Str('and'), Space(), Str('#5.')])])","title":"Extension: blank_before_header"},{"location":"markdown/#extension-space_in_atx_header","text":"Many Markdown implementations do not require a space between the opening # s of an ATX heading and the heading text, so that #5 bolt and #hashtag count as headings. With this extension, pandoc does require the space.","title":"Extension: space_in_atx_header"},{"location":"markdown/#heading-identifiers","text":"See also the auto_identifiers extension above.","title":"Heading identifiers"},{"location":"markdown/#extension-header_attributes","text":"Headings can be assigned attributes using this syntax at the end of the line containing the heading text: {#identifier .class .class key=value key=value} Thus, for example, the following headings will all be assigned the identifier foo : Markdown Python # My heading {#foo} ## My heading ## {#foo} My other heading {#foo} --------------- Pandoc(Meta({}), [Header(1, ('foo', [], []), [Str('My'), Space(), Str('heading')]), Header(2, ('foo', [], []), [Str('My'), Space(), Str('heading')]), Header(2, ('foo', [], []), [Str('My'), Space(), Str('other'), Space(), Str('heading')])]) (This syntax is compatible with PHP Markdown Extra .) Note that although this syntax allows assignment of classes and key/value attributes, writers generally don't use all of this information. Identifiers, classes, and key/value attributes are used in HTML and HTML-based formats such as EPUB and slidy. Identifiers are used for labels and link anchors in the LaTeX, ConTeXt, Textile, Jira markup, and AsciiDoc writers. Headings with the class unnumbered will not be numbered, even if --number-sections is specified. A single hyphen ( - ) in an attribute context is equivalent to .unnumbered , and preferable in non-English documents. So, Markdown Python # My heading {-} Pandoc(Meta({}), [Header(1, ('my-heading', ['unnumbered'], []), [Str('My'), Space(), Str('heading')])]) is just the same as Markdown Python # My heading {.unnumbered} Pandoc(Meta({}), [Header(1, ('my-heading', ['unnumbered'], []), [Str('My'), Space(), Str('heading')])]) If the unlisted class is present in addition to unnumbered , the heading will not be included in a table of contents. (Currently this feature is only implemented for certain formats: those based on LaTeX and HTML, PowerPoint, and RTF.)","title":"Extension: header_attributes"},{"location":"markdown/#extension-implicit_header_references","text":"Pandoc behaves as if reference links have been defined for each heading. So, to link to a heading Markdown Python # Heading identifiers in HTML Pandoc(Meta({}), [Header(1, ('heading-identifiers-in-html', [], []), [Str('Heading'), Space(), Str('identifiers'), Space(), Str('in'), Space(), Str('HTML')])]) you can simply write Markdown Python # Heading identifiers in HTML [Heading identifiers in HTML] Pandoc(Meta({}), [Header(1, ('heading-identifiers-in-html', [], []), [Str('Heading'), Space(), Str('identifiers'), Space(), Str('in'), Space(), Str('HTML')]), Para([Link(('', [], []), [Str('Heading'), Space(), Str('identifiers'), Space(), Str('in'), Space(), Str('HTML')], ('#heading-identifiers-in-html', ''))])]) or Markdown Python # Heading identifiers in HTML [Heading identifiers in HTML][] Pandoc(Meta({}), [Header(1, ('heading-identifiers-in-html', [], []), [Str('Heading'), Space(), Str('identifiers'), Space(), Str('in'), Space(), Str('HTML')]), Para([Link(('', [], []), [Str('Heading'), Space(), Str('identifiers'), Space(), Str('in'), Space(), Str('HTML')], ('#heading-identifiers-in-html', ''))])]) or Markdown Python # Heading identifiers in HTML [the section on heading identifiers][heading identifiers in HTML] Pandoc(Meta({}), [Header(1, ('heading-identifiers-in-html', [], []), [Str('Heading'), Space(), Str('identifiers'), Space(), Str('in'), Space(), Str('HTML')]), Para([Link(('', [], []), [Str('the'), Space(), Str('section'), Space(), Str('on'), Space(), Str('heading'), Space(), Str('identifiers')], ('#heading-identifiers-in-html', ''))])]) instead of giving the identifier explicitly: Markdown Python [Heading identifiers in HTML](#heading-identifiers-in-html) Pandoc(Meta({}), [Para([Link(('', [], []), [Str('Heading'), Space(), Str('identifiers'), Space(), Str('in'), Space(), Str('HTML')], ('#heading-identifiers-in-html', ''))])]) If there are multiple headings with identical text, the corresponding reference will link to the first one only, and you will need to use explicit links to link to the others, as described above. Like regular reference links, these references are case-insensitive. Explicit link reference definitions always take priority over implicit heading references. So, in the following example, the link will point to bar , not to #foo : Markdown Python # Foo [foo]: bar See [foo] Pandoc(Meta({}), [Header(1, ('foo', [], []), [Str('Foo')]), Para([Str('See'), Space(), Link(('', [], []), [Str('foo')], ('bar', ''))])])","title":"Extension: implicit_header_references"},{"location":"markdown/#block-quotations","text":"Markdown uses email conventions for quoting blocks of text. A block quotation is one or more paragraphs or other block elements (such as lists or headings), with each line preceded by a > character and an optional space. (The > need not start at the left margin, but it should not be indented more than three spaces.) Markdown Python > This is a block quote. This > paragraph has two lines. > > 1. This is a list inside a block quote. > 2. Second item. Pandoc(Meta({}), [BlockQuote([Para([Str('This'), Space(), Str('is'), Space(), Str('a'), Space(), Str('block'), Space(), Str('quote.'), Space(), Str('This'), SoftBreak(), Str('paragraph'), Space(), Str('has'), Space(), Str('two'), Space(), Str('lines.')]), OrderedList((1, Decimal(), Period()), [[Plain([Str('This'), Space(), Str('is'), Space(), Str('a'), Space(), Str('list'), Space(), Str('inside'), Space(), Str('a'), Space(), Str('block'), Space(), Str('quote.')])], [Plain([Str('Second'), Space(), Str('item.')])]])])]) A \"lazy\" form, which requires the > character only on the first line of each block, is also allowed: Markdown Python > This is a block quote. This paragraph has two lines. > 1. This is a list inside a block quote. 2. Second item. Pandoc(Meta({}), [BlockQuote([Para([Str('This'), Space(), Str('is'), Space(), Str('a'), Space(), Str('block'), Space(), Str('quote.'), Space(), Str('This'), SoftBreak(), Str('paragraph'), Space(), Str('has'), Space(), Str('two'), Space(), Str('lines.')])]), BlockQuote([OrderedList((1, Decimal(), Period()), [[Plain([Str('This'), Space(), Str('is'), Space(), Str('a'), Space(), Str('list'), Space(), Str('inside'), Space(), Str('a'), Space(), Str('block'), Space(), Str('quote.')])], [Plain([Str('Second'), Space(), Str('item.')])]])])]) Among the block elements that can be contained in a block quote are other block quotes. That is, block quotes can be nested: Markdown Python > This is a block quote. > > > A block quote within a block quote. Pandoc(Meta({}), [BlockQuote([Para([Str('This'), Space(), Str('is'), Space(), Str('a'), Space(), Str('block'), Space(), Str('quote.')]), BlockQuote([Para([Str('A'), Space(), Str('block'), Space(), Str('quote'), Space(), Str('within'), Space(), Str('a'), Space(), Str('block'), Space(), Str('quote.')])])])]) If the > character is followed by an optional space, that space will be considered part of the block quote marker and not part of the indentation of the contents. Thus, to put an indented code block in a block quote, you need five spaces after the > : Markdown Python > code Pandoc(Meta({}), [BlockQuote([CodeBlock(('', [], []), 'code')])])","title":"Block quotations"},{"location":"markdown/#extension-blank_before_blockquote","text":"Standard Markdown syntax does not require a blank line before a block quote. Pandoc does require this (except, of course, at the beginning of the document). The reason for the requirement is that it is all too easy for a > to end up at the beginning of a line by accident (perhaps through line wrapping). So, unless the markdown_strict format is used, the following does not produce a nested block quote in pandoc: Markdown Python > This is a block quote. >> Nested. Pandoc(Meta({}), [BlockQuote([Para([Str('This'), Space(), Str('is'), Space(), Str('a'), Space(), Str('block'), Space(), Str('quote.'), SoftBreak(), Str('>'), Space(), Str('Nested.')])])])","title":"Extension: blank_before_blockquote"},{"location":"markdown/#verbatim-code-blocks","text":"","title":"Verbatim (code) blocks"},{"location":"markdown/#indented-code-blocks","text":"A block of text indented four spaces (or one tab) is treated as verbatim text: that is, special characters do not trigger special formatting, and all spaces and line breaks are preserved. For example, Markdown Python if (a > 3) { moveShip(5 * gravity, DOWN); } Pandoc(Meta({}), [CodeBlock(('', [], []), 'if (a > 3) {\\n moveShip(5 * gravity, DOWN);\\n}')]) The initial (four space or one tab) indentation is not considered part of the verbatim text, and is removed in the output. Note: blank lines in the verbatim text need not begin with four spaces.","title":"Indented code blocks"},{"location":"markdown/#fenced-code-blocks","text":"","title":"Fenced code blocks"},{"location":"markdown/#extension-fenced_code_blocks","text":"In addition to standard indented code blocks, pandoc supports fenced code blocks. These begin with a row of three or more tildes ( ~ ) and end with a row of tildes that must be at least as long as the starting row. Everything between these lines is treated as code. No indentation is necessary: Markdown Python ~~~~~~~ if (a > 3) { moveShip(5 * gravity, DOWN); } ~~~~~~~ Pandoc(Meta({}), [CodeBlock(('', [], []), 'if (a > 3) {\\n moveShip(5 * gravity, DOWN);\\n}')]) Like regular code blocks, fenced code blocks must be separated from surrounding text by blank lines. If the code itself contains a row of tildes or backticks, just use a longer row of tildes or backticks at the start and end: Markdown Python ~~~~~~~~~~~~~~~~ ~~~~~~~~~~ code including tildes ~~~~~~~~~~ ~~~~~~~~~~~~~~~~ Pandoc(Meta({}), [CodeBlock(('', [], []), '~~~~~~~~~~\\ncode including tildes\\n~~~~~~~~~~')])","title":"Extension: fenced_code_blocks"},{"location":"markdown/#extension-backtick_code_blocks","text":"Same as fenced_code_blocks , but uses backticks ( ` ) instead of tildes ( ~ ).","title":"Extension: backtick_code_blocks"},{"location":"markdown/#extension-fenced_code_attributes","text":"Optionally, you may attach attributes to fenced or backtick code block using this syntax: Markdown Python ~~~~ {#mycode .haskell .numberLines startFrom=\"100\"} qsort [] = [] qsort (x:xs) = qsort (filter (< x) xs) ++ [x] ++ qsort (filter (>= x) xs) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pandoc(Meta({}), [CodeBlock(('mycode', ['haskell', 'numberLines'], [('startFrom', '100')]), 'qsort [] = []\\nqsort (x:xs) = qsort (filter (< x) xs) ++ [x] ++\\n qsort (filter (>= x) xs)')]) Here mycode is an identifier, haskell and numberLines are classes, and startFrom is an attribute with value 100 . Some output formats can use this information to do syntax highlighting. Currently, the only output formats that uses this information are HTML, LaTeX, Docx, Ms, and PowerPoint. If highlighting is supported for your output format and language, then the code block above will appear highlighted, with numbered lines. (To see which languages are supported, type pandoc --list-highlight-languages .) Otherwise, the code block above will appear as follows: <pre id=\"mycode\" class=\"haskell numberLines\" startFrom=\"100\"> <code> ... </code> </pre> The numberLines (or number-lines ) class will cause the lines of the code block to be numbered, starting with 1 or the value of the startFrom attribute. The lineAnchors (or line-anchors ) class will cause the lines to be clickable anchors in HTML output. A shortcut form can also be used for specifying the language of the code block: Markdown Python ```haskell qsort [] = [] ``` Pandoc(Meta({}), [CodeBlock(('', ['haskell'], []), 'qsort [] = []')]) This is equivalent to: Markdown Python ``` {.haskell} qsort [] = [] ``` Pandoc(Meta({}), [CodeBlock(('', ['haskell'], []), 'qsort [] = []')]) If the fenced_code_attributes extension is disabled, but input contains class attribute(s) for the code block, the first class attribute will be printed after the opening fence as a bare word. To prevent all highlighting, use the --no-highlight flag. To set the highlighting style, use --highlight-style . For more information on highlighting, see Syntax highlighting , below.","title":"Extension: fenced_code_attributes"},{"location":"markdown/#line-blocks","text":"","title":"Line blocks"},{"location":"markdown/#extension-line_blocks","text":"A line block is a sequence of lines beginning with a vertical bar ( | ) followed by a space. The division into lines will be preserved in the output, as will any leading spaces; otherwise, the lines will be formatted as Markdown. This is useful for verse and addresses: Markdown Python | The limerick packs laughs anatomical | In space that is quite economical. | But the good ones I've seen | So seldom are clean | And the clean ones so seldom are comical | 200 Main St. | Berkeley, CA 94718 Pandoc(Meta({}), [LineBlock([[Str('The'), Space(), Str('limerick'), Space(), Str('packs'), Space(), Str('laughs'), Space(), Str('anatomical')], [Str('In'), Space(), Str('space'), Space(), Str('that'), Space(), Str('is'), Space(), Str('quite'), Space(), Str('economical.')], [Str('\\xa0\\xa0\\xa0But'), Space(), Str('the'), Space(), Str('good'), Space(), Str('ones'), Space(), Str('I\u2019ve'), Space(), Str('seen')], [Str('\\xa0\\xa0\\xa0So'), Space(), Str('seldom'), Space(), Str('are'), Space(), Str('clean')], [Str('And'), Space(), Str('the'), Space(), Str('clean'), Space(), Str('ones'), Space(), Str('so'), Space(), Str('seldom'), Space(), Str('are'), Space(), Str('comical')]]), LineBlock([[Str('200'), Space(), Str('Main'), Space(), Str('St.')], [Str('Berkeley,'), Space(), Str('CA'), Space(), Str('94718')]])]) The lines can be hard-wrapped if needed, but the continuation line must begin with a space. Markdown Python | The Right Honorable Most Venerable and Righteous Samuel L. Constable, Jr. | 200 Main St. | Berkeley, CA 94718 Pandoc(Meta({}), [LineBlock([[Str('The'), Space(), Str('Right'), Space(), Str('Honorable'), Space(), Str('Most'), Space(), Str('Venerable'), Space(), Str('and'), Space(), Str('Righteous'), Space(), Str('Samuel'), Space(), Str('L.'), Space(), Str('Constable,'), Space(), Str('Jr.')], [Str('200'), Space(), Str('Main'), Space(), Str('St.')], [Str('Berkeley,'), Space(), Str('CA'), Space(), Str('94718')]])]) Inline formatting (such as emphasis) is allowed in the content, but not block-level formatting (such as block quotes or lists). This syntax is borrowed from reStructuredText .","title":"Extension: line_blocks"},{"location":"markdown/#lists","text":"","title":"Lists"},{"location":"markdown/#bullet-lists","text":"A bullet list is a list of bulleted list items. A bulleted list item begins with a bullet ( * , + , or - ). Here is a simple example: Markdown Python * one * two * three Pandoc(Meta({}), [BulletList([[Plain([Str('one')])], [Plain([Str('two')])], [Plain([Str('three')])]])]) This will produce a \"compact\" list. If you want a \"loose\" list, in which each item is formatted as a paragraph, put spaces between the items: Markdown Python * one * two * three Pandoc(Meta({}), [BulletList([[Para([Str('one')])], [Para([Str('two')])], [Para([Str('three')])]])]) The bullets need not be flush with the left margin; they may be indented one, two, or three spaces. The bullet must be followed by whitespace. List items look best if subsequent lines are flush with the first line (after the bullet): Markdown Python * here is my first list item. * and my second. Pandoc(Meta({}), [BulletList([[Plain([Str('here'), Space(), Str('is'), Space(), Str('my'), Space(), Str('first'), SoftBreak(), Str('list'), Space(), Str('item.')])], [Plain([Str('and'), Space(), Str('my'), Space(), Str('second.')])]])]) But Markdown also allows a \"lazy\" format: Markdown Python * here is my first list item. * and my second. Pandoc(Meta({}), [BulletList([[Plain([Str('here'), Space(), Str('is'), Space(), Str('my'), Space(), Str('first'), SoftBreak(), Str('list'), Space(), Str('item.')])], [Plain([Str('and'), Space(), Str('my'), Space(), Str('second.')])]])])","title":"Bullet lists"},{"location":"markdown/#block-content-in-list-items","text":"A list item may contain multiple paragraphs and other block-level content. However, subsequent paragraphs must be preceded by a blank line and indented to line up with the first non-space content after the list marker. Markdown Python * First paragraph. Continued. * Second paragraph. With a code block, which must be indented eight spaces: { code } Pandoc(Meta({}), [BulletList([[Para([Str('First'), Space(), Str('paragraph.')]), Para([Str('Continued.')])], [Para([Str('Second'), Space(), Str('paragraph.'), Space(), Str('With'), Space(), Str('a'), Space(), Str('code'), Space(), Str('block,'), Space(), Str('which'), Space(), Str('must'), Space(), Str('be'), Space(), Str('indented'), SoftBreak(), Str('eight'), Space(), Str('spaces:')]), CodeBlock(('', [], []), '{ code }')]])]) Exception: if the list marker is followed by an indented code block, which must begin 5 spaces after the list marker, then subsequent paragraphs must begin two columns after the last character of the list marker: Markdown Python * code continuation paragraph Pandoc(Meta({}), [BulletList([[CodeBlock(('', [], []), 'code'), Plain([Str('continuation'), Space(), Str('paragraph')])]])]) List items may include other lists. In this case the preceding blank line is optional. The nested list must be indented to line up with the first non-space character after the list marker of the containing list item. Markdown Python * fruits + apples - macintosh - red delicious + pears + peaches * vegetables + broccoli + chard Pandoc(Meta({}), [BulletList([[Plain([Str('fruits')]), BulletList([[Plain([Str('apples')]), BulletList([[Plain([Str('macintosh')])], [Plain([Str('red'), Space(), Str('delicious')])]])], [Plain([Str('pears')])], [Plain([Str('peaches')])]])], [Plain([Str('vegetables')]), BulletList([[Plain([Str('broccoli')])], [Plain([Str('chard')])]])]])]) As noted above, Markdown allows you to write list items \"lazily,\" instead of indenting continuation lines. However, if there are multiple paragraphs or other blocks in a list item, the first line of each must be indented. Markdown Python + A lazy, lazy, list item. + Another one; this looks bad but is legal. Second paragraph of second list item. Pandoc(Meta({}), [BulletList([[Para([Str('A'), Space(), Str('lazy,'), Space(), Str('lazy,'), Space(), Str('list'), SoftBreak(), Str('item.')])], [Para([Str('Another'), Space(), Str('one;'), Space(), Str('this'), Space(), Str('looks'), SoftBreak(), Str('bad'), Space(), Str('but'), Space(), Str('is'), Space(), Str('legal.')]), Para([Str('Second'), Space(), Str('paragraph'), Space(), Str('of'), Space(), Str('second'), SoftBreak(), Str('list'), Space(), Str('item.')])]])])","title":"Block content in list items"},{"location":"markdown/#ordered-lists","text":"Ordered lists work just like bulleted lists, except that the items begin with enumerators rather than bullets. In standard Markdown, enumerators are decimal numbers followed by a period and a space. The numbers themselves are ignored, so there is no difference between this list: Markdown Python 1. one 2. two 3. three Pandoc(Meta({}), [OrderedList((1, Decimal(), Period()), [[Plain([Str('one')])], [Plain([Str('two')])], [Plain([Str('three')])]])]) and this one: Markdown Python 5. one 7. two 1. three Pandoc(Meta({}), [OrderedList((5, Decimal(), Period()), [[Plain([Str('one')])], [Plain([Str('two')])], [Plain([Str('three')])]])])","title":"Ordered lists"},{"location":"markdown/#extension-fancy_lists","text":"Unlike standard Markdown, pandoc allows ordered list items to be marked with uppercase and lowercase letters and roman numerals, in addition to Arabic numerals. List markers may be enclosed in parentheses or followed by a single right-parentheses or period. They must be separated from the text that follows by at least one space, and, if the list marker is a capital letter with a period, by at least two spaces. 1 The fancy_lists extension also allows ' # ' to be used as an ordered list marker in place of a numeral: Markdown Python #. one #. two Pandoc(Meta({}), [OrderedList((1, DefaultStyle(), DefaultDelim()), [[Plain([Str('one')])], [Plain([Str('two')])]])])","title":"Extension: fancy_lists"},{"location":"markdown/#extension-startnum","text":"Pandoc also pays attention to the type of list marker used, and to the starting number, and both of these are preserved where possible in the output format. Thus, the following yields a list with numbers followed by a single parenthesis, starting with 9, and a sublist with lowercase roman numerals: Markdown Python 9) Ninth 10) Tenth 11) Eleventh i. subone ii. subtwo iii. subthree Pandoc(Meta({}), [OrderedList((9, Decimal(), OneParen()), [[Plain([Str('Ninth')])], [Plain([Str('Tenth')])], [Plain([Str('Eleventh')]), OrderedList((1, LowerRoman(), Period()), [[Plain([Str('subone')])], [Plain([Str('subtwo')])], [Plain([Str('subthree')])]])]])]) Pandoc will start a new list each time a different type of list marker is used. So, the following will create three lists: Markdown Python (2) Two (5) Three 1. Four * Five Pandoc(Meta({}), [OrderedList((2, Decimal(), TwoParens()), [[Plain([Str('Two')])], [Plain([Str('Three')])]]), OrderedList((1, Decimal(), Period()), [[Plain([Str('Four')])]]), BulletList([[Plain([Str('Five')])]])]) If default list markers are desired, use #. : Markdown Python #. one #. two #. three Pandoc(Meta({}), [OrderedList((1, DefaultStyle(), DefaultDelim()), [[Plain([Str('one')])], [Plain([Str('two')])], [Plain([Str('three')])]])])","title":"Extension: startnum"},{"location":"markdown/#extension-task_lists","text":"Pandoc supports task lists, using the syntax of GitHub-Flavored Markdown. Markdown Python - [ ] an unchecked task list item - [x] checked item Pandoc(Meta({}), [BulletList([[Plain([Str('\u2610'), Space(), Str('an'), Space(), Str('unchecked'), Space(), Str('task'), Space(), Str('list'), Space(), Str('item')])], [Plain([Str('\u2612'), Space(), Str('checked'), Space(), Str('item')])]])])","title":"Extension: task_lists"},{"location":"markdown/#definition-lists","text":"","title":"Definition lists"},{"location":"markdown/#extension-definition_lists","text":"Pandoc supports definition lists, using the syntax of PHP Markdown Extra with some extensions. 2 Markdown Python Term 1 : Definition 1 Term 2 with *inline markup* : Definition 2 { some code, part of Definition 2 } Third paragraph of definition 2. Pandoc(Meta({}), [DefinitionList([([Str('Term'), Space(), Str('1')], [[Para([Str('Definition'), Space(), Str('1')])]]), ([Str('Term'), Space(), Str('2'), Space(), Str('with'), Space(), Emph([Str('inline'), Space(), Str('markup')])], [[Para([Str('Definition'), Space(), Str('2')]), CodeBlock(('', [], []), '{ some code, part of Definition 2 }'), Para([Str('Third'), Space(), Str('paragraph'), Space(), Str('of'), Space(), Str('definition'), Space(), Str('2.')])]])])]) Each term must fit on one line, which may optionally be followed by a blank line, and must be followed by one or more definitions. A definition begins with a colon or tilde, which may be indented one or two spaces. A term may have multiple definitions, and each definition may consist of one or more block elements (paragraph, code block, list, etc.), each indented four spaces or one tab stop. The body of the definition (including the first line, aside from the colon or tilde) should be indented four spaces. However, as with other Markdown lists, you can \"lazily\" omit indentation except at the beginning of a paragraph or other block element: Markdown Python Term 1 : Definition with lazy continuation. Second paragraph of the definition. Pandoc(Meta({}), [DefinitionList([([Str('Term'), Space(), Str('1')], [[Para([Str('Definition'), SoftBreak(), Str('with'), Space(), Str('lazy'), Space(), Str('continuation.')]), Para([Str('Second'), Space(), Str('paragraph'), Space(), Str('of'), Space(), Str('the'), Space(), Str('definition.')])]])])]) If you leave space before the definition (as in the example above), the text of the definition will be treated as a paragraph. In some output formats, this will mean greater spacing between term/definition pairs. For a more compact definition list, omit the space before the definition: Markdown Python Term 1 ~ Definition 1 Term 2 ~ Definition 2a ~ Definition 2b Pandoc(Meta({}), [DefinitionList([([Str('Term'), Space(), Str('1')], [[Plain([Str('Definition'), Space(), Str('1')])]]), ([Str('Term'), Space(), Str('2')], [[Plain([Str('Definition'), Space(), Str('2a')])], [Plain([Str('Definition'), Space(), Str('2b')])]])])]) Note that space between items in a definition list is required. (A variant that loosens this requirement, but disallows \"lazy\" hard wrapping, can be activated with compact_definition_lists : see Non-default extensions , below.)","title":"Extension: definition_lists"},{"location":"markdown/#numbered-example-lists","text":"","title":"Numbered example lists"},{"location":"markdown/#extension-example_lists","text":"The special list marker @ can be used for sequentially numbered examples. The first list item with a @ marker will be numbered '1', the next '2', and so on, throughout the document. The numbered examples need not occur in a single list; each new list using @ will take up where the last stopped. So, for example: Markdown Python (@) My first example will be numbered (1). (@) My second example will be numbered (2). Explanation of examples. (@) My third example will be numbered (3). Pandoc(Meta({}), [OrderedList((1, Example(), TwoParens()), [[Plain([Str('My'), Space(), Str('first'), Space(), Str('example'), Space(), Str('will'), Space(), Str('be'), Space(), Str('numbered'), Space(), Str('(1).')])], [Plain([Str('My'), Space(), Str('second'), Space(), Str('example'), Space(), Str('will'), Space(), Str('be'), Space(), Str('numbered'), Space(), Str('(2).')])]]), Para([Str('Explanation'), Space(), Str('of'), Space(), Str('examples.')]), OrderedList((3, Example(), TwoParens()), [[Plain([Str('My'), Space(), Str('third'), Space(), Str('example'), Space(), Str('will'), Space(), Str('be'), Space(), Str('numbered'), Space(), Str('(3).')])]])]) Numbered examples can be labeled and referred to elsewhere in the document: Markdown Python (@good) This is a good example. As (@good) illustrates, ... Pandoc(Meta({}), [OrderedList((1, Example(), TwoParens()), [[Plain([Str('This'), Space(), Str('is'), Space(), Str('a'), Space(), Str('good'), Space(), Str('example.')])]]), Para([Str('As'), Space(), Str('(1)'), Space(), Str('illustrates,'), Space(), Str('\u2026')])]) The label can be any string of alphanumeric characters, underscores, or hyphens. Note: continuation paragraphs in example lists must always be indented four spaces, regardless of the length of the list marker. That is, example lists always behave as if the four_space_rule extension is set. This is because example labels tend to be long, and indenting content to the first non-space character after the label would be awkward.","title":"Extension: example_lists"},{"location":"markdown/#ending-a-list","text":"What if you want to put an indented code block after a list? Markdown Python - item one - item two { my code block } Pandoc(Meta({}), [BulletList([[Para([Str('item'), Space(), Str('one')])], [Para([Str('item'), Space(), Str('two')]), Para([Str('{'), Space(), Str('my'), Space(), Str('code'), Space(), Str('block'), Space(), Str('}')])]])]) Trouble! Here pandoc (like other Markdown implementations) will treat { my code block } as the second paragraph of item two, and not as a code block. To \"cut off\" the list after item two, you can insert some non-indented content, like an HTML comment, which won't produce visible output in any format: Markdown Python - item one - item two <!-- end of list --> { my code block } Pandoc(Meta({}), [BulletList([[Plain([Str('item'), Space(), Str('one')])], [Plain([Str('item'), Space(), Str('two')])]]), RawBlock(Format('html'), '<!-- end of list -->'), CodeBlock(('', [], []), '{ my code block }')]) You can use the same trick if you want two consecutive lists instead of one big list: Markdown Python 1. one 2. two 3. three <!-- --> 1. uno 2. dos 3. tres Pandoc(Meta({}), [OrderedList((1, Decimal(), Period()), [[Plain([Str('one')])], [Plain([Str('two')])], [Plain([Str('three')])]]), RawBlock(Format('html'), '<!-- -->'), OrderedList((1, Decimal(), Period()), [[Plain([Str('uno')])], [Plain([Str('dos')])], [Plain([Str('tres')])]])])","title":"Ending a list"},{"location":"markdown/#horizontal-rules","text":"A line containing a row of three or more * , - , or _ characters (optionally separated by spaces) produces a horizontal rule: Markdown Python * * * * --------------- Pandoc(Meta({}), [HorizontalRule(), HorizontalRule()])","title":"Horizontal rules"},{"location":"markdown/#tables","text":"Four kinds of tables may be used. The first three kinds presuppose the use of a fixed-width font, such as Courier. The fourth kind can be used with proportionally spaced fonts, as it does not require lining up columns.","title":"Tables"},{"location":"markdown/#extension-table_captions","text":"A caption may optionally be provided with all 4 kinds of tables (as illustrated in the examples below). A caption is a paragraph beginning with the string Table: (or just : ), which will be stripped off. It may appear either before or after the table.","title":"Extension: table_captions"},{"location":"markdown/#extension-simple_tables","text":"Simple tables look like this: Markdown Python Right Left Center Default ------- ------ ---------- ------- 12 12 12 12 123 123 123 123 1 1 1 1 Table: Demonstration of simple table syntax. Pandoc(Meta({}), [Table(('', [], []), Caption(None, [Plain([Str('Demonstration'), Space(), Str('of'), Space(), Str('simple'), Space(), Str('table'), Space(), Str('syntax.')])]), [(AlignRight(), ColWidthDefault()), (AlignLeft(), ColWidthDefault()), (AlignCenter(), ColWidthDefault()), (AlignDefault(), ColWidthDefault())], TableHead(('', [], []), [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Right')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Left')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Center')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Default')])])])]), [TableBody(('', [], []), RowHeadColumns(0), [], [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('12')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('12')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('12')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('12')])])]), Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('123')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('123')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('123')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('123')])])]), Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('1')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('1')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('1')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('1')])])])])], TableFoot(('', [], []), []))]) The header and table rows must each fit on one line. Column alignments are determined by the position of the header text relative to the dashed line below it: 3 If the dashed line is flush with the header text on the right side but extends beyond it on the left, the column is right-aligned. If the dashed line is flush with the header text on the left side but extends beyond it on the right, the column is left-aligned. If the dashed line extends beyond the header text on both sides, the column is centered. If the dashed line is flush with the header text on both sides, the default alignment is used (in most cases, this will be left). The table must end with a blank line, or a line of dashes followed by a blank line. The column header row may be omitted, provided a dashed line is used to end the table. For example: Markdown Python ------- ------ ---------- ------- 12 12 12 12 123 123 123 123 1 1 1 1 ------- ------ ---------- ------- Pandoc(Meta({}), [Table(('', [], []), Caption(None, []), [(AlignRight(), ColWidthDefault()), (AlignLeft(), ColWidthDefault()), (AlignCenter(), ColWidthDefault()), (AlignRight(), ColWidthDefault())], TableHead(('', [], []), []), [TableBody(('', [], []), RowHeadColumns(0), [], [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('12')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('12')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('12')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('12')])])]), Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('123')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('123')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('123')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('123')])])]), Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('1')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('1')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('1')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('1')])])])])], TableFoot(('', [], []), []))]) When the header row is omitted, column alignments are determined on the basis of the first line of the table body. So, in the tables above, the columns would be right, left, center, and right aligned, respectively.","title":"Extension: simple_tables"},{"location":"markdown/#extension-multiline_tables","text":"Multiline tables allow header and table rows to span multiple lines of text (but cells that span multiple columns or rows of the table are not supported). Here is an example: Markdown Python ------------------------------------------------------------- Centered Default Right Left Header Aligned Aligned Aligned ----------- ------- --------------- ------------------------- First row 12.0 Example of a row that spans multiple lines. Second row 5.0 Here's another one. Note the blank line between rows. ------------------------------------------------------------- Table: Here's the caption. It, too, may span multiple lines. Pandoc(Meta({}), [Table(('', [], []), Caption(None, [Plain([Str('Here\u2019s'), Space(), Str('the'), Space(), Str('caption.'), Space(), Str('It,'), Space(), Str('too,'), Space(), Str('may'), Space(), Str('span'), SoftBreak(), Str('multiple'), Space(), Str('lines.')])]), [(AlignCenter(), ColWidth_(0.16666666666666666)), (AlignDefault(), ColWidth_(0.1111111111111111)), (AlignRight(), ColWidth_(0.2222222222222222)), (AlignLeft(), ColWidth_(0.3611111111111111))], TableHead(('', [], []), [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Centered'), SoftBreak(), Str('Header')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Default'), SoftBreak(), Str('Aligned')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Right'), SoftBreak(), Str('Aligned')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Left'), SoftBreak(), Str('Aligned')])])])]), [TableBody(('', [], []), RowHeadColumns(0), [], [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('First')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('row')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('12.0')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Example'), Space(), Str('of'), Space(), Str('a'), Space(), Str('row'), Space(), Str('that'), SoftBreak(), Str('spans'), Space(), Str('multiple'), Space(), Str('lines.')])])]), Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Second')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('row')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('5.0')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Here\u2019s'), Space(), Str('another'), Space(), Str('one.'), Space(), Str('Note'), SoftBreak(), Str('the'), Space(), Str('blank'), Space(), Str('line'), Space(), Str('between'), SoftBreak(), Str('rows.')])])])])], TableFoot(('', [], []), []))]) These work like simple tables, but with the following differences: They must begin with a row of dashes, before the header text (unless the header row is omitted). They must end with a row of dashes, then a blank line. The rows must be separated by blank lines. In multiline tables, the table parser pays attention to the widths of the columns, and the writers try to reproduce these relative widths in the output. So, if you find that one of the columns is too narrow in the output, try widening it in the Markdown source. The header may be omitted in multiline tables as well as simple tables: Markdown Python ----------- ------- --------------- ------------------------- First row 12.0 Example of a row that spans multiple lines. Second row 5.0 Here's another one. Note the blank line between rows. ----------- ------- --------------- ------------------------- : Here's a multiline table without a header. Pandoc(Meta({}), [Table(('', [], []), Caption(None, [Plain([Str('Here\u2019s'), Space(), Str('a'), Space(), Str('multiline'), Space(), Str('table'), Space(), Str('without'), Space(), Str('a'), Space(), Str('header.')])]), [(AlignCenter(), ColWidth_(0.16666666666666666)), (AlignLeft(), ColWidth_(0.1111111111111111)), (AlignRight(), ColWidth_(0.2222222222222222)), (AlignLeft(), ColWidth_(0.3611111111111111))], TableHead(('', [], []), []), [TableBody(('', [], []), RowHeadColumns(0), [], [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('First')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('row')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('12.0')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Example'), Space(), Str('of'), Space(), Str('a'), Space(), Str('row'), Space(), Str('that'), SoftBreak(), Str('spans'), Space(), Str('multiple'), Space(), Str('lines.')])])]), Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Second')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('row')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('5.0')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Here\u2019s'), Space(), Str('another'), Space(), Str('one.'), Space(), Str('Note'), SoftBreak(), Str('the'), Space(), Str('blank'), Space(), Str('line'), Space(), Str('between'), SoftBreak(), Str('rows.')])])])])], TableFoot(('', [], []), []))]) It is possible for a multiline table to have just one row, but the row should be followed by a blank line (and then the row of dashes that ends the table), or the table may be interpreted as a simple table.","title":"Extension: multiline_tables"},{"location":"markdown/#extension-grid_tables","text":"Grid tables look like this: Markdown Python : Sample grid table. +---------------+---------------+--------------------+ | Fruit | Price | Advantages | +===============+===============+====================+ | Bananas | $1.34 | - built-in wrapper | | | | - bright color | +---------------+---------------+--------------------+ | Oranges | $2.10 | - cures scurvy | | | | - tasty | +---------------+---------------+--------------------+ Pandoc(Meta({}), [Table(('', [], []), Caption(None, [Plain([Str('Sample'), Space(), Str('grid'), Space(), Str('table.')])]), [(AlignDefault(), ColWidth_(0.2222222222222222)), (AlignDefault(), ColWidth_(0.2222222222222222)), (AlignDefault(), ColWidth_(0.2916666666666667))], TableHead(('', [], []), [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Fruit')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Price')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Advantages')])])])]), [TableBody(('', [], []), RowHeadColumns(0), [], [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Bananas')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('$1.34')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [BulletList([[Plain([Str('built-in'), Space(), Str('wrapper')])], [Plain([Str('bright'), Space(), Str('color')])]])])]), Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Oranges')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('$2.10')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [BulletList([[Plain([Str('cures'), Space(), Str('scurvy')])], [Plain([Str('tasty')])]])])])])], TableFoot(('', [], []), []))]) The row of = s separates the header from the table body, and can be omitted for a headerless table. The cells of grid tables may contain arbitrary block elements (multiple paragraphs, code blocks, lists, etc.). Cells that span multiple columns or rows are not supported. Grid tables can be created easily using Emacs' table-mode ( M-x table-insert ). Alignments can be specified as with pipe tables, by putting colons at the boundaries of the separator line after the header: Markdown Python +---------------+---------------+--------------------+ | Right | Left | Centered | +==============:+:==============+:==================:+ | Bananas | $1.34 | built-in wrapper | +---------------+---------------+--------------------+ Pandoc(Meta({}), [Table(('', [], []), Caption(None, []), [(AlignRight(), ColWidth_(0.2222222222222222)), (AlignLeft(), ColWidth_(0.2222222222222222)), (AlignCenter(), ColWidth_(0.2916666666666667))], TableHead(('', [], []), [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Right')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Left')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Centered')])])])]), [TableBody(('', [], []), RowHeadColumns(0), [], [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Bananas')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('$1.34')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('built-in'), Space(), Str('wrapper')])])])])], TableFoot(('', [], []), []))]) For headerless tables, the colons go on the top line instead: Markdown Python +--------------:+:--------------+:------------------:+ | Right | Left | Centered | +---------------+---------------+--------------------+ Pandoc(Meta({}), [Table(('', [], []), Caption(None, []), [(AlignRight(), ColWidth_(0.2222222222222222)), (AlignLeft(), ColWidth_(0.2222222222222222)), (AlignCenter(), ColWidth_(0.2916666666666667))], TableHead(('', [], []), []), [TableBody(('', [], []), RowHeadColumns(0), [], [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Right')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Left')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Centered')])])])])], TableFoot(('', [], []), []))])","title":"Extension: grid_tables"},{"location":"markdown/#grid-table-limitations","text":"Pandoc does not support grid tables with row spans or column spans. This means that neither variable numbers of columns across rows nor variable numbers of rows across columns are supported by Pandoc. All grid tables must have the same number of columns in each row, and the same number of rows in each column. For example, the Docutils sample grid tables will not render as expected with Pandoc.","title":"Grid Table Limitations"},{"location":"markdown/#extension-pipe_tables","text":"Pipe tables look like this: Markdown Python | Right | Left | Default | Center | |------:|:-----|---------|:------:| | 12 | 12 | 12 | 12 | | 123 | 123 | 123 | 123 | | 1 | 1 | 1 | 1 | : Demonstration of pipe table syntax. Pandoc(Meta({}), [Table(('', [], []), Caption(None, [Plain([Str('Demonstration'), Space(), Str('of'), Space(), Str('pipe'), Space(), Str('table'), Space(), Str('syntax.')])]), [(AlignRight(), ColWidthDefault()), (AlignLeft(), ColWidthDefault()), (AlignDefault(), ColWidthDefault()), (AlignCenter(), ColWidthDefault())], TableHead(('', [], []), [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Right')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Left')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Default')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Center')])])])]), [TableBody(('', [], []), RowHeadColumns(0), [], [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('12')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('12')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('12')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('12')])])]), Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('123')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('123')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('123')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('123')])])]), Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('1')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('1')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('1')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('1')])])])])], TableFoot(('', [], []), []))]) The syntax is identical to PHP Markdown Extra tables . The beginning and ending pipe characters are optional, but pipes are required between all columns. The colons indicate column alignment as shown. The header cannot be omitted. To simulate a headerless table, include a header with blank cells. Since the pipes indicate column boundaries, columns need not be vertically aligned, as they are in the above example. So, this is a perfectly legal (though ugly) pipe table: Markdown Python fruit| price -----|-----: apple|2.05 pear|1.37 orange|3.09 Pandoc(Meta({}), [Table(('', [], []), Caption(None, []), [(AlignDefault(), ColWidthDefault()), (AlignRight(), ColWidthDefault())], TableHead(('', [], []), [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('fruit')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('price')])])])]), [TableBody(('', [], []), RowHeadColumns(0), [], [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('apple')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('2.05')])])]), Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('pear')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('1.37')])])]), Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('orange')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('3.09')])])])])], TableFoot(('', [], []), []))]) The cells of pipe tables cannot contain block elements like paragraphs and lists, and cannot span multiple lines. If a pipe table contains a row whose Markdown content is wider than the column width (see --columns ), then the table will take up the full text width and the cell contents will wrap, with the relative cell widths determined by the number of dashes in the line separating the table header from the table body. (For example ---|- would make the first column 3/4 and the second column 1/4 of the full text width.) On the other hand, if no lines are wider than column width, then cell contents will not be wrapped, and the cells will be sized to their contents. Note: pandoc also recognizes pipe tables of the following form, as can be produced by Emacs' orgtbl-mode: Markdown Python | One | Two | |-----+-------| | my | table | | is | nice | Pandoc(Meta({}), [Table(('', [], []), Caption(None, []), [(AlignDefault(), ColWidthDefault()), (AlignDefault(), ColWidthDefault())], TableHead(('', [], []), [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('One')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Two')])])])]), [TableBody(('', [], []), RowHeadColumns(0), [], [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('my')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('table')])])]), Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('is')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('nice')])])])])], TableFoot(('', [], []), []))]) The difference is that + is used instead of | . Other orgtbl features are not supported. In particular, to get non-default column alignment, you'll need to add colons as above.","title":"Extension: pipe_tables"},{"location":"markdown/#metadata-blocks","text":"","title":"Metadata blocks"},{"location":"markdown/#extension-pandoc_title_block","text":"If the file begins with a title block Markdown Python % title % author(s) (separated by semicolons) % date Pandoc(Meta({'author': MetaList([MetaInlines([Str('author(s)'), Space(), Str('(separated'), Space(), Str('by'), Space(), Str('semicolons)')])]), 'date': MetaInlines([Str('date')]), 'title': MetaInlines([Str('title')])}), []) it will be parsed as bibliographic information, not regular text. (It will be used, for example, in the title of standalone LaTeX or HTML output.) The block may contain just a title, a title and an author, or all three elements. If you want to include an author but no title, or a title and a date but no author, you need a blank line: Markdown Python % % Author Pandoc(Meta({'author': MetaList([MetaInlines([Str('Author')])])}), []) Markdown Python % My title % % June 15, 2006 Pandoc(Meta({'author': MetaList([MetaInlines([])]), 'date': MetaInlines([Str('June'), Space(), Str('15,'), Space(), Str('2006')]), 'title': MetaInlines([Str('My'), Space(), Str('title')])}), []) The title may occupy multiple lines, but continuation lines must begin with leading space, thus: Markdown Python % My title on multiple lines Pandoc(Meta({'title': MetaInlines([Str('My'), Space(), Str('title'), SoftBreak(), Str('on'), Space(), Str('multiple'), Space(), Str('lines')])}), []) If a document has multiple authors, the authors may be put on separate lines with leading space, or separated by semicolons, or both. So, all of the following are equivalent: Markdown Python % % Author One Author Two Pandoc(Meta({'author': MetaList([MetaInlines([Str('Author'), Space(), Str('One')]), MetaInlines([Str('Author'), Space(), Str('Two')])])}), []) Markdown Python % % Author One; Author Two Pandoc(Meta({'author': MetaList([MetaInlines([Str('Author'), Space(), Str('One')]), MetaInlines([Str('Author'), Space(), Str('Two')])])}), []) Markdown Python % % Author One; Author Two Pandoc(Meta({'author': MetaList([MetaInlines([Str('Author'), Space(), Str('One')]), MetaInlines([Str('Author'), Space(), Str('Two')])])}), []) The date must fit on one line. All three metadata fields may contain standard inline formatting (italics, links, footnotes, etc.). Title blocks will always be parsed, but they will affect the output only when the --standalone ( -s ) option is chosen. In HTML output, titles will appear twice: once in the document head -- this is the title that will appear at the top of the window in a browser -- and once at the beginning of the document body. The title in the document head can have an optional prefix attached ( --title-prefix or -T option). The title in the body appears as an H1 element with class \"title\", so it can be suppressed or reformatted with CSS. If a title prefix is specified with -T and no title block appears in the document, the title prefix will be used by itself as the HTML title. The man page writer extracts a title, man page section number, and other header and footer information from the title line. The title is assumed to be the first word on the title line, which may optionally end with a (single-digit) section number in parentheses. (There should be no space between the title and the parentheses.) Anything after this is assumed to be additional footer and header text. A single pipe character ( | ) should be used to separate the footer text from the header text. Thus, Markdown Python % PANDOC(1) Pandoc(Meta({'title': MetaInlines([Str('PANDOC(1)')])}), []) will yield a man page with the title PANDOC and section 1. Markdown Python % PANDOC(1) Pandoc User Manuals Pandoc(Meta({'title': MetaInlines([Str('PANDOC(1)'), Space(), Str('Pandoc'), Space(), Str('User'), Space(), Str('Manuals')])}), []) will also have \"Pandoc User Manuals\" in the footer. Markdown Python % PANDOC(1) Pandoc User Manuals | Version 4.0 Pandoc(Meta({'title': MetaInlines([Str('PANDOC(1)'), Space(), Str('Pandoc'), Space(), Str('User'), Space(), Str('Manuals'), Space(), Str('|'), Space(), Str('Version'), Space(), Str('4.0')])}), []) will also have \"Version 4.0\" in the header.","title":"Extension: pandoc_title_block"},{"location":"markdown/#extension-yaml_metadata_block","text":"A YAML metadata block is a valid YAML object, delimited by a line of three hyphens ( --- ) at the top and a line of three hyphens ( --- ) or three dots ( ... ) at the bottom. A YAML metadata block may occur anywhere in the document, but if it is not at the beginning, it must be preceded by a blank line. (Note that, because of the way pandoc concatenates input files when several are provided, you may also keep the metadata in a separate YAML file and pass it to pandoc as an argument, along with your Markdown files: pandoc chap1.md chap2.md chap3.md metadata.yaml -s -o book.html Just be sure that the YAML file begins with --- and ends with --- or ... .) Alternatively, you can use the --metadata-file option. Using that approach however, you cannot reference content (like footnotes) from the main markdown input document. Metadata will be taken from the fields of the YAML object and added to any existing document metadata. Metadata can contain lists and objects (nested arbitrarily), but all string scalars will be interpreted as Markdown. Fields with names ending in an underscore will be ignored by pandoc. (They may be given a role by external processors.) Field names must not be interpretable as YAML numbers or boolean values (so, for example, yes , True , and 15 cannot be used as field names). A document may contain multiple metadata blocks. If two metadata blocks attempt to set the same field, the value from the second block will be taken. Each metadata block is handled internally as an independent YAML document. This means, for example, that any YAML anchors defined in a block cannot be referenced in another block. When pandoc is used with -t markdown to create a Markdown document, a YAML metadata block will be produced only if the -s/--standalone option is used. All of the metadata will appear in a single block at the beginning of the document. Note that YAML escaping rules must be followed. Thus, for example, if a title contains a colon, it must be quoted, and if it contains a backslash escape, then it must be ensured that it is not treated as a YAML escape sequence . The pipe character ( | ) can be used to begin an indented block that will be interpreted literally, without need for escaping. This form is necessary when the field contains blank lines or block-level formatting: Markdown Python --- title: 'This is the title: it contains a colon' author: - Author One - Author Two keywords: [nothing, nothingness] abstract: | This is the abstract. It consists of two paragraphs. ... Pandoc(Meta({'abstract': MetaBlocks([Para([Str('This'), Space(), Str('is'), Space(), Str('the'), Space(), Str('abstract.')]), Para([Str('It'), Space(), Str('consists'), Space(), Str('of'), Space(), Str('two'), Space(), Str('paragraphs.')])]), 'author': MetaList([MetaInlines([Str('Author'), Space(), Str('One')]), MetaInlines([Str('Author'), Space(), Str('Two')])]), 'keywords': MetaList([MetaInlines([Str('nothing')]), MetaInlines([Str('nothingness')])]), 'title': MetaInlines([Str('This'), Space(), Str('is'), Space(), Str('the'), Space(), Str('title:'), Space(), Str('it'), Space(), Str('contains'), Space(), Str('a'), Space(), Str('colon')])}), []) The literal block after the | must be indented relative to the line containing the | . If it is not, the YAML will be invalid and pandoc will not interpret it as metadata. For an overview of the complex rules governing YAML, see the Wikipedia entry on YAML syntax . Template variables will be set automatically from the metadata. Thus, for example, in writing HTML, the variable abstract will be set to the HTML equivalent of the Markdown in the abstract field: <p>This is the abstract.</p> <p>It consists of two paragraphs.</p> Variables can contain arbitrary YAML structures, but the template must match this structure. The author variable in the default templates expects a simple list or string, but can be changed to support more complicated structures. The following combination, for example, would add an affiliation to the author if one is given: Markdown Python --- title: The document title author: - name: Author One affiliation: University of Somewhere - name: Author Two affiliation: University of Nowhere ... Pandoc(Meta({'author': MetaList([MetaMap({'affiliation': MetaInlines([Str('University'), Space(), Str('of'), Space(), Str('Somewhere')]), 'name': MetaInlines([Str('Author'), Space(), Str('One')])}), MetaMap({'affiliation': MetaInlines([Str('University'), Space(), Str('of'), Space(), Str('Nowhere')]), 'name': MetaInlines([Str('Author'), Space(), Str('Two')])})]), 'title': MetaInlines([Str('The'), Space(), Str('document'), Space(), Str('title')])}), []) To use the structured authors in the example above, you would need a custom template: $for(author)$ $if(author.name)$ $author.name$$if(author.affiliation)$ ($author.affiliation$)$endif$ $else$ $author$ $endif$ $endfor$ Raw content to include in the document's header may be specified using header-includes ; however, it is important to mark up this content as raw code for a particular output format, using the raw_attribute extension ), or it will be interpreted as markdown. For example: Markdown Python --- header-includes: - | ```{=latex} \\let\\oldsection\\section \\renewcommand{\\section}[1]{\\clearpage\\oldsection{#1}} ``` ... Pandoc(Meta({'header-includes': MetaList([MetaBlocks([RawBlock(Format('latex'), '\\\\let\\\\oldsection\\\\section\\n\\\\renewcommand{\\\\section}[1]{\\\\clearpage\\\\oldsection{#1}}')])])}), []) Note: the yaml_metadata_block extension works with commonmark as well as markdown (and it is enabled by default in gfm and commonmark_x ). However, in these formats the following restrictions apply: The YAML metadata block must occur at the beginning of the document (and there can be only one). If multiple files are given as arguments to pandoc, only the first can be a YAML metadata block. The leaf nodes of the YAML structure are parsed in isolation from each other and from the rest of the document. So, for example, you can't use a reference link in these contexts if the link definition is somewhere else in the document.","title":"Extension: yaml_metadata_block"},{"location":"markdown/#backslash-escapes","text":"","title":"Backslash escapes"},{"location":"markdown/#extension-all_symbols_escapable","text":"Except inside a code block or inline code, any punctuation or space character preceded by a backslash will be treated literally, even if it would normally indicate formatting. Thus, for example, if one writes Markdown Python *\\*hello\\** Pandoc(Meta({}), [Para([Emph([Str('*hello*')])])]) one will get <em>*hello*</em> instead of <strong>hello</strong> This rule is easier to remember than standard Markdown's rule, which allows only the following characters to be backslash-escaped: \\`*_{}[]()>#+-.! (However, if the markdown_strict format is used, the standard Markdown rule will be used.) A backslash-escaped space is parsed as a nonbreaking space. In TeX output, it will appear as ~ . In HTML and XML output, it will appear as a literal unicode nonbreaking space character (note that it will thus actually look \"invisible\" in the generated HTML source; you can still use the --ascii command-line option to make it appear as an explicit entity). A backslash-escaped newline (i.e. a backslash occurring at the end of a line) is parsed as a hard line break. It will appear in TeX output as \\\\ and in HTML as <br /> . This is a nice alternative to Markdown's \"invisible\" way of indicating hard line breaks using two trailing spaces on a line. Backslash escapes do not work in verbatim contexts.","title":"Extension: all_symbols_escapable"},{"location":"markdown/#inline-formatting","text":"","title":"Inline formatting"},{"location":"markdown/#emphasis","text":"To emphasize some text, surround it with * s or _ , like this: Markdown Python This text is _emphasized with underscores_, and this is *emphasized with asterisks*. Pandoc(Meta({}), [Para([Str('This'), Space(), Str('text'), Space(), Str('is'), Space(), Emph([Str('emphasized'), Space(), Str('with'), Space(), Str('underscores')]), Str(','), Space(), Str('and'), Space(), Str('this'), SoftBreak(), Str('is'), Space(), Emph([Str('emphasized'), Space(), Str('with'), Space(), Str('asterisks')]), Str('.')])]) Double * or _ produces strong emphasis : Markdown Python This is **strong emphasis** and __with underscores__. Pandoc(Meta({}), [Para([Str('This'), Space(), Str('is'), Space(), Strong([Str('strong'), Space(), Str('emphasis')]), Space(), Str('and'), Space(), Strong([Str('with'), Space(), Str('underscores')]), Str('.')])]) A * or _ character surrounded by spaces, or backslash-escaped, will not trigger emphasis: Markdown Python This is * not emphasized *, and \\*neither is this\\*. Pandoc(Meta({}), [Para([Str('This'), Space(), Str('is'), Space(), Str('*'), Space(), Str('not'), Space(), Str('emphasized'), Space(), Str('*,'), Space(), Str('and'), Space(), Str('*neither'), Space(), Str('is'), Space(), Str('this*.')])])","title":"Emphasis"},{"location":"markdown/#extension-intraword_underscores","text":"Because _ is sometimes used inside words and identifiers, pandoc does not interpret a _ surrounded by alphanumeric characters as an emphasis marker. If you want to emphasize just part of a word, use * : Markdown Python feas*ible*, not feas*able*. Pandoc(Meta({}), [Para([Str('feas'), Emph([Str('ible')]), Str(','), Space(), Str('not'), Space(), Str('feas'), Emph([Str('able')]), Str('.')])])","title":"Extension: intraword_underscores"},{"location":"markdown/#strikeout","text":"","title":"Strikeout"},{"location":"markdown/#extension-strikeout","text":"To strikeout a section of text with a horizontal line, begin and end it with ~~ . Thus, for example, Markdown Python This ~~is deleted text.~~ Pandoc(Meta({}), [Para([Str('This'), Space(), Strikeout([Str('is'), Space(), Str('deleted'), Space(), Str('text.')])])])","title":"Extension: strikeout"},{"location":"markdown/#superscripts-and-subscripts","text":"","title":"Superscripts and subscripts"},{"location":"markdown/#extension-superscript-subscript","text":"Superscripts may be written by surrounding the superscripted text by ^ characters; subscripts may be written by surrounding the subscripted text by ~ characters. Thus, for example, Markdown Python H~2~O is a liquid. 2^10^ is 1024. Pandoc(Meta({}), [Para([Str('H'), Subscript([Str('2')]), Str('O'), Space(), Str('is'), Space(), Str('a'), Space(), Str('liquid.'), Space(), Str('2'), Superscript([Str('10')]), Space(), Str('is'), Space(), Str('1024.')])]) The text between ^...^ or ~...~ may not contain spaces or newlines. If the superscripted or subscripted text contains spaces, these spaces must be escaped with backslashes. (This is to prevent accidental superscripting and subscripting through the ordinary use of ~ and ^ , and also bad interactions with footnotes.) Thus, if you want the letter P with 'a cat' in subscripts, use P~a\\ cat~ , not P~a cat~ .","title":"Extension: superscript, subscript"},{"location":"markdown/#verbatim","text":"To make a short span of text verbatim, put it inside backticks: Markdown Python What is the difference between `>>=` and `>>`? Pandoc(Meta({}), [Para([Str('What'), Space(), Str('is'), Space(), Str('the'), Space(), Str('difference'), Space(), Str('between'), Space(), Code(('', [], []), '>>='), Space(), Str('and'), Space(), Code(('', [], []), '>>'), Str('?')])]) If the verbatim text includes a backtick, use double backticks: Markdown Python Here is a literal backtick `` ` ``. Pandoc(Meta({}), [Para([Str('Here'), Space(), Str('is'), Space(), Str('a'), Space(), Str('literal'), Space(), Str('backtick'), Space(), Code(('', [], []), '`'), Str('.')])]) (The spaces after the opening backticks and before the closing backticks will be ignored.) The general rule is that a verbatim span starts with a string of consecutive backticks (optionally followed by a space) and ends with a string of the same number of backticks (optionally preceded by a space). Note that backslash-escapes (and other Markdown constructs) do not work in verbatim contexts: Markdown Python This is a backslash followed by an asterisk: `\\*`. Pandoc(Meta({}), [Para([Str('This'), Space(), Str('is'), Space(), Str('a'), Space(), Str('backslash'), Space(), Str('followed'), Space(), Str('by'), Space(), Str('an'), Space(), Str('asterisk:'), Space(), Code(('', [], []), '\\\\*'), Str('.')])])","title":"Verbatim"},{"location":"markdown/#extension-inline_code_attributes","text":"Attributes can be attached to verbatim text, just as with fenced code blocks : Markdown Python `<$>`{.haskell} Pandoc(Meta({}), [Para([Code(('', ['haskell'], []), '<$>')])])","title":"Extension: inline_code_attributes"},{"location":"markdown/#underline","text":"To underline text, use the underline class: Markdown Python [Underline]{.underline} Pandoc(Meta({}), [Para([Underline([Str('Underline')])])]) Or, without the bracketed_spans extension (but with native_spans ): Markdown Python <span class=\"underline\">Underline</span> Pandoc(Meta({}), [Para([Underline([Str('Underline')])])]) This will work in all output formats that support underline.","title":"Underline"},{"location":"markdown/#small-caps","text":"To write small caps, use the smallcaps class: Markdown Python [Small caps]{.smallcaps} Pandoc(Meta({}), [Para([SmallCaps([Str('Small'), Space(), Str('caps')])])]) Or, without the bracketed_spans extension: Markdown Python <span class=\"smallcaps\">Small caps</span> Pandoc(Meta({}), [Para([SmallCaps([Str('Small'), Space(), Str('caps')])])]) For compatibility with other Markdown flavors, CSS is also supported: Markdown Python <span style=\"font-variant:small-caps;\">Small caps</span> Pandoc(Meta({}), [Para([SmallCaps([Str('Small'), Space(), Str('caps')])])]) This will work in all output formats that support small caps.","title":"Small caps"},{"location":"markdown/#math","text":"","title":"Math"},{"location":"markdown/#extension-tex_math_dollars","text":"Anything between two $ characters will be treated as TeX math. The opening $ must have a non-space character immediately to its right, while the closing $ must have a non-space character immediately to its left, and must not be followed immediately by a digit. Thus, $20,000 and $30,000 won't parse as math. If for some reason you need to enclose text in literal $ characters, backslash-escape them and they won't be treated as math delimiters. For display math, use $$ delimiters. (In this case, the delimiters may be separated from the formula by whitespace. However, there can be no blank lines betwen the opening and closing $$ delimiters.) TeX math will be printed in all output formats. How it is rendered depends on the output format: LaTeX. It will appear verbatim surrounded by \\(...\\) (for inline math) or \\[...\\] (for display math). Markdown, Emacs Org mode, ConTeXt, ZimWiki. It will appear verbatim surrounded by $...$ (for inline math) or $$...$$ (for display math). XWiki. It will appear verbatim surrounded by {{formula}}..{{/formula}} . reStructuredText. It will be rendered using an interpreted text role :math: . AsciiDoc. For AsciiDoc output format ( -t asciidoc ) it will appear verbatim surrounded by latexmath:[$...$] (for inline math) or [latexmath]++++\\[...\\]+++ (for display math). For AsciiDoctor output format ( -t asciidoctor ) the LaTex delimiters ( $..$ and \\[..\\] ) are omitted. Texinfo. It will be rendered inside a @math command. roff man, Jira markup. It will be rendered verbatim without $ 's. MediaWiki, DokuWiki. It will be rendered inside <math> tags. Textile. It will be rendered inside <span class=\"math\"> tags. RTF, OpenDocument. It will be rendered, if possible, using Unicode characters, and will otherwise appear verbatim. ODT. It will be rendered, if possible, using MathML. DocBook. If the --mathml flag is used, it will be rendered using MathML in an inlineequation or informalequation tag. Otherwise it will be rendered, if possible, using Unicode characters. Docx. It will be rendered using OMML math markup. FictionBook2. If the --webtex option is used, formulas are rendered as images using CodeCogs or other compatible web service, downloaded and embedded in the e-book. Otherwise, they will appear verbatim. HTML, Slidy, DZSlides, S5, EPUB. The way math is rendered in HTML will depend on the command-line options selected. Therefore see Math rendering in HTML above.","title":"Extension: tex_math_dollars"},{"location":"markdown/#raw-html","text":"","title":"Raw HTML"},{"location":"markdown/#extension-raw_html","text":"Markdown allows you to insert raw HTML (or DocBook) anywhere in a document (except verbatim contexts, where < , > , and & are interpreted literally). (Technically this is not an extension, since standard Markdown allows it, but it has been made an extension so that it can be disabled if desired.) The raw HTML is passed through unchanged in HTML, S5, Slidy, Slideous, DZSlides, EPUB, Markdown, CommonMark, Emacs Org mode, and Textile output, and suppressed in other formats. For a more explicit way of including raw HTML in a Markdown document, see the raw_attribute extension . In the CommonMark format, if raw_html is enabled, superscripts, subscripts, strikeouts and small capitals will be represented as HTML. Otherwise, plain-text fallbacks will be used. Note that even if raw_html is disabled, tables will be rendered with HTML syntax if they cannot use pipe syntax.","title":"Extension: raw_html"},{"location":"markdown/#extension-markdown_in_html_blocks","text":"Standard Markdown allows you to include HTML \"blocks\": blocks of HTML between balanced tags that are separated from the surrounding text with blank lines, and start and end at the left margin. Within these blocks, everything is interpreted as HTML, not Markdown; so (for example), * does not signify emphasis. Pandoc behaves this way when the markdown_strict format is used; but by default, pandoc interprets material between HTML block tags as Markdown. Thus, for example, pandoc will turn Markdown Python <table> <tr> <td>*one*</td> <td>[a link](https://google.com)</td> </tr> </table> Pandoc(Meta({}), [RawBlock(Format('html'), '<table>'), RawBlock(Format('html'), '<tr>'), RawBlock(Format('html'), '<td>'), Plain([Emph([Str('one')])]), RawBlock(Format('html'), '</td>'), RawBlock(Format('html'), '<td>'), Plain([Link(('', [], []), [Str('a'), Space(), Str('link')], ('https://google.com', ''))]), RawBlock(Format('html'), '</td>'), RawBlock(Format('html'), '</tr>'), RawBlock(Format('html'), '</table>')]) into <table> <tr> <td><em>one</em></td> <td><a href=\"https://google.com\">a link</a></td> </tr> </table> whereas Markdown.pl will preserve it as is. There is one exception to this rule: text between <script> , <style> , and <textarea> tags is not interpreted as Markdown. This departure from standard Markdown should make it easier to mix Markdown with HTML block elements. For example, one can surround a block of Markdown text with <div> tags without preventing it from being interpreted as Markdown.","title":"Extension: markdown_in_html_blocks"},{"location":"markdown/#extension-native_divs","text":"Use native pandoc Div blocks for content inside <div> tags. For the most part this should give the same output as markdown_in_html_blocks , but it makes it easier to write pandoc filters to manipulate groups of blocks.","title":"Extension: native_divs"},{"location":"markdown/#extension-native_spans","text":"Use native pandoc Span blocks for content inside <span> tags. For the most part this should give the same output as raw_html , but it makes it easier to write pandoc filters to manipulate groups of inlines.","title":"Extension: native_spans"},{"location":"markdown/#extension-raw_tex","text":"In addition to raw HTML, pandoc allows raw LaTeX, TeX, and ConTeXt to be included in a document. Inline TeX commands will be preserved and passed unchanged to the LaTeX and ConTeXt writers. Thus, for example, you can use LaTeX to include BibTeX citations: Markdown Python This result was proved in \\cite{jones.1967}. Pandoc(Meta({}), [Para([Str('This'), Space(), Str('result'), Space(), Str('was'), Space(), Str('proved'), Space(), Str('in'), Space(), RawInline(Format('tex'), '\\\\cite{jones.1967}'), Str('.')])]) Note that in LaTeX environments, like Markdown Python \\begin{tabular}{|l|l|}\\hline Age & Frequency \\\\ \\hline 18--25 & 15 \\\\ 26--35 & 33 \\\\ 36--45 & 22 \\\\ \\hline \\end{tabular} Pandoc(Meta({}), [RawBlock(Format('tex'), '\\\\begin{tabular}{|l|l|}\\\\hline\\nAge & Frequency \\\\\\\\ \\\\hline\\n18--25 & 15 \\\\\\\\\\n26--35 & 33 \\\\\\\\\\n36--45 & 22 \\\\\\\\ \\\\hline\\n\\\\end{tabular}')]) the material between the begin and end tags will be interpreted as raw LaTeX, not as Markdown. For a more explicit and flexible way of including raw TeX in a Markdown document, see the raw_attribute extension . Inline LaTeX is ignored in output formats other than Markdown, LaTeX, Emacs Org mode, and ConTeXt.","title":"Extension: raw_tex"},{"location":"markdown/#generic-raw-attribute","text":"","title":"Generic raw attribute"},{"location":"markdown/#extension-raw_attribute","text":"Inline spans and fenced code blocks with a special kind of attribute will be parsed as raw content with the designated format. For example, the following produces a raw roff ms block: Markdown Python ```{=ms} .MYMACRO blah blah ``` Pandoc(Meta({}), [RawBlock(Format('ms'), '.MYMACRO\\nblah blah')]) And the following produces a raw html inline element: Markdown Python This is `<a>html</a>`{=html} Pandoc(Meta({}), [Para([Str('This'), Space(), Str('is'), Space(), RawInline(Format('html'), '<a>html</a>')])]) This can be useful to insert raw xml into docx documents, e.g. a pagebreak: Markdown Python ```{=openxml} <w:p> <w:r> <w:br w:type=\"page\"/> </w:r> </w:p> ``` Pandoc(Meta({}), [RawBlock(Format('openxml'), '<w:p>\\n <w:r>\\n <w:br w:type=\"page\"/>\\n </w:r>\\n</w:p>')]) The format name should match the target format name (see -t/--to , above, for a list, or use pandoc --list-output-formats ). Use openxml for docx output, opendocument for odt output, html5 for epub3 output, html4 for epub2 output, and latex , beamer , ms , or html5 for pdf output (depending on what you use for --pdf-engine ). This extension presupposes that the relevant kind of inline code or fenced code block is enabled. Thus, for example, to use a raw attribute with a backtick code block, backtick_code_blocks must be enabled. The raw attribute cannot be combined with regular attributes.","title":"Extension: raw_attribute"},{"location":"markdown/#latex-macros","text":"","title":"LaTeX macros"},{"location":"markdown/#extension-latex_macros","text":"When this extension is enabled, pandoc will parse LaTeX macro definitions and apply the resulting macros to all LaTeX math and raw LaTeX. So, for example, the following will work in all output formats, not just LaTeX: Markdown Python \\newcommand{\\tuple}[1]{\\langle #1 \\rangle} $\\tuple{a, b, c}$ Pandoc(Meta({}), [RawBlock(Format('tex'), '\\\\newcommand{\\\\tuple}[1]{\\\\langle #1 \\\\rangle}'), Para([Math(InlineMath(), '\\\\langle a, b, c \\\\rangle')])]) Note that LaTeX macros will not be applied if they occur inside a raw span or block marked with the raw_attribute extension . When latex_macros is disabled, the raw LaTeX and math will not have macros applied. This is usually a better approach when you are targeting LaTeX or PDF. Macro definitions in LaTeX will be passed through as raw LaTeX only if latex_macros is not enabled. Macro definitions in Markdown source (or other formats allowing raw_tex ) will be passed through regardless of whether latex_macros is enabled.","title":"Extension: latex_macros"},{"location":"markdown/#links","text":"Markdown allows links to be specified in several ways.","title":"Links"},{"location":"markdown/#automatic-links","text":"If you enclose a URL or email address in pointy brackets, it will become a link: Markdown Python <https://google.com> <sam@green.eggs.ham> Pandoc(Meta({}), [Para([Link(('', ['uri'], []), [Str('https://google.com')], ('https://google.com', '')), SoftBreak(), Link(('', ['email'], []), [Str('sam@green.eggs.ham')], ('mailto:sam@green.eggs.ham', ''))])])","title":"Automatic links"},{"location":"markdown/#inline-links","text":"An inline link consists of the link text in square brackets, followed by the URL in parentheses. (Optionally, the URL can be followed by a link title, in quotes.) Markdown Python This is an [inline link](/url), and here's [one with a title](https://fsf.org \"click here for a good time!\"). Pandoc(Meta({}), [Para([Str('This'), Space(), Str('is'), Space(), Str('an'), Space(), Link(('', [], []), [Str('inline'), Space(), Str('link')], ('/url', '')), Str(','), Space(), Str('and'), Space(), Str('here\u2019s'), Space(), Link(('', [], []), [Str('one'), Space(), Str('with'), SoftBreak(), Str('a'), Space(), Str('title')], ('https://fsf.org', 'click here for a good time!')), Str('.')])]) There can be no space between the bracketed part and the parenthesized part. The link text can contain formatting (such as emphasis), but the title cannot. Email addresses in inline links are not autodetected, so they have to be prefixed with mailto : Markdown Python [Write me!](mailto:sam@green.eggs.ham) Pandoc(Meta({}), [Para([Link(('', [], []), [Str('Write'), Space(), Str('me!')], ('mailto:sam@green.eggs.ham', ''))])])","title":"Inline links"},{"location":"markdown/#reference-links","text":"An explicit reference link has two parts, the link itself and the link definition, which may occur elsewhere in the document (either before or after the link). The link consists of link text in square brackets, followed by a label in square brackets. (There cannot be space between the two unless the spaced_reference_links extension is enabled.) The link definition consists of the bracketed label, followed by a colon and a space, followed by the URL, and optionally (after a space) a link title either in quotes or in parentheses. The label must not be parseable as a citation (assuming the citations extension is enabled): citations take precedence over link labels. Here are some examples: Markdown Python [blah][my label 1], [blah][my label 2], [blah][my label 3], [blah][my label 4]. [my label 1]: /foo/bar.html \"My title, optional\" [my label 2]: /foo [my label 3]: https://fsf.org (The free software foundation) [my label 4]: /bar#special 'A title in single quotes' Pandoc(Meta({}), [Para([Link(('', [], []), [Str('blah')], ('/foo/bar.html', 'My title, optional')), Str(','), Space(), Link(('', [], []), [Str('blah')], ('/foo', '')), Str(','), Space(), Link(('', [], []), [Str('blah')], ('https://fsf.org', 'The free software foundation')), Str(','), Space(), Link(('', [], []), [Str('blah')], ('/bar#special', 'A title in single quotes')), Str('.')])]) The URL may optionally be surrounded by angle brackets: Markdown Python [blah][my label 5] [my label 5]: <http://foo.bar.baz> Pandoc(Meta({}), [Para([Link(('', [], []), [Str('blah')], ('http://foo.bar.baz', ''))])]) The title may go on the next line: Markdown Python [blah][my label 3] [my label 3]: https://fsf.org \"The free software foundation\" Pandoc(Meta({}), [Para([Link(('', [], []), [Str('blah')], ('https://fsf.org', 'The free software foundation'))])]) Note that link labels are not case sensitive. So, this will work: Markdown Python Here is [my link][FOO] [Foo]: /bar/baz Pandoc(Meta({}), [Para([Str('Here'), Space(), Str('is'), Space(), Link(('', [], []), [Str('my'), Space(), Str('link')], ('/bar/baz', ''))])]) In an implicit reference link, the second pair of brackets is empty: Markdown Python See [my website][]. [my website]: http://foo.bar.baz Pandoc(Meta({}), [Para([Str('See'), Space(), Link(('', [], []), [Str('my'), Space(), Str('website')], ('http://foo.bar.baz', '')), Str('.')])]) Note: In Markdown.pl and most other Markdown implementations, reference link definitions cannot occur in nested constructions such as list items or block quotes. Pandoc lifts this arbitrary seeming restriction. So the following is fine in pandoc, though not in most other implementations: Markdown Python > My block [quote]. > > [quote]: /foo Pandoc(Meta({}), [BlockQuote([Para([Str('My'), Space(), Str('block'), Space(), Link(('', [], []), [Str('quote')], ('/foo', '')), Str('.')])])])","title":"Reference links"},{"location":"markdown/#extension-shortcut_reference_links","text":"In a shortcut reference link, the second pair of brackets may be omitted entirely: Markdown Python See [my website]. [my website]: http://foo.bar.baz Pandoc(Meta({}), [Para([Str('See'), Space(), Link(('', [], []), [Str('my'), Space(), Str('website')], ('http://foo.bar.baz', '')), Str('.')])])","title":"Extension: shortcut_reference_links"},{"location":"markdown/#internal-links","text":"To link to another section of the same document, use the automatically generated identifier (see Heading identifiers ). For example: Markdown Python See the [Introduction](#introduction). Pandoc(Meta({}), [Para([Str('See'), Space(), Str('the'), Space(), Link(('', [], []), [Str('Introduction')], ('#introduction', '')), Str('.')])]) or Markdown Python See the [Introduction]. [Introduction]: #introduction Pandoc(Meta({}), [Para([Str('See'), Space(), Str('the'), Space(), Link(('', [], []), [Str('Introduction')], ('#introduction', '')), Str('.')])]) Internal links are currently supported for HTML formats (including HTML slide shows and EPUB), LaTeX, and ConTeXt.","title":"Internal links"},{"location":"markdown/#images","text":"A link immediately preceded by a ! will be treated as an image. The link text will be used as the image's alt text: Markdown Python ![la lune](lalune.jpg \"Voyage to the moon\") ![movie reel] [movie reel]: movie.gif Pandoc(Meta({}), [Para([Image(('', [], []), [Str('la'), Space(), Str('lune')], ('lalune.jpg', 'fig:Voyage to the moon'))]), Para([Image(('', [], []), [Str('movie'), Space(), Str('reel')], ('movie.gif', 'fig:'))])])","title":"Images"},{"location":"markdown/#extension-implicit_figures","text":"An image with nonempty alt text, occurring by itself in a paragraph, will be rendered as a figure with a caption. The image's alt text will be used as the caption. Markdown Python ![This is the caption](/url/of/image.png) Pandoc(Meta({}), [Para([Image(('', [], []), [Str('This'), Space(), Str('is'), Space(), Str('the'), Space(), Str('caption')], ('/url/of/image.png', 'fig:'))])]) How this is rendered depends on the output format. Some output formats (e.g. RTF) do not yet support figures. In those formats, you'll just get an image in a paragraph by itself, with no caption. If you just want a regular inline image, just make sure it is not the only thing in the paragraph. One way to do this is to insert a nonbreaking space after the image: Markdown Python ![This image won't be a figure](/url/of/image.png)\\ Pandoc(Meta({}), [Para([Image(('', [], []), [Str('This'), Space(), Str('image'), Space(), Str('won\u2019t'), Space(), Str('be'), Space(), Str('a'), Space(), Str('figure')], ('/url/of/image.png', '')), LineBreak()])]) Note that in reveal.js slide shows, an image in a paragraph by itself that has the stretch class will fill the screen, and the caption and figure tags will be omitted.","title":"Extension: implicit_figures"},{"location":"markdown/#extension-link_attributes","text":"Attributes can be set on links and images: Markdown Python An inline ![image](foo.jpg){#id .class width=30 height=20px} and a reference ![image][ref] with attributes. [ref]: foo.jpg \"optional title\" {#id .class key=val key2=\"val 2\"} Pandoc(Meta({}), [Para([Str('An'), Space(), Str('inline'), Space(), Image(('id', ['class'], [('width', '30'), ('height', '20px')]), [Str('image')], ('foo.jpg', '')), SoftBreak(), Str('and'), Space(), Str('a'), Space(), Str('reference'), Space(), Image(('id', ['class'], [('key', 'val'), ('key2', 'val 2')]), [Str('image')], ('foo.jpg', 'optional title')), Space(), Str('with'), Space(), Str('attributes.')])]) (This syntax is compatible with PHP Markdown Extra when only #id and .class are used.) For HTML and EPUB, all known HTML5 attributes except width and height (but including srcset and sizes ) are passed through as is. Unknown attributes are passed through as custom attributes, with data- prepended. The other writers ignore attributes that are not specifically supported by their output format. The width and height attributes on images are treated specially. When used without a unit, the unit is assumed to be pixels. However, any of the following unit identifiers can be used: px , cm , mm , in , inch and % . There must not be any spaces between the number and the unit. For example: Markdown Python ![](file.jpg){ width=50% } Pandoc(Meta({}), [Para([Image(('', [], [('width', '50%')]), [], ('file.jpg', ''))])]) Dimensions may be converted to a form that is compatible with the output format (for example, dimensions given in pixels will be converted to inches when converting HTML to LaTeX). Conversion between pixels and physical measurements is affected by the --dpi option (by default, 96 dpi is assumed, unless the image itself contains dpi information). The % unit is generally relative to some available space. For example the above example will render to the following. HTML: <img href=\"file.jpg\" style=\"width: 50%;\" /> LaTeX: \\includegraphics[width=0.5\\textwidth,height=\\textheight]{file.jpg} (If you're using a custom template, you need to configure graphicx as in the default template.) ConTeXt: \\externalfigure[file.jpg][width=0.5\\textwidth] Some output formats have a notion of a class ( ConTeXt ) or a unique identifier (LaTeX \\caption ), or both (HTML). When no width or height attributes are specified, the fallback is to look at the image resolution and the dpi metadata embedded in the image file.","title":"Extension: link_attributes"},{"location":"markdown/#divs-and-spans","text":"Using the native_divs and native_spans extensions (see above ), HTML syntax can be used as part of markdown to create native Div and Span elements in the pandoc AST (as opposed to raw HTML). However, there is also nicer syntax available:","title":"Divs and Spans"},{"location":"markdown/#extension-fenced_divs","text":"Allow special fenced syntax for native Div blocks. A Div starts with a fence containing at least three consecutive colons plus some attributes. The attributes may optionally be followed by another string of consecutive colons. The attribute syntax is exactly as in fenced code blocks (see Extension: fenced_code_attributes ). As with fenced code blocks, one can use either attributes in curly braces or a single unbraced word, which will be treated as a class name. The Div ends with another line containing a string of at least three consecutive colons. The fenced Div should be separated by blank lines from preceding and following blocks. Example: Markdown Python ::::: {#special .sidebar} Here is a paragraph. And another. ::::: Pandoc(Meta({}), [Div(('special', ['sidebar'], []), [Para([Str('Here'), Space(), Str('is'), Space(), Str('a'), Space(), Str('paragraph.')]), Para([Str('And'), Space(), Str('another.')])])]) Fenced divs can be nested. Opening fences are distinguished because they must have attributes: Markdown Python ::: Warning :::::: This is a warning. ::: Danger This is a warning within a warning. ::: :::::::::::::::::: Pandoc(Meta({}), [Div(('', ['Warning'], []), [Para([Str('This'), Space(), Str('is'), Space(), Str('a'), Space(), Str('warning.')]), Div(('', ['Danger'], []), [Para([Str('This'), Space(), Str('is'), Space(), Str('a'), Space(), Str('warning'), Space(), Str('within'), Space(), Str('a'), Space(), Str('warning.')])])])]) Fences without attributes are always closing fences. Unlike with fenced code blocks, the number of colons in the closing fence need not match the number in the opening fence. However, it can be helpful for visual clarity to use fences of different lengths to distinguish nested divs from their parents.","title":"Extension: fenced_divs"},{"location":"markdown/#extension-bracketed_spans","text":"A bracketed sequence of inlines, as one would use to begin a link, will be treated as a Span with attributes if it is followed immediately by attributes: Markdown Python [This is *some text*]{.class key=\"val\"} Pandoc(Meta({}), [Para([Span(('', ['class'], [('key', 'val')]), [Str('This'), Space(), Str('is'), Space(), Emph([Str('some'), Space(), Str('text')])])])])","title":"Extension: bracketed_spans"},{"location":"markdown/#footnotes","text":"","title":"Footnotes"},{"location":"markdown/#extension-footnotes","text":"Pandoc's Markdown allows footnotes, using the following syntax: Markdown Python Here is a footnote reference,[^1] and another.[^longnote] [^1]: Here is the footnote. [^longnote]: Here's one with multiple blocks. Subsequent paragraphs are indented to show that they belong to the previous footnote. { some.code } The whole paragraph can be indented, or just the first line. In this way, multi-paragraph footnotes work like multi-paragraph list items. This paragraph won't be part of the note, because it isn't indented. Pandoc(Meta({}), [Para([Str('Here'), Space(), Str('is'), Space(), Str('a'), Space(), Str('footnote'), Space(), Str('reference,'), Note([Para([Str('Here'), Space(), Str('is'), Space(), Str('the'), Space(), Str('footnote.')])]), Space(), Str('and'), Space(), Str('another.'), Note([Para([Str('Here\u2019s'), Space(), Str('one'), Space(), Str('with'), Space(), Str('multiple'), Space(), Str('blocks.')]), Para([Str('Subsequent'), Space(), Str('paragraphs'), Space(), Str('are'), Space(), Str('indented'), Space(), Str('to'), Space(), Str('show'), Space(), Str('that'), Space(), Str('they'), SoftBreak(), Str('belong'), Space(), Str('to'), Space(), Str('the'), Space(), Str('previous'), Space(), Str('footnote.')]), CodeBlock(('', [], []), '{ some.code }'), Para([Str('The'), Space(), Str('whole'), Space(), Str('paragraph'), Space(), Str('can'), Space(), Str('be'), Space(), Str('indented,'), Space(), Str('or'), Space(), Str('just'), Space(), Str('the'), Space(), Str('first'), SoftBreak(), Str('line.'), Space(), Str('In'), Space(), Str('this'), Space(), Str('way,'), Space(), Str('multi-paragraph'), Space(), Str('footnotes'), Space(), Str('work'), Space(), Str('like'), SoftBreak(), Str('multi-paragraph'), Space(), Str('list'), Space(), Str('items.')])])]), Para([Str('This'), Space(), Str('paragraph'), Space(), Str('won\u2019t'), Space(), Str('be'), Space(), Str('part'), Space(), Str('of'), Space(), Str('the'), Space(), Str('note,'), Space(), Str('because'), Space(), Str('it'), SoftBreak(), Str('isn\u2019t'), Space(), Str('indented.')])]) The identifiers in footnote references may not contain spaces, tabs, or newlines. These identifiers are used only to correlate the footnote reference with the note itself; in the output, footnotes will be numbered sequentially. The footnotes themselves need not be placed at the end of the document. They may appear anywhere except inside other block elements (lists, block quotes, tables, etc.). Each footnote should be separated from surrounding content (including other footnotes) by blank lines.","title":"Extension: footnotes"},{"location":"markdown/#extension-inline_notes","text":"Inline footnotes are also allowed (though, unlike regular notes, they cannot contain multiple paragraphs). The syntax is as follows: Markdown Python Here is an inline note.^[Inlines notes are easier to write, since you don't have to pick an identifier and move down to type the note.] Pandoc(Meta({}), [Para([Str('Here'), Space(), Str('is'), Space(), Str('an'), Space(), Str('inline'), Space(), Str('note.'), Note([Para([Str('Inlines'), Space(), Str('notes'), Space(), Str('are'), Space(), Str('easier'), Space(), Str('to'), Space(), Str('write,'), Space(), Str('since'), SoftBreak(), Str('you'), Space(), Str('don\u2019t'), Space(), Str('have'), Space(), Str('to'), Space(), Str('pick'), Space(), Str('an'), Space(), Str('identifier'), Space(), Str('and'), Space(), Str('move'), Space(), Str('down'), Space(), Str('to'), Space(), Str('type'), Space(), Str('the'), SoftBreak(), Str('note.')])])])]) Inline and regular footnotes may be mixed freely.","title":"Extension: inline_notes"},{"location":"markdown/#citation-syntax","text":"","title":"Citation syntax"},{"location":"markdown/#extension-citations","text":"To cite a bibliographic item with an identifier foo, use the syntax @foo . Normal citations should be included in square brackets, with semicolons separating distinct items: Markdown Python Blah blah [@doe99; @smith2000; @smith2004]. Pandoc(Meta({}), [Para([Str('Blah'), Space(), Str('blah'), Space(), Cite([Citation('doe99', [], [], NormalCitation(), 1, 0), Citation('smith2000', [], [], NormalCitation(), 1, 0), Citation('smith2004', [], [], NormalCitation(), 1, 0)], [Str('[@doe99;'), Space(), Str('@smith2000;'), Space(), Str('@smith2004]')]), Str('.')])]) How this is rendered depends on the citation style. In an author-date style, it might render as Markdown Python Blah blah (Doe 1999, Smith 2000, 2004). Pandoc(Meta({}), [Para([Str('Blah'), Space(), Str('blah'), Space(), Str('(Doe'), Space(), Str('1999,'), Space(), Str('Smith'), Space(), Str('2000,'), Space(), Str('2004).')])]) In a footnote style, it might render as Markdown Python Blah blah.[^1] [^1]: John Doe, \"Frogs,\" *Journal of Amphibians* 44 (1999); Susan Smith, \"Flies,\" *Journal of Insects* (2000); Susan Smith, \"Bees,\" *Journal of Insects* (2004). Pandoc(Meta({}), [Para([Str('Blah'), Space(), Str('blah.'), Note([Para([Str('John'), Space(), Str('Doe,'), Space(), Quoted(DoubleQuote(), [Str('Frogs,')]), Space(), Emph([Str('Journal'), Space(), Str('of'), Space(), Str('Amphibians')]), Space(), Str('44'), Space(), Str('(1999);'), SoftBreak(), Str('Susan'), Space(), Str('Smith,'), Space(), Quoted(DoubleQuote(), [Str('Flies,')]), Space(), Emph([Str('Journal'), Space(), Str('of'), Space(), Str('Insects')]), Space(), Str('(2000);'), SoftBreak(), Str('Susan'), Space(), Str('Smith,'), Space(), Quoted(DoubleQuote(), [Str('Bees,')]), Space(), Emph([Str('Journal'), Space(), Str('of'), Space(), Str('Insects')]), Space(), Str('(2004).')])])])]) See the CSL user documentation for more information about CSL styles and how they affect rendering. Unless a citation key start with a letter, digit, or _ , and contains only alphanumerics and single internal punctuation characters ( :.#$%&-+?<>~/ ), it must be surrounded by curly braces, which are not considered part of the key. In @Foo_bar.baz. , the key is Foo_bar.baz because the final period is not internal punctuation, so it is not included in the key. In @{Foo_bar.baz.} , the key is Foo_bar.baz. , including the final period. In @Foo_bar--baz , the key is Foo_bar because the repeated internal punctuation characters terminate the key. The curly braces are recommended if you use URLs as keys: [@{https://example.com/bib?name=foobar&date=2000}, p. 33] . Citation items may optionally include a prefix, a locator, and a suffix. In Markdown Python Blah blah [see @doe99, pp. 33-35 and *passim*; @smith04, chap. 1]. Pandoc(Meta({}), [Para([Str('Blah'), Space(), Str('blah'), Space(), Cite([Citation('doe99', [Str('see')], [Str(','), Space(), Str('pp.\\xa033-35'), Space(), Str('and'), Space(), Emph([Str('passim')])], NormalCitation(), 1, 0), Citation('smith04', [], [Str(','), Space(), Str('chap.\\xa01')], NormalCitation(), 1, 0)], [Str('[see'), Space(), Str('@doe99,'), Space(), Str('pp.'), Space(), Str('33-35'), Space(), Str('and'), Space(), Str('*passim*;'), Space(), Str('@smith04,'), Space(), Str('chap.'), Space(), Str('1]')]), Str('.')])]) The first item ( doe99 ) has prefix see , locator pp. 33-35 , and suffix and *passim* . The second item ( smith04 ) has locator chap. 1 and no prefix or suffix. Pandoc uses some heuristics to separate the locator from the rest of the subject. It is sensitive to the locator terms defined in the CSL locale files . Either abbreviated or unabbreviated forms are accepted. In the en-US locale, locator terms can be written in either singular or plural forms, as book , bk. / bks. ; chapter , chap. / chaps. ; column , col. / cols. ; figure , fig. / figs. ; folio , fol. / fols. ; number , no. / nos. ; line , l. / ll. ; note , n. / nn. ; opus , op. / opp. ; page , p. / pp. ; paragraph , para. / paras. ; part , pt. / pts. ; section , sec. / secs. ; sub verbo , s.v. / s.vv. ; verse , v. / vv. ; volume , vol. / vols. ; \u00b6 / \u00b6\u00b6 ; \u00a7 / \u00a7\u00a7 . If no locator term is used, \"page\" is assumed. In complex cases, you can force something to be treated as a locator by enclosing it in curly braces or prevent parsing the suffix as locator by prepending curly braces: Markdown Python [@smith{ii, A, D-Z}, with a suffix] [@smith, {pp. iv, vi-xi, (xv)-(xvii)} with suffix here] [@smith{}, 99 years later] Pandoc(Meta({}), [Para([Cite([Citation('smith', [], [Str('{ii,'), Space(), Str('A,'), Space(), Str('D-Z},'), Space(), Str('with'), Space(), Str('a'), Space(), Str('suffix')], NormalCitation(), 1, 0)], [Str('[@smith{ii,'), Space(), Str('A,'), Space(), Str('D-Z},'), Space(), Str('with'), Space(), Str('a'), Space(), Str('suffix]')]), SoftBreak(), Cite([Citation('smith', [], [Str(','), Space(), Str('{pp.\\xa0iv,'), Space(), Str('vi-xi,'), Space(), Str('(xv)-(xvii)}'), Space(), Str('with'), Space(), Str('suffix'), Space(), Str('here')], NormalCitation(), 2, 0)], [Str('[@smith,'), Space(), Str('{pp.'), Space(), Str('iv,'), Space(), Str('vi-xi,'), Space(), Str('(xv)-(xvii)}'), Space(), Str('with'), Space(), Str('suffix'), Space(), Str('here]')]), SoftBreak(), Cite([Citation('smith', [], [Str('{},'), Space(), Str('99'), Space(), Str('years'), Space(), Str('later')], NormalCitation(), 3, 0)], [Str('[@smith{},'), Space(), Str('99'), Space(), Str('years'), Space(), Str('later]')])])]) A minus sign ( - ) before the @ will suppress mention of the author in the citation. This can be useful when the author is already mentioned in the text: Markdown Python Smith says blah [-@smith04]. Pandoc(Meta({}), [Para([Str('Smith'), Space(), Str('says'), Space(), Str('blah'), Space(), Cite([Citation('smith04', [], [], SuppressAuthor(), 1, 0)], [Str('[-@smith04]')]), Str('.')])]) You can also write an author-in-text citation, by omitting the square brackets: Markdown Python @smith04 says blah. @smith04 [p. 33] says blah. Pandoc(Meta({}), [Para([Cite([Citation('smith04', [], [], AuthorInText(), 1, 0)], [Str('@smith04')]), Space(), Str('says'), Space(), Str('blah.')]), Para([Cite([Citation('smith04', [], [Str('p.\\xa033')], AuthorInText(), 2, 0)], [Str('@smith04'), Space(), Str('[p.'), Space(), Str('33]')]), Space(), Str('says'), Space(), Str('blah.')])]) This will cause the author's name to be rendered, followed by the bibliographical details. Use this form when you want to make the citation the subject of a sentence. When you are using a note style, it is usually better to let citeproc create the footnotes from citations rather than writing an explicit note. If you do write an explicit note that contains a citation, note that normal citations will be put in parentheses, while author-in-text citations will not. For this reason, it is sometimes preferable to use the author-in-text style inside notes when using a note style. The point of this rule is to ensure that normal paragraphs starting with people's initials, like Markdown Python B. Russell was an English philosopher. Pandoc(Meta({}), [Para([Str('B.'), Space(), Str('Russell'), Space(), Str('was'), Space(), Str('an'), Space(), Str('English'), Space(), Str('philosopher.')])]) do not get treated as list items. This rule will not prevent Markdown Python (C) 2007 Joe Smith Pandoc(Meta({}), [OrderedList((3, UpperAlpha(), TwoParens()), [[Plain([Str('2007'), Space(), Str('Joe'), Space(), Str('Smith')])]])]) from being interpreted as a list item. In this case, a backslash escape can be used: Markdown Python (C\\) 2007 Joe Smith Pandoc(Meta({}), [Para([Str('(C)'), Space(), Str('2007'), Space(), Str('Joe'), Space(), Str('Smith')])]) \u21a9 I have been influenced by the suggestions of David Wheeler . \u21a9 This scheme is due to Michel Fortin, who proposed it on the Markdown discussion list . \u21a9","title":"Extension: citations"}]}